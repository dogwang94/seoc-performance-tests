/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5974.0, "minX": 0.0, "maxY": 63181.0, "series": [{"data": [[0.0, 5974.0], [0.1, 30343.0], [0.2, 30346.0], [0.3, 30348.0], [0.4, 30349.0], [0.5, 30350.0], [0.6, 30354.0], [0.7, 30357.0], [0.8, 30362.0], [0.9, 30364.0], [1.0, 30368.0], [1.1, 30378.0], [1.2, 30381.0], [1.3, 30384.0], [1.4, 30391.0], [1.5, 30399.0], [1.6, 30414.0], [1.7, 30415.0], [1.8, 30420.0], [1.9, 30425.0], [2.0, 30430.0], [2.1, 30443.0], [2.2, 30449.0], [2.3, 30452.0], [2.4, 30466.0], [2.5, 30471.0], [2.6, 30476.0], [2.7, 30507.0], [2.8, 30535.0], [2.9, 30567.0], [3.0, 30602.0], [3.1, 30698.0], [3.2, 30742.0], [3.3, 30810.0], [3.4, 30909.0], [3.5, 30937.0], [3.6, 30964.0], [3.7, 30982.0], [3.8, 31100.0], [3.9, 31187.0], [4.0, 31204.0], [4.1, 31268.0], [4.2, 31463.0], [4.3, 31581.0], [4.4, 31667.0], [4.5, 31773.0], [4.6, 31802.0], [4.7, 31951.0], [4.8, 32030.0], [4.9, 32108.0], [5.0, 32143.0], [5.1, 32245.0], [5.2, 32316.0], [5.3, 32339.0], [5.4, 32374.0], [5.5, 32434.0], [5.6, 32480.0], [5.7, 32510.0], [5.8, 32544.0], [5.9, 32572.0], [6.0, 32610.0], [6.1, 32646.0], [6.2, 32702.0], [6.3, 32762.0], [6.4, 32821.0], [6.5, 32857.0], [6.6, 32918.0], [6.7, 32937.0], [6.8, 33040.0], [6.9, 33109.0], [7.0, 33144.0], [7.1, 33231.0], [7.2, 33256.0], [7.3, 33269.0], [7.4, 33301.0], [7.5, 33320.0], [7.6, 33425.0], [7.7, 33437.0], [7.8, 33564.0], [7.9, 33608.0], [8.0, 33677.0], [8.1, 33755.0], [8.2, 33772.0], [8.3, 33784.0], [8.4, 33822.0], [8.5, 33850.0], [8.6, 33883.0], [8.7, 33906.0], [8.8, 33912.0], [8.9, 33913.0], [9.0, 33935.0], [9.1, 33962.0], [9.2, 33986.0], [9.3, 34012.0], [9.4, 34038.0], [9.5, 34050.0], [9.6, 34099.0], [9.7, 34113.0], [9.8, 34129.0], [9.9, 34136.0], [10.0, 34159.0], [10.1, 34167.0], [10.2, 34178.0], [10.3, 34192.0], [10.4, 34214.0], [10.5, 34228.0], [10.6, 34248.0], [10.7, 34290.0], [10.8, 34335.0], [10.9, 34390.0], [11.0, 34427.0], [11.1, 34544.0], [11.2, 34608.0], [11.3, 34655.0], [11.4, 34691.0], [11.5, 34800.0], [11.6, 34829.0], [11.7, 34891.0], [11.8, 34966.0], [11.9, 35046.0], [12.0, 35116.0], [12.1, 35160.0], [12.2, 35180.0], [12.3, 35275.0], [12.4, 35440.0], [12.5, 35473.0], [12.6, 35558.0], [12.7, 35588.0], [12.8, 35599.0], [12.9, 35651.0], [13.0, 35707.0], [13.1, 35805.0], [13.2, 35834.0], [13.3, 35855.0], [13.4, 35895.0], [13.5, 35953.0], [13.6, 36013.0], [13.7, 36121.0], [13.8, 36189.0], [13.9, 36246.0], [14.0, 36298.0], [14.1, 36365.0], [14.2, 36477.0], [14.3, 36524.0], [14.4, 36556.0], [14.5, 36609.0], [14.6, 36642.0], [14.7, 36681.0], [14.8, 36718.0], [14.9, 36757.0], [15.0, 36883.0], [15.1, 36914.0], [15.2, 36953.0], [15.3, 37003.0], [15.4, 37061.0], [15.5, 37084.0], [15.6, 37107.0], [15.7, 37168.0], [15.8, 37204.0], [15.9, 37236.0], [16.0, 37246.0], [16.1, 37266.0], [16.2, 37322.0], [16.3, 37400.0], [16.4, 37420.0], [16.5, 37454.0], [16.6, 37462.0], [16.7, 37497.0], [16.8, 37507.0], [16.9, 37559.0], [17.0, 37626.0], [17.1, 37663.0], [17.2, 37676.0], [17.3, 37753.0], [17.4, 37815.0], [17.5, 37850.0], [17.6, 37876.0], [17.7, 37915.0], [17.8, 37927.0], [17.9, 37986.0], [18.0, 38033.0], [18.1, 38047.0], [18.2, 38117.0], [18.3, 38132.0], [18.4, 38225.0], [18.5, 38279.0], [18.6, 38303.0], [18.7, 38425.0], [18.8, 38462.0], [18.9, 38502.0], [19.0, 38586.0], [19.1, 38639.0], [19.2, 38651.0], [19.3, 38675.0], [19.4, 38771.0], [19.5, 38815.0], [19.6, 38876.0], [19.7, 38923.0], [19.8, 38996.0], [19.9, 39095.0], [20.0, 39105.0], [20.1, 39127.0], [20.2, 39159.0], [20.3, 39203.0], [20.4, 39212.0], [20.5, 39249.0], [20.6, 39296.0], [20.7, 39307.0], [20.8, 39330.0], [20.9, 39354.0], [21.0, 39392.0], [21.1, 39482.0], [21.2, 39576.0], [21.3, 39590.0], [21.4, 39633.0], [21.5, 39667.0], [21.6, 39724.0], [21.7, 39761.0], [21.8, 39781.0], [21.9, 39879.0], [22.0, 39922.0], [22.1, 40053.0], [22.2, 40115.0], [22.3, 40228.0], [22.4, 40249.0], [22.5, 40264.0], [22.6, 40303.0], [22.7, 40335.0], [22.8, 40345.0], [22.9, 40363.0], [23.0, 40410.0], [23.1, 40424.0], [23.2, 40437.0], [23.3, 40466.0], [23.4, 40488.0], [23.5, 40538.0], [23.6, 40561.0], [23.7, 40594.0], [23.8, 40643.0], [23.9, 40743.0], [24.0, 40754.0], [24.1, 40790.0], [24.2, 40800.0], [24.3, 40828.0], [24.4, 40851.0], [24.5, 40882.0], [24.6, 40905.0], [24.7, 40935.0], [24.8, 40957.0], [24.9, 40987.0], [25.0, 41030.0], [25.1, 41043.0], [25.2, 41103.0], [25.3, 41138.0], [25.4, 41177.0], [25.5, 41214.0], [25.6, 41228.0], [25.7, 41247.0], [25.8, 41361.0], [25.9, 41409.0], [26.0, 41434.0], [26.1, 41460.0], [26.2, 41534.0], [26.3, 41570.0], [26.4, 41600.0], [26.5, 41652.0], [26.6, 41723.0], [26.7, 41744.0], [26.8, 41755.0], [26.9, 41792.0], [27.0, 41813.0], [27.1, 41872.0], [27.2, 41886.0], [27.3, 41939.0], [27.4, 41947.0], [27.5, 41970.0], [27.6, 42006.0], [27.7, 42018.0], [27.8, 42113.0], [27.9, 42165.0], [28.0, 42176.0], [28.1, 42220.0], [28.2, 42272.0], [28.3, 42305.0], [28.4, 42355.0], [28.5, 42375.0], [28.6, 42397.0], [28.7, 42437.0], [28.8, 42483.0], [28.9, 42504.0], [29.0, 42534.0], [29.1, 42577.0], [29.2, 42615.0], [29.3, 42633.0], [29.4, 42648.0], [29.5, 42655.0], [29.6, 42677.0], [29.7, 42692.0], [29.8, 42711.0], [29.9, 42729.0], [30.0, 42738.0], [30.1, 42760.0], [30.2, 42812.0], [30.3, 42828.0], [30.4, 42829.0], [30.5, 42840.0], [30.6, 42857.0], [30.7, 42877.0], [30.8, 42884.0], [30.9, 42921.0], [31.0, 42941.0], [31.1, 42957.0], [31.2, 42983.0], [31.3, 43014.0], [31.4, 43041.0], [31.5, 43061.0], [31.6, 43071.0], [31.7, 43091.0], [31.8, 43123.0], [31.9, 43143.0], [32.0, 43155.0], [32.1, 43178.0], [32.2, 43211.0], [32.3, 43248.0], [32.4, 43263.0], [32.5, 43275.0], [32.6, 43288.0], [32.7, 43301.0], [32.8, 43341.0], [32.9, 43382.0], [33.0, 43404.0], [33.1, 43448.0], [33.2, 43487.0], [33.3, 43510.0], [33.4, 43574.0], [33.5, 43607.0], [33.6, 43629.0], [33.7, 43646.0], [33.8, 43693.0], [33.9, 43722.0], [34.0, 43741.0], [34.1, 43771.0], [34.2, 43825.0], [34.3, 43848.0], [34.4, 43876.0], [34.5, 43907.0], [34.6, 43944.0], [34.7, 43967.0], [34.8, 43973.0], [34.9, 44000.0], [35.0, 44033.0], [35.1, 44044.0], [35.2, 44052.0], [35.3, 44074.0], [35.4, 44096.0], [35.5, 44123.0], [35.6, 44125.0], [35.7, 44213.0], [35.8, 44246.0], [35.9, 44265.0], [36.0, 44280.0], [36.1, 44300.0], [36.2, 44308.0], [36.3, 44346.0], [36.4, 44355.0], [36.5, 44374.0], [36.6, 44416.0], [36.7, 44437.0], [36.8, 44446.0], [36.9, 44455.0], [37.0, 44462.0], [37.1, 44473.0], [37.2, 44505.0], [37.3, 44517.0], [37.4, 44558.0], [37.5, 44588.0], [37.6, 44606.0], [37.7, 44646.0], [37.8, 44658.0], [37.9, 44686.0], [38.0, 44708.0], [38.1, 44746.0], [38.2, 44784.0], [38.3, 44805.0], [38.4, 44822.0], [38.5, 44838.0], [38.6, 44862.0], [38.7, 44911.0], [38.8, 44935.0], [38.9, 44963.0], [39.0, 44984.0], [39.1, 45000.0], [39.2, 45025.0], [39.3, 45035.0], [39.4, 45053.0], [39.5, 45089.0], [39.6, 45094.0], [39.7, 45109.0], [39.8, 45120.0], [39.9, 45150.0], [40.0, 45183.0], [40.1, 45198.0], [40.2, 45225.0], [40.3, 45235.0], [40.4, 45261.0], [40.5, 45267.0], [40.6, 45276.0], [40.7, 45289.0], [40.8, 45312.0], [40.9, 45332.0], [41.0, 45343.0], [41.1, 45357.0], [41.2, 45383.0], [41.3, 45390.0], [41.4, 45399.0], [41.5, 45421.0], [41.6, 45436.0], [41.7, 45446.0], [41.8, 45461.0], [41.9, 45489.0], [42.0, 45513.0], [42.1, 45529.0], [42.2, 45555.0], [42.3, 45573.0], [42.4, 45603.0], [42.5, 45611.0], [42.6, 45629.0], [42.7, 45654.0], [42.8, 45664.0], [42.9, 45675.0], [43.0, 45677.0], [43.1, 45687.0], [43.2, 45700.0], [43.3, 45704.0], [43.4, 45719.0], [43.5, 45760.0], [43.6, 45774.0], [43.7, 45786.0], [43.8, 45807.0], [43.9, 45813.0], [44.0, 45832.0], [44.1, 45854.0], [44.2, 45864.0], [44.3, 45923.0], [44.4, 45954.0], [44.5, 45965.0], [44.6, 46000.0], [44.7, 46025.0], [44.8, 46038.0], [44.9, 46054.0], [45.0, 46065.0], [45.1, 46114.0], [45.2, 46154.0], [45.3, 46179.0], [45.4, 46227.0], [45.5, 46246.0], [45.6, 46280.0], [45.7, 46303.0], [45.8, 46336.0], [45.9, 46360.0], [46.0, 46379.0], [46.1, 46389.0], [46.2, 46397.0], [46.3, 46407.0], [46.4, 46449.0], [46.5, 46474.0], [46.6, 46488.0], [46.7, 46500.0], [46.8, 46525.0], [46.9, 46538.0], [47.0, 46622.0], [47.1, 46650.0], [47.2, 46668.0], [47.3, 46681.0], [47.4, 46715.0], [47.5, 46738.0], [47.6, 46776.0], [47.7, 46780.0], [47.8, 46822.0], [47.9, 46832.0], [48.0, 46855.0], [48.1, 46875.0], [48.2, 46895.0], [48.3, 46911.0], [48.4, 46944.0], [48.5, 46950.0], [48.6, 46970.0], [48.7, 46980.0], [48.8, 46990.0], [48.9, 46997.0], [49.0, 47005.0], [49.1, 47030.0], [49.2, 47058.0], [49.3, 47089.0], [49.4, 47109.0], [49.5, 47152.0], [49.6, 47180.0], [49.7, 47187.0], [49.8, 47200.0], [49.9, 47208.0], [50.0, 47220.0], [50.1, 47226.0], [50.2, 47242.0], [50.3, 47253.0], [50.4, 47272.0], [50.5, 47297.0], [50.6, 47311.0], [50.7, 47322.0], [50.8, 47334.0], [50.9, 47360.0], [51.0, 47366.0], [51.1, 47383.0], [51.2, 47390.0], [51.3, 47409.0], [51.4, 47430.0], [51.5, 47457.0], [51.6, 47476.0], [51.7, 47490.0], [51.8, 47504.0], [51.9, 47526.0], [52.0, 47578.0], [52.1, 47595.0], [52.2, 47616.0], [52.3, 47654.0], [52.4, 47693.0], [52.5, 47714.0], [52.6, 47731.0], [52.7, 47755.0], [52.8, 47793.0], [52.9, 47847.0], [53.0, 47874.0], [53.1, 47891.0], [53.2, 47909.0], [53.3, 47930.0], [53.4, 47970.0], [53.5, 47981.0], [53.6, 48007.0], [53.7, 48047.0], [53.8, 48061.0], [53.9, 48104.0], [54.0, 48125.0], [54.1, 48143.0], [54.2, 48203.0], [54.3, 48212.0], [54.4, 48222.0], [54.5, 48227.0], [54.6, 48256.0], [54.7, 48298.0], [54.8, 48353.0], [54.9, 48370.0], [55.0, 48405.0], [55.1, 48455.0], [55.2, 48489.0], [55.3, 48514.0], [55.4, 48555.0], [55.5, 48588.0], [55.6, 48636.0], [55.7, 48665.0], [55.8, 48692.0], [55.9, 48736.0], [56.0, 48750.0], [56.1, 48782.0], [56.2, 48803.0], [56.3, 48822.0], [56.4, 48843.0], [56.5, 48871.0], [56.6, 48941.0], [56.7, 48990.0], [56.8, 49011.0], [56.9, 49028.0], [57.0, 49039.0], [57.1, 49055.0], [57.2, 49077.0], [57.3, 49098.0], [57.4, 49120.0], [57.5, 49141.0], [57.6, 49180.0], [57.7, 49208.0], [57.8, 49229.0], [57.9, 49254.0], [58.0, 49298.0], [58.1, 49346.0], [58.2, 49396.0], [58.3, 49432.0], [58.4, 49481.0], [58.5, 49495.0], [58.6, 49542.0], [58.7, 49570.0], [58.8, 49623.0], [58.9, 49636.0], [59.0, 49713.0], [59.1, 49772.0], [59.2, 49797.0], [59.3, 49826.0], [59.4, 49857.0], [59.5, 49872.0], [59.6, 49908.0], [59.7, 49925.0], [59.8, 49981.0], [59.9, 50010.0], [60.0, 50099.0], [60.1, 50118.0], [60.2, 50160.0], [60.3, 50283.0], [60.4, 50315.0], [60.5, 50347.0], [60.6, 50423.0], [60.7, 50468.0], [60.8, 50499.0], [60.9, 50528.0], [61.0, 50560.0], [61.1, 50602.0], [61.2, 50653.0], [61.3, 50692.0], [61.4, 50749.0], [61.5, 50882.0], [61.6, 51001.0], [61.7, 51061.0], [61.8, 51146.0], [61.9, 51225.0], [62.0, 51320.0], [62.1, 51351.0], [62.2, 51460.0], [62.3, 51555.0], [62.4, 51630.0], [62.5, 51714.0], [62.6, 51794.0], [62.7, 51903.0], [62.8, 52006.0], [62.9, 52178.0], [63.0, 52309.0], [63.1, 52572.0], [63.2, 52667.0], [63.3, 52737.0], [63.4, 52880.0], [63.5, 52967.0], [63.6, 53069.0], [63.7, 53191.0], [63.8, 53253.0], [63.9, 53340.0], [64.0, 53412.0], [64.1, 53441.0], [64.2, 53468.0], [64.3, 53678.0], [64.4, 53780.0], [64.5, 53919.0], [64.6, 54091.0], [64.7, 54121.0], [64.8, 54180.0], [64.9, 54289.0], [65.0, 54330.0], [65.1, 54395.0], [65.2, 54435.0], [65.3, 54504.0], [65.4, 54563.0], [65.5, 54731.0], [65.6, 54818.0], [65.7, 54901.0], [65.8, 55017.0], [65.9, 55097.0], [66.0, 55141.0], [66.1, 55205.0], [66.2, 55274.0], [66.3, 55348.0], [66.4, 55411.0], [66.5, 55464.0], [66.6, 55556.0], [66.7, 55581.0], [66.8, 55618.0], [66.9, 55664.0], [67.0, 55768.0], [67.1, 55838.0], [67.2, 55935.0], [67.3, 55998.0], [67.4, 56046.0], [67.5, 56115.0], [67.6, 56133.0], [67.7, 56163.0], [67.8, 56175.0], [67.9, 56224.0], [68.0, 56242.0], [68.1, 56248.0], [68.2, 56256.0], [68.3, 56334.0], [68.4, 56371.0], [68.5, 56382.0], [68.6, 56413.0], [68.7, 56430.0], [68.8, 56482.0], [68.9, 56516.0], [69.0, 56557.0], [69.1, 56643.0], [69.2, 56662.0], [69.3, 56675.0], [69.4, 56696.0], [69.5, 56708.0], [69.6, 56765.0], [69.7, 56785.0], [69.8, 56801.0], [69.9, 56815.0], [70.0, 56832.0], [70.1, 56852.0], [70.2, 56872.0], [70.3, 56882.0], [70.4, 56893.0], [70.5, 56916.0], [70.6, 56952.0], [70.7, 56964.0], [70.8, 56978.0], [70.9, 56986.0], [71.0, 56995.0], [71.1, 57022.0], [71.2, 57044.0], [71.3, 57061.0], [71.4, 57086.0], [71.5, 57116.0], [71.6, 57180.0], [71.7, 57211.0], [71.8, 57254.0], [71.9, 57306.0], [72.0, 57402.0], [72.1, 57482.0], [72.2, 57554.0], [72.3, 57683.0], [72.4, 57792.0], [72.5, 57853.0], [72.6, 57923.0], [72.7, 57965.0], [72.8, 58054.0], [72.9, 58093.0], [73.0, 58138.0], [73.1, 58175.0], [73.2, 58225.0], [73.3, 58282.0], [73.4, 58356.0], [73.5, 58409.0], [73.6, 58482.0], [73.7, 58535.0], [73.8, 58663.0], [73.9, 58745.0], [74.0, 58783.0], [74.1, 58840.0], [74.2, 58940.0], [74.3, 58989.0], [74.4, 59083.0], [74.5, 59115.0], [74.6, 59277.0], [74.7, 59354.0], [74.8, 59417.0], [74.9, 59489.0], [75.0, 59596.0], [75.1, 59673.0], [75.2, 59720.0], [75.3, 59779.0], [75.4, 59844.0], [75.5, 59964.0], [75.6, 60020.0], [75.7, 60041.0], [75.8, 60074.0], [75.9, 60110.0], [76.0, 60133.0], [76.1, 60136.0], [76.2, 60138.0], [76.3, 60140.0], [76.4, 60140.0], [76.5, 60141.0], [76.6, 60142.0], [76.7, 60142.0], [76.8, 60143.0], [76.9, 60144.0], [77.0, 60148.0], [77.1, 60149.0], [77.2, 60149.0], [77.3, 60150.0], [77.4, 60150.0], [77.5, 60152.0], [77.6, 60172.0], [77.7, 60284.0], [77.8, 60363.0], [77.9, 60371.0], [78.0, 60384.0], [78.1, 60385.0], [78.2, 60387.0], [78.3, 60389.0], [78.4, 60389.0], [78.5, 60390.0], [78.6, 60390.0], [78.7, 60391.0], [78.8, 60392.0], [78.9, 60392.0], [79.0, 60393.0], [79.1, 60393.0], [79.2, 60394.0], [79.3, 60394.0], [79.4, 60394.0], [79.5, 60394.0], [79.6, 60394.0], [79.7, 60395.0], [79.8, 60395.0], [79.9, 60395.0], [80.0, 60395.0], [80.1, 60396.0], [80.2, 60396.0], [80.3, 60396.0], [80.4, 60396.0], [80.5, 60396.0], [80.6, 60396.0], [80.7, 60396.0], [80.8, 60397.0], [80.9, 60397.0], [81.0, 60397.0], [81.1, 60397.0], [81.2, 60397.0], [81.3, 60397.0], [81.4, 60397.0], [81.5, 60397.0], [81.6, 60398.0], [81.7, 60398.0], [81.8, 60398.0], [81.9, 60398.0], [82.0, 60398.0], [82.1, 60398.0], [82.2, 60398.0], [82.3, 60398.0], [82.4, 60398.0], [82.5, 60399.0], [82.6, 60399.0], [82.7, 60399.0], [82.8, 60399.0], [82.9, 60399.0], [83.0, 60399.0], [83.1, 60399.0], [83.2, 60399.0], [83.3, 60399.0], [83.4, 60399.0], [83.5, 60399.0], [83.6, 60400.0], [83.7, 60400.0], [83.8, 60400.0], [83.9, 60400.0], [84.0, 60400.0], [84.1, 60400.0], [84.2, 60400.0], [84.3, 60400.0], [84.4, 60401.0], [84.5, 60401.0], [84.6, 60401.0], [84.7, 60401.0], [84.8, 60401.0], [84.9, 60402.0], [85.0, 60402.0], [85.1, 60402.0], [85.2, 60402.0], [85.3, 60402.0], [85.4, 60402.0], [85.5, 60402.0], [85.6, 60402.0], [85.7, 60403.0], [85.8, 60403.0], [85.9, 60403.0], [86.0, 60404.0], [86.1, 60404.0], [86.2, 60404.0], [86.3, 60405.0], [86.4, 60405.0], [86.5, 60405.0], [86.6, 60405.0], [86.7, 60406.0], [86.8, 60406.0], [86.9, 60407.0], [87.0, 60408.0], [87.1, 60408.0], [87.2, 60409.0], [87.3, 60410.0], [87.4, 60410.0], [87.5, 60411.0], [87.6, 60413.0], [87.7, 60413.0], [87.8, 60414.0], [87.9, 60417.0], [88.0, 60418.0], [88.1, 60419.0], [88.2, 60420.0], [88.3, 60421.0], [88.4, 60421.0], [88.5, 60422.0], [88.6, 60422.0], [88.7, 60422.0], [88.8, 60423.0], [88.9, 60424.0], [89.0, 60424.0], [89.1, 60425.0], [89.2, 60425.0], [89.3, 60425.0], [89.4, 60425.0], [89.5, 60426.0], [89.6, 60426.0], [89.7, 60426.0], [89.8, 60426.0], [89.9, 60427.0], [90.0, 60427.0], [90.1, 60427.0], [90.2, 60428.0], [90.3, 60428.0], [90.4, 60428.0], [90.5, 60428.0], [90.6, 60428.0], [90.7, 60429.0], [90.8, 60429.0], [90.9, 60429.0], [91.0, 60429.0], [91.1, 60429.0], [91.2, 60429.0], [91.3, 60430.0], [91.4, 60430.0], [91.5, 60430.0], [91.6, 60430.0], [91.7, 60430.0], [91.8, 60430.0], [91.9, 60430.0], [92.0, 60430.0], [92.1, 60430.0], [92.2, 60431.0], [92.3, 60431.0], [92.4, 60431.0], [92.5, 60431.0], [92.6, 60431.0], [92.7, 60431.0], [92.8, 60431.0], [92.9, 60431.0], [93.0, 60431.0], [93.1, 60432.0], [93.2, 60432.0], [93.3, 60432.0], [93.4, 60432.0], [93.5, 60432.0], [93.6, 60432.0], [93.7, 60432.0], [93.8, 60432.0], [93.9, 60433.0], [94.0, 60433.0], [94.1, 60433.0], [94.2, 60433.0], [94.3, 60433.0], [94.4, 60433.0], [94.5, 60434.0], [94.6, 60434.0], [94.7, 60434.0], [94.8, 60435.0], [94.9, 60435.0], [95.0, 60435.0], [95.1, 60435.0], [95.2, 60435.0], [95.3, 60435.0], [95.4, 60436.0], [95.5, 60436.0], [95.6, 60436.0], [95.7, 60436.0], [95.8, 60437.0], [95.9, 60437.0], [96.0, 60437.0], [96.1, 60437.0], [96.2, 60438.0], [96.3, 60438.0], [96.4, 60439.0], [96.5, 60439.0], [96.6, 60440.0], [96.7, 60441.0], [96.8, 60442.0], [96.9, 60443.0], [97.0, 60445.0], [97.1, 60446.0], [97.2, 60447.0], [97.3, 60449.0], [97.4, 60450.0], [97.5, 60452.0], [97.6, 60458.0], [97.7, 60459.0], [97.8, 60462.0], [97.9, 60469.0], [98.0, 60471.0], [98.1, 60475.0], [98.2, 60482.0], [98.3, 60487.0], [98.4, 60495.0], [98.5, 60499.0], [98.6, 60511.0], [98.7, 60515.0], [98.8, 60531.0], [98.9, 60555.0], [99.0, 60596.0], [99.1, 60678.0], [99.2, 60765.0], [99.3, 60941.0], [99.4, 61183.0], [99.5, 61528.0], [99.6, 61616.0], [99.7, 61670.0], [99.8, 62132.0], [99.9, 62610.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 5900.0, "maxY": 563.0, "series": [{"data": [[33700.0, 12.0], [32900.0, 7.0], [33300.0, 7.0], [34500.0, 4.0], [34100.0, 28.0], [35700.0, 4.0], [36100.0, 6.0], [35300.0, 2.0], [34900.0, 5.0], [36500.0, 7.0], [37300.0, 5.0], [38500.0, 6.0], [38100.0, 8.0], [37700.0, 7.0], [38900.0, 5.0], [36900.0, 8.0], [40100.0, 4.0], [40900.0, 15.0], [39300.0, 15.0], [40500.0, 9.0], [39700.0, 10.0], [42100.0, 9.0], [41700.0, 14.0], [42900.0, 16.0], [42500.0, 12.0], [41300.0, 4.0], [43300.0, 11.0], [44500.0, 16.0], [44100.0, 9.0], [43700.0, 13.0], [44900.0, 15.0], [45700.0, 22.0], [46900.0, 28.0], [45300.0, 23.0], [46100.0, 10.0], [46500.0, 11.0], [47300.0, 28.0], [48500.0, 11.0], [47700.0, 14.0], [48100.0, 11.0], [48900.0, 9.0], [49700.0, 9.0], [50500.0, 10.0], [49300.0, 7.0], [50100.0, 10.0], [50900.0, 3.0], [51700.0, 6.0], [52900.0, 4.0], [52100.0, 3.0], [51300.0, 7.0], [52500.0, 1.0], [54100.0, 6.0], [53300.0, 6.0], [54500.0, 7.0], [54900.0, 3.0], [53700.0, 2.0], [57300.0, 4.0], [56900.0, 21.0], [56100.0, 15.0], [56500.0, 7.0], [55700.0, 4.0], [55300.0, 5.0], [59300.0, 7.0], [58900.0, 6.0], [58100.0, 11.0], [57700.0, 4.0], [58500.0, 4.0], [60100.0, 65.0], [59700.0, 6.0], [60500.0, 18.0], [60900.0, 3.0], [61300.0, 1.0], [62900.0, 1.0], [61700.0, 2.0], [62100.0, 2.0], [62500.0, 1.0], [5900.0, 1.0], [12800.0, 1.0], [18600.0, 1.0], [30400.0, 44.0], [30600.0, 5.0], [31000.0, 3.0], [31400.0, 4.0], [31600.0, 2.0], [31200.0, 5.0], [30800.0, 5.0], [32400.0, 8.0], [32200.0, 5.0], [32000.0, 4.0], [31800.0, 4.0], [32600.0, 8.0], [34400.0, 4.0], [33200.0, 13.0], [32800.0, 7.0], [33600.0, 6.0], [34000.0, 14.0], [34800.0, 8.0], [35200.0, 3.0], [35600.0, 7.0], [36400.0, 5.0], [36000.0, 4.0], [36800.0, 6.0], [38400.0, 9.0], [37600.0, 10.0], [38800.0, 8.0], [37200.0, 14.0], [38000.0, 7.0], [40400.0, 19.0], [39200.0, 12.0], [39600.0, 9.0], [40000.0, 5.0], [40800.0, 14.0], [42000.0, 8.0], [42800.0, 24.0], [42400.0, 8.0], [41200.0, 11.0], [41600.0, 6.0], [44000.0, 20.0], [44400.0, 24.0], [43600.0, 13.0], [43200.0, 20.0], [44800.0, 15.0], [45200.0, 26.0], [46800.0, 17.0], [46000.0, 19.0], [46400.0, 18.0], [45600.0, 30.0], [47600.0, 12.0], [47200.0, 27.0], [48400.0, 13.0], [48000.0, 13.0], [48800.0, 13.0], [49200.0, 13.0], [49600.0, 8.0], [50400.0, 10.0], [50000.0, 6.0], [50800.0, 4.0], [52800.0, 2.0], [53200.0, 2.0], [52000.0, 1.0], [51600.0, 4.0], [51200.0, 4.0], [52400.0, 1.0], [54800.0, 4.0], [53600.0, 4.0], [54400.0, 6.0], [55200.0, 7.0], [54000.0, 5.0], [57200.0, 9.0], [56000.0, 5.0], [55600.0, 7.0], [56800.0, 25.0], [56400.0, 10.0], [58800.0, 5.0], [58400.0, 8.0], [57600.0, 4.0], [58000.0, 7.0], [59200.0, 2.0], [60400.0, 563.0], [59600.0, 6.0], [60000.0, 12.0], [62400.0, 1.0], [61600.0, 5.0], [33500.0, 4.0], [33100.0, 6.0], [34300.0, 9.0], [33900.0, 24.0], [34700.0, 3.0], [35500.0, 8.0], [35100.0, 10.0], [36300.0, 5.0], [35900.0, 6.0], [36700.0, 7.0], [37900.0, 11.0], [38700.0, 6.0], [37100.0, 8.0], [37500.0, 8.0], [38300.0, 2.0], [39900.0, 3.0], [40300.0, 14.0], [39100.0, 13.0], [40700.0, 11.0], [39500.0, 7.0], [42300.0, 13.0], [41100.0, 12.0], [41900.0, 13.0], [41500.0, 8.0], [42700.0, 17.0], [43900.0, 16.0], [44700.0, 11.0], [44300.0, 17.0], [43100.0, 17.0], [43500.0, 9.0], [45100.0, 17.0], [45500.0, 18.0], [47100.0, 16.0], [45900.0, 11.0], [46300.0, 20.0], [46700.0, 14.0], [49100.0, 14.0], [48700.0, 14.0], [47900.0, 15.0], [47500.0, 15.0], [48300.0, 8.0], [49500.0, 10.0], [51100.0, 6.0], [50300.0, 8.0], [49900.0, 10.0], [50700.0, 4.0], [52700.0, 3.0], [53100.0, 5.0], [52300.0, 4.0], [51900.0, 4.0], [51500.0, 3.0], [55100.0, 6.0], [54700.0, 3.0], [53500.0, 1.0], [54300.0, 7.0], [53900.0, 3.0], [56700.0, 12.0], [55900.0, 6.0], [55500.0, 8.0], [56300.0, 12.0], [57100.0, 8.0], [57500.0, 3.0], [57900.0, 5.0], [58700.0, 5.0], [58300.0, 4.0], [59100.0, 4.0], [61100.0, 1.0], [60300.0, 216.0], [59900.0, 5.0], [59500.0, 4.0], [60700.0, 3.0], [63100.0, 1.0], [61500.0, 4.0], [30300.0, 54.0], [30700.0, 5.0], [30500.0, 11.0], [30900.0, 12.0], [31100.0, 7.0], [31500.0, 5.0], [31700.0, 7.0], [32300.0, 10.0], [32500.0, 11.0], [32700.0, 7.0], [32100.0, 7.0], [31900.0, 3.0], [33000.0, 5.0], [33400.0, 7.0], [33800.0, 10.0], [34600.0, 9.0], [34200.0, 13.0], [36200.0, 6.0], [35000.0, 5.0], [35400.0, 8.0], [35800.0, 12.0], [36600.0, 10.0], [37400.0, 16.0], [37800.0, 10.0], [38200.0, 9.0], [37000.0, 11.0], [38600.0, 10.0], [39800.0, 4.0], [40600.0, 7.0], [40200.0, 13.0], [39000.0, 5.0], [39400.0, 4.0], [43000.0, 17.0], [42200.0, 9.0], [41800.0, 12.0], [42600.0, 22.0], [41400.0, 11.0], [41000.0, 7.0], [44200.0, 16.0], [43800.0, 11.0], [45000.0, 21.0], [44600.0, 15.0], [43400.0, 9.0], [46600.0, 15.0], [45400.0, 19.0], [45800.0, 19.0], [46200.0, 12.0], [47000.0, 15.0], [49000.0, 20.0], [47400.0, 18.0], [48200.0, 20.0], [47800.0, 12.0], [48600.0, 9.0], [49400.0, 11.0], [50600.0, 8.0], [49800.0, 14.0], [50200.0, 2.0], [51000.0, 5.0], [52600.0, 6.0], [53000.0, 4.0], [51800.0, 3.0], [52200.0, 2.0], [51400.0, 3.0], [53400.0, 10.0], [54600.0, 1.0], [54200.0, 4.0], [53800.0, 1.0], [55000.0, 6.0], [57000.0, 16.0], [55800.0, 4.0], [55400.0, 5.0], [56200.0, 16.0], [56600.0, 16.0], [58600.0, 5.0], [57400.0, 5.0], [58200.0, 5.0], [57800.0, 6.0], [59000.0, 5.0], [60600.0, 5.0], [60200.0, 5.0], [59800.0, 4.0], [59400.0, 4.0], [61000.0, 3.0], [61400.0, 1.0], [61800.0, 1.0], [62600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 63100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 259.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3491.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 259.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3491.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.03030303030303, "minX": 1.60842498E12, "maxY": 250.0, "series": [{"data": [[1.6084251E12, 250.0], [1.6084254E12, 250.0], [1.60842504E12, 250.0], [1.6084257E12, 134.6704980842913], [1.60842534E12, 250.0], [1.60842564E12, 240.13750000000002], [1.60842498E12, 250.0], [1.60842528E12, 250.0], [1.60842558E12, 249.93968253968248], [1.60842522E12, 250.0], [1.60842552E12, 250.0], [1.60842516E12, 250.0], [1.60842576E12, 16.03030303030303], [1.60842546E12, 250.0]], "isOverall": false, "label": "SEOC_Active_Thread_Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842576E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5974.0, "minX": 1.0, "maxY": 60941.0, "series": [{"data": [[2.0, 43656.0], [3.0, 49990.0], [4.0, 46816.0], [5.0, 46948.0], [6.0, 12807.0], [7.0, 18655.0], [8.0, 45932.0], [9.0, 44317.0], [10.0, 42431.0], [11.0, 48814.0], [12.0, 58567.0], [13.0, 43382.0], [14.0, 49146.0], [15.0, 53024.0], [16.0, 60941.0], [17.0, 60399.0], [18.0, 60395.0], [19.0, 60397.0], [20.0, 60392.0], [21.0, 60452.0], [22.0, 60433.5], [23.0, 60388.0], [24.0, 60395.0], [25.0, 60396.0], [26.0, 60402.0], [27.0, 60390.0], [28.0, 60392.0], [29.0, 60397.0], [30.0, 60404.0], [31.0, 60403.0], [33.0, 31529.0], [32.0, 60140.0], [35.0, 60401.0], [34.0, 60411.0], [37.0, 60462.0], [36.0, 30359.0], [39.0, 60396.0], [38.0, 60421.0], [41.0, 30350.0], [40.0, 60398.0], [43.0, 60630.0], [42.0, 60394.0], [45.0, 60399.0], [44.0, 30418.0], [47.0, 60385.5], [49.0, 30344.0], [48.0, 30343.0], [51.0, 60391.0], [50.0, 60398.0], [53.0, 30393.0], [52.0, 30521.0], [55.0, 60397.5], [54.0, 30418.0], [57.0, 60394.0], [56.0, 30351.0], [59.0, 60403.0], [58.0, 60399.0], [61.0, 31578.0], [60.0, 32086.0], [63.0, 30944.0], [62.0, 31041.0], [67.0, 58110.0], [66.0, 58803.0], [65.0, 58326.0], [64.0, 45406.5], [71.0, 30414.0], [70.0, 30452.0], [69.0, 30448.0], [68.0, 30451.0], [75.0, 60404.0], [74.0, 30365.0], [73.0, 60422.0], [72.0, 30377.0], [79.0, 60407.5], [78.0, 60402.0], [77.0, 60403.0], [76.0, 30364.0], [83.0, 30347.0], [82.0, 30355.0], [81.0, 30354.0], [80.0, 60401.0], [87.0, 30381.0], [86.0, 30401.0], [85.0, 30449.0], [84.0, 30517.0], [91.0, 30459.0], [90.0, 30353.0], [89.0, 30484.0], [88.0, 30426.0], [95.0, 30476.0], [94.0, 30344.0], [93.0, 30345.0], [92.0, 60399.0], [99.0, 30352.0], [98.0, 30348.0], [97.0, 30443.0], [96.0, 30349.0], [103.0, 31584.5], [102.0, 30347.0], [101.0, 30359.0], [100.0, 60397.0], [107.0, 59252.0], [106.0, 43493.0], [105.0, 38502.0], [104.0, 32609.0], [111.0, 50169.0], [110.0, 47908.5], [109.0, 47242.0], [108.0, 45774.0], [115.0, 54435.0], [114.0, 51343.0], [113.0, 55116.0], [112.0, 51726.0], [119.0, 48104.0], [118.0, 48222.0], [117.0, 48748.0], [116.0, 50315.0], [123.0, 48215.0], [122.0, 48129.0], [121.0, 50308.0], [120.0, 47981.0], [127.0, 44729.333333333336], [126.0, 45975.0], [125.0, 46745.0], [124.0, 48265.0], [135.0, 39036.0], [134.0, 38996.0], [133.0, 40017.5], [132.0, 40474.0], [131.0, 40605.0], [130.0, 41214.0], [129.0, 41553.0], [128.0, 42375.0], [143.0, 35456.0], [142.0, 35626.0], [141.0, 35847.0], [140.0, 35834.0], [139.0, 36149.0], [138.0, 36629.0], [137.0, 37061.0], [136.0, 38984.0], [151.0, 34099.0], [150.0, 60396.0], [149.0, 60395.0], [148.0, 60405.0], [147.0, 60402.0], [146.0, 60395.0], [145.0, 34160.0], [144.0, 47238.0], [159.0, 33762.0], [158.0, 33801.0], [157.0, 33939.0], [156.0, 33942.0], [155.0, 33962.5], [154.0, 33871.0], [153.0, 33848.0], [152.0, 60396.0], [167.0, 53040.0], [166.0, 46100.5], [165.0, 41362.0], [164.0, 32313.5], [163.0, 32353.0], [162.0, 60396.0], [161.0, 60394.0], [160.0, 47077.5], [175.0, 31968.0], [174.0, 31100.0], [173.0, 30764.0], [172.0, 30537.0], [171.0, 30804.0], [170.0, 38617.5], [169.0, 60418.333333333336], [168.0, 60419.0], [183.0, 36953.0], [182.0, 34472.0], [181.0, 34130.0], [180.0, 34752.0], [179.0, 34248.0], [178.0, 34128.0], [177.0, 32554.0], [176.0, 31247.0], [191.0, 46194.333333333336], [190.0, 43263.0], [189.0, 43493.0], [188.0, 42635.0], [187.0, 44963.0], [186.0, 50667.0], [185.0, 50677.5], [184.0, 38884.0], [199.0, 56251.0], [198.0, 59395.0], [197.0, 56014.5], [196.0, 56381.5], [195.0, 56380.0], [194.0, 52935.0], [193.0, 53749.0], [192.0, 48664.0], [207.0, 56121.0], [206.0, 56132.5], [205.0, 56133.0], [204.0, 59029.0], [203.0, 56261.0], [202.0, 56256.0], [201.0, 56249.5], [200.0, 56247.0], [215.0, 54763.0], [214.0, 54330.0], [213.0, 54299.0], [212.0, 54959.2], [211.0, 56242.75], [210.0, 56501.0], [209.0, 60425.0], [208.0, 56163.0], [223.0, 34428.666666666664], [222.0, 39919.181818181816], [221.0, 43971.0], [220.0, 45087.0], [219.0, 46906.333333333336], [218.0, 49730.666666666664], [217.0, 51818.5], [216.0, 53046.5], [231.0, 55282.93750000001], [230.0, 34136.0], [229.0, 33909.8], [228.0, 33913.0], [227.0, 33908.0], [226.0, 34010.0], [225.0, 34058.5], [224.0, 34089.25], [239.0, 44205.0], [238.0, 39746.666666666664], [237.0, 36369.0], [236.0, 41538.71428571428], [235.0, 51030.666666666664], [234.0, 33486.5], [233.0, 47185.60869565217], [232.0, 60426.75], [247.0, 49436.82222222222], [246.0, 40924.44897959183], [245.0, 54508.0], [244.0, 53959.42857142857], [243.0, 55438.5], [242.0, 56941.71428571428], [241.0, 56618.5], [240.0, 53421.769230769234], [250.0, 48341.33493743973], [249.0, 54782.35555555554], [248.0, 53549.11904761905], [1.0, 5974.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[239.06746666666646, 48212.261866666544]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 89.1, "minX": 1.60842498E12, "maxY": 2431129.75, "series": [{"data": [[1.6084251E12, 2431129.75], [1.6084254E12, 751265.2], [1.60842504E12, 2307138.683333333], [1.6084257E12, 874820.5833333334], [1.60842534E12, 1186339.7833333334], [1.60842564E12, 564502.4333333333], [1.60842498E12, 2428416.8833333333], [1.60842528E12, 66670.28333333334], [1.60842558E12, 66713.51666666666], [1.60842522E12, 1124211.3666666667], [1.60842552E12, 750276.35], [1.60842516E12, 1311314.3], [1.60842576E12, 1058319.0166666666], [1.60842546E12, 1248089.8833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6084251E12, 834.3], [1.6084254E12, 880.2], [1.60842504E12, 904.5], [1.6084257E12, 704.7], [1.60842534E12, 783.0], [1.60842564E12, 864.0], [1.60842498E12, 313.2], [1.60842528E12, 861.3], [1.60842558E12, 850.5], [1.60842522E12, 801.9], [1.60842552E12, 683.1], [1.60842516E12, 882.9], [1.60842576E12, 89.1], [1.60842546E12, 672.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842576E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 36491.15517241379, "minX": 1.60842498E12, "maxY": 53821.37349397589, "series": [{"data": [[1.6084251E12, 45446.288025889975], [1.6084254E12, 48795.85582822087], [1.60842504E12, 46598.728358208995], [1.6084257E12, 46090.356321839114], [1.60842534E12, 49100.85172413795], [1.60842564E12, 48254.55312500005], [1.60842498E12, 36491.15517241379], [1.60842528E12, 49547.85893416925], [1.60842558E12, 51232.098412698404], [1.60842522E12, 47285.36700336703], [1.60842552E12, 49980.15019762848], [1.60842516E12, 47616.694189602495], [1.60842576E12, 51121.333333333336], [1.60842546E12, 53821.37349397589]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842576E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 35414.04310344828, "minX": 1.60842498E12, "maxY": 53736.811244979916, "series": [{"data": [[1.6084251E12, 45194.81877022655], [1.6084254E12, 48748.254601227], [1.60842504E12, 46304.65074626865], [1.6084257E12, 46037.337164750956], [1.60842534E12, 49029.94137931035], [1.60842564E12, 48224.759375], [1.60842498E12, 35414.04310344828], [1.60842528E12, 49544.85266457676], [1.60842558E12, 51224.774603174614], [1.60842522E12, 47209.06060606058], [1.60842552E12, 49891.17391304351], [1.60842516E12, 47508.5290519878], [1.60842576E12, 50154.24242424242], [1.60842546E12, 53736.811244979916]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842576E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 231.38187702265367, "minX": 1.60842498E12, "maxY": 1032.448275862069, "series": [{"data": [[1.6084251E12, 231.38187702265367], [1.6084254E12, 256.1012269938649], [1.60842504E12, 533.4268656716421], [1.6084257E12, 257.95402298850576], [1.60842534E12, 271.6241379310346], [1.60842564E12, 275.10937499999994], [1.60842498E12, 1032.448275862069], [1.60842528E12, 260.5015673981196], [1.60842558E12, 276.6349206349208], [1.60842522E12, 256.07070707070733], [1.60842552E12, 256.4545454545456], [1.60842516E12, 261.32721712538205], [1.60842576E12, 263.9090909090909], [1.60842546E12, 264.9076305220882]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842576E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5974.0, "minX": 1.60842498E12, "maxY": 62633.0, "series": [{"data": [[1.6084251E12, 60765.0], [1.6084254E12, 62633.0], [1.60842504E12, 60728.0], [1.6084257E12, 61062.0], [1.60842534E12, 59596.0], [1.60842564E12, 60296.0], [1.60842498E12, 49545.0], [1.60842528E12, 54180.0], [1.60842558E12, 52143.0], [1.60842522E12, 61009.0], [1.60842552E12, 61411.0], [1.60842516E12, 60934.0], [1.60842576E12, 60941.0], [1.60842546E12, 60695.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6084251E12, 59382.0], [1.6084254E12, 62301.5], [1.60842504E12, 57694.600000000006], [1.6084257E12, 60157.0], [1.60842534E12, 59313.0], [1.60842564E12, 60296.0], [1.60842498E12, 49141.0], [1.60842528E12, 54180.0], [1.60842558E12, 52143.0], [1.60842522E12, 59755.3], [1.60842552E12, 61142.5], [1.60842516E12, 60138.2], [1.60842576E12, 59041.799999999996], [1.60842546E12, 60480.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6084251E12, 60765.0], [1.6084254E12, 62633.0], [1.60842504E12, 60728.0], [1.6084257E12, 61062.0], [1.60842534E12, 59596.0], [1.60842564E12, 60296.0], [1.60842498E12, 49545.0], [1.60842528E12, 54180.0], [1.60842558E12, 52143.0], [1.60842522E12, 61009.0], [1.60842552E12, 61411.0], [1.60842516E12, 60934.0], [1.60842576E12, 60941.0], [1.60842546E12, 60695.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6084251E12, 59489.0], [1.6084254E12, 62633.0], [1.60842504E12, 59488.700000000004], [1.6084257E12, 61062.0], [1.60842534E12, 59596.0], [1.60842564E12, 60296.0], [1.60842498E12, 49402.0], [1.60842528E12, 54180.0], [1.60842558E12, 52143.0], [1.60842522E12, 61009.0], [1.60842552E12, 61411.0], [1.60842516E12, 60869.0], [1.60842576E12, 60941.0], [1.60842546E12, 60685.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6084251E12, 43825.0], [1.6084254E12, 53780.0], [1.60842504E12, 39226.0], [1.6084257E12, 45975.0], [1.60842534E12, 51997.0], [1.60842564E12, 44654.0], [1.60842498E12, 36246.0], [1.60842528E12, 54180.0], [1.60842558E12, 52143.0], [1.60842522E12, 49632.0], [1.60842552E12, 51466.0], [1.60842516E12, 46698.0], [1.60842576E12, 5974.0], [1.60842546E12, 55013.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6084251E12, 56292.0], [1.6084254E12, 59753.0], [1.60842504E12, 48574.0], [1.6084257E12, 54599.0], [1.60842534E12, 56106.0], [1.60842564E12, 52477.0], [1.60842498E12, 44075.0], [1.60842528E12, 54180.0], [1.60842558E12, 52143.0], [1.60842522E12, 55764.0], [1.60842552E12, 56357.0], [1.60842516E12, 56170.0], [1.60842576E12, 45932.0], [1.60842546E12, 57707.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842576E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 30717.0, "minX": 1.0, "maxY": 60939.0, "series": [{"data": [[8.0, 47541.0], [2.0, 54902.0], [11.0, 60939.0], [12.0, 38417.0], [3.0, 54087.0], [49.0, 55205.0], [13.0, 60765.0], [55.0, 60296.0], [15.0, 51466.0], [1.0, 53494.0], [4.0, 54180.0], [16.0, 58110.0], [17.0, 57613.5], [5.0, 46911.0], [6.0, 58003.0], [27.0, 43804.0], [7.0, 50639.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 48140.0], [32.0, 58537.0], [34.0, 48455.0], [35.0, 45760.0], [37.0, 41570.0], [36.0, 45870.0], [42.0, 45029.0], [44.0, 43848.0], [3.0, 47281.5], [49.0, 42740.0], [55.0, 52371.0], [58.0, 56973.0], [4.0, 47001.0], [67.0, 56094.0], [76.0, 50420.0], [5.0, 46232.0], [86.0, 30717.0], [6.0, 46868.0], [7.0, 45677.0], [123.0, 54746.0], [8.0, 45709.5], [9.0, 48880.0], [10.0, 44846.5], [11.0, 60388.0], [12.0, 37462.0], [13.0, 44682.0], [15.0, 56696.0], [16.0, 33907.0], [1.0, 53046.5], [17.0, 46389.0], [18.0, 56934.0], [20.0, 44876.0], [21.0, 43196.5], [22.0, 60407.0], [25.0, 46319.0], [26.0, 45679.5], [27.0, 33744.0], [28.0, 36821.0], [29.0, 60396.0], [30.0, 47972.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 123.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 30717.0, "minX": 1.0, "maxY": 60407.0, "series": [{"data": [[8.0, 42787.0], [2.0, 53417.0], [11.0, 59953.0], [12.0, 35977.0], [3.0, 53127.0], [49.0, 54353.0], [13.0, 57335.0], [55.0, 57932.0], [15.0, 50653.0], [1.0, 51908.5], [4.0, 53149.0], [16.0, 56264.0], [17.0, 55891.5], [5.0, 44852.0], [6.0, 54636.0], [27.0, 40809.5], [7.0, 46338.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 48140.0], [32.0, 58536.5], [34.0, 48454.5], [35.0, 45759.0], [37.0, 41570.0], [36.0, 45869.0], [42.0, 45029.0], [44.0, 43848.0], [3.0, 47281.5], [49.0, 42740.0], [55.0, 52371.0], [58.0, 56972.5], [4.0, 47000.0], [67.0, 56094.0], [76.0, 50419.5], [5.0, 46232.0], [86.0, 30717.0], [6.0, 46868.0], [7.0, 45677.0], [123.0, 54746.0], [8.0, 45709.5], [9.0, 48880.0], [10.0, 44846.0], [11.0, 60388.0], [12.0, 37462.0], [13.0, 44682.0], [15.0, 56695.0], [16.0, 33907.0], [1.0, 53046.0], [17.0, 46389.0], [18.0, 56934.0], [20.0, 44876.0], [21.0, 43196.0], [22.0, 60407.0], [25.0, 46319.0], [26.0, 45679.5], [27.0, 33744.0], [28.0, 36820.0], [29.0, 60396.0], [30.0, 47971.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 123.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60842498E12, "maxY": 6.1, "series": [{"data": [[1.6084251E12, 5.15], [1.6084254E12, 5.433333333333334], [1.60842504E12, 5.583333333333333], [1.6084257E12, 1.25], [1.60842534E12, 4.833333333333333], [1.60842564E12, 4.783333333333333], [1.60842498E12, 6.1], [1.60842528E12, 5.316666666666666], [1.60842558E12, 5.233333333333333], [1.60842522E12, 4.95], [1.60842552E12, 4.216666666666667], [1.60842516E12, 5.45], [1.60842576E12, 0.05], [1.60842546E12, 4.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842576E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60842498E12, "maxY": 4.25, "series": [{"data": [[1.6084251E12, 0.65], [1.6084254E12, 0.2], [1.60842504E12, 0.6166666666666667], [1.6084257E12, 0.23333333333333334], [1.60842534E12, 0.31666666666666665], [1.60842564E12, 0.15], [1.60842498E12, 0.65], [1.60842528E12, 0.016666666666666666], [1.60842558E12, 0.016666666666666666], [1.60842522E12, 0.3], [1.60842552E12, 0.2], [1.60842516E12, 0.35], [1.60842576E12, 0.2833333333333333], [1.60842546E12, 0.3333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6084251E12, 3.7333333333333334], [1.6084254E12, 4.0], [1.60842504E12, 4.25], [1.6084257E12, 3.0], [1.60842534E12, 3.5], [1.60842564E12, 3.9], [1.60842498E12, 1.2833333333333334], [1.60842528E12, 4.133333333333334], [1.60842558E12, 3.716666666666667], [1.60842522E12, 3.6166666666666667], [1.60842552E12, 2.5833333333333335], [1.60842516E12, 3.85], [1.60842546E12, 2.0166666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6084251E12, 0.7666666666666667], [1.6084254E12, 1.2333333333333334], [1.60842504E12, 0.7166666666666667], [1.6084257E12, 1.1166666666666667], [1.60842534E12, 1.0166666666666666], [1.60842564E12, 1.2833333333333334], [1.60842528E12, 1.1666666666666667], [1.60842558E12, 1.5166666666666666], [1.60842522E12, 1.0333333333333334], [1.60842552E12, 1.4333333333333333], [1.60842516E12, 1.25], [1.60842576E12, 0.26666666666666666], [1.60842546E12, 1.8]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842576E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60842498E12, "maxY": 5.3, "series": [{"data": [[1.6084251E12, 4.5], [1.6084254E12, 5.233333333333333], [1.60842504E12, 4.966666666666667], [1.6084257E12, 4.116666666666666], [1.60842534E12, 4.516666666666667], [1.60842564E12, 5.183333333333334], [1.60842498E12, 1.2833333333333334], [1.60842528E12, 5.3], [1.60842558E12, 5.233333333333333], [1.60842522E12, 4.65], [1.60842552E12, 4.016666666666667], [1.60842516E12, 5.1], [1.60842576E12, 0.26666666666666666], [1.60842546E12, 3.816666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.6084251E12, 0.65], [1.6084254E12, 0.2], [1.60842504E12, 0.6166666666666667], [1.6084257E12, 0.23333333333333334], [1.60842534E12, 0.31666666666666665], [1.60842564E12, 0.15], [1.60842498E12, 0.65], [1.60842528E12, 0.016666666666666666], [1.60842558E12, 0.016666666666666666], [1.60842522E12, 0.3], [1.60842552E12, 0.2], [1.60842516E12, 0.35], [1.60842576E12, 0.2833333333333333], [1.60842546E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842576E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60842498E12, "maxY": 5.3, "series": [{"data": [[1.6084251E12, 0.65], [1.6084254E12, 0.2], [1.60842504E12, 0.6166666666666667], [1.6084257E12, 0.23333333333333334], [1.60842534E12, 0.31666666666666665], [1.60842564E12, 0.15], [1.60842498E12, 0.65], [1.60842528E12, 0.016666666666666666], [1.60842558E12, 0.016666666666666666], [1.60842522E12, 0.3], [1.60842552E12, 0.2], [1.60842516E12, 0.35], [1.60842576E12, 0.2833333333333333], [1.60842546E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6084251E12, 4.5], [1.6084254E12, 5.233333333333333], [1.60842504E12, 4.966666666666667], [1.6084257E12, 4.116666666666666], [1.60842534E12, 4.516666666666667], [1.60842564E12, 5.183333333333334], [1.60842498E12, 1.2833333333333334], [1.60842528E12, 5.3], [1.60842558E12, 5.233333333333333], [1.60842522E12, 4.65], [1.60842552E12, 4.016666666666667], [1.60842516E12, 5.1], [1.60842576E12, 0.26666666666666666], [1.60842546E12, 3.816666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842576E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

