/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24560.0, "minX": 0.0, "maxY": 63414.0, "series": [{"data": [[0.0, 24560.0], [0.1, 28841.0], [0.2, 30168.0], [0.3, 30409.0], [0.4, 30628.0], [0.5, 31010.0], [0.6, 31109.0], [0.7, 31147.0], [0.8, 31278.0], [0.9, 31316.0], [1.0, 31464.0], [1.1, 31588.0], [1.2, 31646.0], [1.3, 31700.0], [1.4, 31795.0], [1.5, 31877.0], [1.6, 31958.0], [1.7, 32069.0], [1.8, 32169.0], [1.9, 32191.0], [2.0, 32231.0], [2.1, 32263.0], [2.2, 32416.0], [2.3, 32505.0], [2.4, 32597.0], [2.5, 32760.0], [2.6, 32871.0], [2.7, 32979.0], [2.8, 33027.0], [2.9, 33065.0], [3.0, 33136.0], [3.1, 33168.0], [3.2, 33211.0], [3.3, 33250.0], [3.4, 33288.0], [3.5, 33384.0], [3.6, 33455.0], [3.7, 33529.0], [3.8, 33591.0], [3.9, 33639.0], [4.0, 33672.0], [4.1, 33758.0], [4.2, 33851.0], [4.3, 33953.0], [4.4, 33961.0], [4.5, 34001.0], [4.6, 34086.0], [4.7, 34212.0], [4.8, 34252.0], [4.9, 34357.0], [5.0, 34384.0], [5.1, 34454.0], [5.2, 34511.0], [5.3, 34531.0], [5.4, 34608.0], [5.5, 34769.0], [5.6, 34798.0], [5.7, 34832.0], [5.8, 34848.0], [5.9, 34906.0], [6.0, 34982.0], [6.1, 34999.0], [6.2, 35079.0], [6.3, 35181.0], [6.4, 35241.0], [6.5, 35330.0], [6.6, 35379.0], [6.7, 35525.0], [6.8, 35659.0], [6.9, 35724.0], [7.0, 35742.0], [7.1, 35776.0], [7.2, 35841.0], [7.3, 35910.0], [7.4, 35970.0], [7.5, 36015.0], [7.6, 36053.0], [7.7, 36067.0], [7.8, 36091.0], [7.9, 36098.0], [8.0, 36124.0], [8.1, 36152.0], [8.2, 36208.0], [8.3, 36236.0], [8.4, 36368.0], [8.5, 36371.0], [8.6, 36435.0], [8.7, 36455.0], [8.8, 36481.0], [8.9, 36523.0], [9.0, 36548.0], [9.1, 36580.0], [9.2, 36588.0], [9.3, 36597.0], [9.4, 36641.0], [9.5, 36670.0], [9.6, 36681.0], [9.7, 36714.0], [9.8, 36752.0], [9.9, 36820.0], [10.0, 36852.0], [10.1, 36889.0], [10.2, 36946.0], [10.3, 37002.0], [10.4, 37042.0], [10.5, 37124.0], [10.6, 37219.0], [10.7, 37258.0], [10.8, 37305.0], [10.9, 37364.0], [11.0, 37436.0], [11.1, 37509.0], [11.2, 37542.0], [11.3, 37573.0], [11.4, 37639.0], [11.5, 37709.0], [11.6, 37754.0], [11.7, 37821.0], [11.8, 37880.0], [11.9, 37925.0], [12.0, 37928.0], [12.1, 37981.0], [12.2, 38017.0], [12.3, 38152.0], [12.4, 38198.0], [12.5, 38231.0], [12.6, 38263.0], [12.7, 38322.0], [12.8, 38333.0], [12.9, 38368.0], [13.0, 38506.0], [13.1, 38531.0], [13.2, 38554.0], [13.3, 38696.0], [13.4, 38739.0], [13.5, 38771.0], [13.6, 38790.0], [13.7, 38822.0], [13.8, 38831.0], [13.9, 38849.0], [14.0, 38861.0], [14.1, 38920.0], [14.2, 38970.0], [14.3, 39013.0], [14.4, 39117.0], [14.5, 39156.0], [14.6, 39170.0], [14.7, 39212.0], [14.8, 39234.0], [14.9, 39308.0], [15.0, 39343.0], [15.1, 39388.0], [15.2, 39405.0], [15.3, 39490.0], [15.4, 39589.0], [15.5, 39611.0], [15.6, 39648.0], [15.7, 39714.0], [15.8, 39750.0], [15.9, 39753.0], [16.0, 39761.0], [16.1, 39777.0], [16.2, 39796.0], [16.3, 39816.0], [16.4, 39856.0], [16.5, 39869.0], [16.6, 39886.0], [16.7, 39939.0], [16.8, 39945.0], [16.9, 39958.0], [17.0, 39978.0], [17.1, 39999.0], [17.2, 40014.0], [17.3, 40040.0], [17.4, 40083.0], [17.5, 40113.0], [17.6, 40150.0], [17.7, 40168.0], [17.8, 40179.0], [17.9, 40195.0], [18.0, 40216.0], [18.1, 40260.0], [18.2, 40285.0], [18.3, 40300.0], [18.4, 40320.0], [18.5, 40349.0], [18.6, 40370.0], [18.7, 40403.0], [18.8, 40413.0], [18.9, 40454.0], [19.0, 40469.0], [19.1, 40516.0], [19.2, 40538.0], [19.3, 40547.0], [19.4, 40564.0], [19.5, 40587.0], [19.6, 40624.0], [19.7, 40639.0], [19.8, 40643.0], [19.9, 40653.0], [20.0, 40688.0], [20.1, 40716.0], [20.2, 40731.0], [20.3, 40750.0], [20.4, 40771.0], [20.5, 40814.0], [20.6, 40855.0], [20.7, 40866.0], [20.8, 40891.0], [20.9, 40910.0], [21.0, 40960.0], [21.1, 41013.0], [21.2, 41023.0], [21.3, 41056.0], [21.4, 41083.0], [21.5, 41144.0], [21.6, 41164.0], [21.7, 41201.0], [21.8, 41211.0], [21.9, 41246.0], [22.0, 41279.0], [22.1, 41298.0], [22.2, 41319.0], [22.3, 41350.0], [22.4, 41374.0], [22.5, 41402.0], [22.6, 41417.0], [22.7, 41443.0], [22.8, 41450.0], [22.9, 41466.0], [23.0, 41479.0], [23.1, 41491.0], [23.2, 41501.0], [23.3, 41512.0], [23.4, 41524.0], [23.5, 41531.0], [23.6, 41540.0], [23.7, 41546.0], [23.8, 41553.0], [23.9, 41578.0], [24.0, 41596.0], [24.1, 41605.0], [24.2, 41611.0], [24.3, 41629.0], [24.4, 41635.0], [24.5, 41657.0], [24.6, 41673.0], [24.7, 41695.0], [24.8, 41712.0], [24.9, 41733.0], [25.0, 41762.0], [25.1, 41796.0], [25.2, 41799.0], [25.3, 41832.0], [25.4, 41864.0], [25.5, 41873.0], [25.6, 41889.0], [25.7, 41913.0], [25.8, 41943.0], [25.9, 41973.0], [26.0, 42017.0], [26.1, 42048.0], [26.2, 42094.0], [26.3, 42109.0], [26.4, 42112.0], [26.5, 42136.0], [26.6, 42173.0], [26.7, 42209.0], [26.8, 42220.0], [26.9, 42231.0], [27.0, 42255.0], [27.1, 42270.0], [27.2, 42286.0], [27.3, 42303.0], [27.4, 42315.0], [27.5, 42319.0], [27.6, 42329.0], [27.7, 42339.0], [27.8, 42348.0], [27.9, 42355.0], [28.0, 42366.0], [28.1, 42378.0], [28.2, 42400.0], [28.3, 42428.0], [28.4, 42434.0], [28.5, 42453.0], [28.6, 42498.0], [28.7, 42510.0], [28.8, 42528.0], [28.9, 42558.0], [29.0, 42575.0], [29.1, 42624.0], [29.2, 42669.0], [29.3, 42684.0], [29.4, 42692.0], [29.5, 42711.0], [29.6, 42724.0], [29.7, 42750.0], [29.8, 42790.0], [29.9, 42803.0], [30.0, 42815.0], [30.1, 42820.0], [30.2, 42861.0], [30.3, 42865.0], [30.4, 42871.0], [30.5, 42900.0], [30.6, 42936.0], [30.7, 42952.0], [30.8, 42971.0], [30.9, 42996.0], [31.0, 43013.0], [31.1, 43052.0], [31.2, 43069.0], [31.3, 43098.0], [31.4, 43137.0], [31.5, 43161.0], [31.6, 43174.0], [31.7, 43192.0], [31.8, 43219.0], [31.9, 43228.0], [32.0, 43261.0], [32.1, 43283.0], [32.2, 43310.0], [32.3, 43348.0], [32.4, 43377.0], [32.5, 43389.0], [32.6, 43398.0], [32.7, 43424.0], [32.8, 43459.0], [32.9, 43486.0], [33.0, 43531.0], [33.1, 43571.0], [33.2, 43576.0], [33.3, 43610.0], [33.4, 43626.0], [33.5, 43632.0], [33.6, 43656.0], [33.7, 43682.0], [33.8, 43706.0], [33.9, 43734.0], [34.0, 43746.0], [34.1, 43760.0], [34.2, 43793.0], [34.3, 43804.0], [34.4, 43811.0], [34.5, 43819.0], [34.6, 43827.0], [34.7, 43839.0], [34.8, 43842.0], [34.9, 43856.0], [35.0, 43865.0], [35.1, 43919.0], [35.2, 43928.0], [35.3, 43956.0], [35.4, 43989.0], [35.5, 44022.0], [35.6, 44039.0], [35.7, 44066.0], [35.8, 44099.0], [35.9, 44112.0], [36.0, 44129.0], [36.1, 44201.0], [36.2, 44219.0], [36.3, 44236.0], [36.4, 44259.0], [36.5, 44301.0], [36.6, 44331.0], [36.7, 44361.0], [36.8, 44384.0], [36.9, 44408.0], [37.0, 44438.0], [37.1, 44452.0], [37.2, 44469.0], [37.3, 44487.0], [37.4, 44507.0], [37.5, 44535.0], [37.6, 44553.0], [37.7, 44561.0], [37.8, 44587.0], [37.9, 44630.0], [38.0, 44649.0], [38.1, 44683.0], [38.2, 44696.0], [38.3, 44713.0], [38.4, 44744.0], [38.5, 44765.0], [38.6, 44784.0], [38.7, 44791.0], [38.8, 44816.0], [38.9, 44829.0], [39.0, 44838.0], [39.1, 44849.0], [39.2, 44860.0], [39.3, 44867.0], [39.4, 44874.0], [39.5, 44889.0], [39.6, 44893.0], [39.7, 44898.0], [39.8, 44911.0], [39.9, 44920.0], [40.0, 44934.0], [40.1, 44948.0], [40.2, 44979.0], [40.3, 44985.0], [40.4, 45018.0], [40.5, 45031.0], [40.6, 45050.0], [40.7, 45063.0], [40.8, 45065.0], [40.9, 45076.0], [41.0, 45103.0], [41.1, 45118.0], [41.2, 45135.0], [41.3, 45153.0], [41.4, 45164.0], [41.5, 45188.0], [41.6, 45198.0], [41.7, 45222.0], [41.8, 45248.0], [41.9, 45259.0], [42.0, 45280.0], [42.1, 45303.0], [42.2, 45331.0], [42.3, 45348.0], [42.4, 45371.0], [42.5, 45382.0], [42.6, 45403.0], [42.7, 45423.0], [42.8, 45432.0], [42.9, 45437.0], [43.0, 45456.0], [43.1, 45491.0], [43.2, 45515.0], [43.3, 45540.0], [43.4, 45549.0], [43.5, 45577.0], [43.6, 45591.0], [43.7, 45595.0], [43.8, 45609.0], [43.9, 45615.0], [44.0, 45619.0], [44.1, 45623.0], [44.2, 45634.0], [44.3, 45645.0], [44.4, 45661.0], [44.5, 45674.0], [44.6, 45692.0], [44.7, 45699.0], [44.8, 45718.0], [44.9, 45725.0], [45.0, 45746.0], [45.1, 45778.0], [45.2, 45810.0], [45.3, 45836.0], [45.4, 45857.0], [45.5, 45876.0], [45.6, 45895.0], [45.7, 45917.0], [45.8, 45930.0], [45.9, 45955.0], [46.0, 46009.0], [46.1, 46013.0], [46.2, 46065.0], [46.3, 46087.0], [46.4, 46104.0], [46.5, 46122.0], [46.6, 46146.0], [46.7, 46174.0], [46.8, 46189.0], [46.9, 46205.0], [47.0, 46225.0], [47.1, 46252.0], [47.2, 46276.0], [47.3, 46283.0], [47.4, 46290.0], [47.5, 46301.0], [47.6, 46327.0], [47.7, 46345.0], [47.8, 46359.0], [47.9, 46363.0], [48.0, 46377.0], [48.1, 46384.0], [48.2, 46391.0], [48.3, 46404.0], [48.4, 46420.0], [48.5, 46424.0], [48.6, 46436.0], [48.7, 46463.0], [48.8, 46476.0], [48.9, 46482.0], [49.0, 46496.0], [49.1, 46502.0], [49.2, 46507.0], [49.3, 46514.0], [49.4, 46533.0], [49.5, 46553.0], [49.6, 46572.0], [49.7, 46577.0], [49.8, 46586.0], [49.9, 46598.0], [50.0, 46624.0], [50.1, 46630.0], [50.2, 46636.0], [50.3, 46652.0], [50.4, 46660.0], [50.5, 46666.0], [50.6, 46677.0], [50.7, 46689.0], [50.8, 46707.0], [50.9, 46713.0], [51.0, 46735.0], [51.1, 46755.0], [51.2, 46788.0], [51.3, 46807.0], [51.4, 46822.0], [51.5, 46849.0], [51.6, 46869.0], [51.7, 46875.0], [51.8, 46896.0], [51.9, 46907.0], [52.0, 47005.0], [52.1, 47044.0], [52.2, 47051.0], [52.3, 47087.0], [52.4, 47113.0], [52.5, 47123.0], [52.6, 47137.0], [52.7, 47163.0], [52.8, 47182.0], [52.9, 47186.0], [53.0, 47224.0], [53.1, 47259.0], [53.2, 47292.0], [53.3, 47329.0], [53.4, 47392.0], [53.5, 47435.0], [53.6, 47466.0], [53.7, 47481.0], [53.8, 47512.0], [53.9, 47527.0], [54.0, 47553.0], [54.1, 47566.0], [54.2, 47585.0], [54.3, 47600.0], [54.4, 47605.0], [54.5, 47611.0], [54.6, 47630.0], [54.7, 47663.0], [54.8, 47674.0], [54.9, 47680.0], [55.0, 47701.0], [55.1, 47724.0], [55.2, 47743.0], [55.3, 47785.0], [55.4, 47798.0], [55.5, 47815.0], [55.6, 47832.0], [55.7, 47838.0], [55.8, 47846.0], [55.9, 47868.0], [56.0, 47880.0], [56.1, 47898.0], [56.2, 47905.0], [56.3, 47938.0], [56.4, 47946.0], [56.5, 47963.0], [56.6, 47978.0], [56.7, 47987.0], [56.8, 48026.0], [56.9, 48054.0], [57.0, 48085.0], [57.1, 48108.0], [57.2, 48119.0], [57.3, 48128.0], [57.4, 48162.0], [57.5, 48178.0], [57.6, 48185.0], [57.7, 48202.0], [57.8, 48219.0], [57.9, 48238.0], [58.0, 48248.0], [58.1, 48261.0], [58.2, 48279.0], [58.3, 48284.0], [58.4, 48305.0], [58.5, 48318.0], [58.6, 48346.0], [58.7, 48379.0], [58.8, 48417.0], [58.9, 48427.0], [59.0, 48438.0], [59.1, 48462.0], [59.2, 48490.0], [59.3, 48517.0], [59.4, 48555.0], [59.5, 48570.0], [59.6, 48574.0], [59.7, 48589.0], [59.8, 48607.0], [59.9, 48637.0], [60.0, 48667.0], [60.1, 48687.0], [60.2, 48703.0], [60.3, 48713.0], [60.4, 48758.0], [60.5, 48776.0], [60.6, 48795.0], [60.7, 48832.0], [60.8, 48877.0], [60.9, 48901.0], [61.0, 48951.0], [61.1, 48960.0], [61.2, 49031.0], [61.3, 49037.0], [61.4, 49073.0], [61.5, 49098.0], [61.6, 49141.0], [61.7, 49175.0], [61.8, 49189.0], [61.9, 49225.0], [62.0, 49279.0], [62.1, 49313.0], [62.2, 49398.0], [62.3, 49451.0], [62.4, 49498.0], [62.5, 49541.0], [62.6, 49715.0], [62.7, 49781.0], [62.8, 49858.0], [62.9, 49877.0], [63.0, 50006.0], [63.1, 50064.0], [63.2, 50134.0], [63.3, 50205.0], [63.4, 50237.0], [63.5, 50247.0], [63.6, 50298.0], [63.7, 50355.0], [63.8, 50411.0], [63.9, 50467.0], [64.0, 50482.0], [64.1, 50494.0], [64.2, 50566.0], [64.3, 50702.0], [64.4, 50768.0], [64.5, 50811.0], [64.6, 50881.0], [64.7, 50939.0], [64.8, 50983.0], [64.9, 50995.0], [65.0, 51024.0], [65.1, 51115.0], [65.2, 51200.0], [65.3, 51241.0], [65.4, 51313.0], [65.5, 51356.0], [65.6, 51385.0], [65.7, 51421.0], [65.8, 51463.0], [65.9, 51488.0], [66.0, 51537.0], [66.1, 51571.0], [66.2, 51607.0], [66.3, 51672.0], [66.4, 51751.0], [66.5, 51805.0], [66.6, 51845.0], [66.7, 51897.0], [66.8, 51946.0], [66.9, 52033.0], [67.0, 52127.0], [67.1, 52196.0], [67.2, 52238.0], [67.3, 52260.0], [67.4, 52284.0], [67.5, 52305.0], [67.6, 52322.0], [67.7, 52408.0], [67.8, 52465.0], [67.9, 52504.0], [68.0, 52573.0], [68.1, 52602.0], [68.2, 52641.0], [68.3, 52686.0], [68.4, 52772.0], [68.5, 52801.0], [68.6, 52843.0], [68.7, 52930.0], [68.8, 53091.0], [68.9, 53140.0], [69.0, 53180.0], [69.1, 53233.0], [69.2, 53253.0], [69.3, 53284.0], [69.4, 53309.0], [69.5, 53318.0], [69.6, 53393.0], [69.7, 53443.0], [69.8, 53484.0], [69.9, 53530.0], [70.0, 53581.0], [70.1, 53645.0], [70.2, 53683.0], [70.3, 53718.0], [70.4, 53776.0], [70.5, 53812.0], [70.6, 53845.0], [70.7, 53880.0], [70.8, 53924.0], [70.9, 53934.0], [71.0, 53961.0], [71.1, 53982.0], [71.2, 54015.0], [71.3, 54027.0], [71.4, 54058.0], [71.5, 54221.0], [71.6, 54264.0], [71.7, 54301.0], [71.8, 54392.0], [71.9, 54446.0], [72.0, 54508.0], [72.1, 54541.0], [72.2, 54577.0], [72.3, 54591.0], [72.4, 54673.0], [72.5, 54691.0], [72.6, 54773.0], [72.7, 54856.0], [72.8, 55006.0], [72.9, 55117.0], [73.0, 55154.0], [73.1, 55221.0], [73.2, 55296.0], [73.3, 55429.0], [73.4, 55601.0], [73.5, 55638.0], [73.6, 55804.0], [73.7, 55943.0], [73.8, 56050.0], [73.9, 56098.0], [74.0, 56220.0], [74.1, 56438.0], [74.2, 56510.0], [74.3, 56562.0], [74.4, 56603.0], [74.5, 56816.0], [74.6, 57032.0], [74.7, 57253.0], [74.8, 57390.0], [74.9, 57447.0], [75.0, 57530.0], [75.1, 57625.0], [75.2, 57823.0], [75.3, 57925.0], [75.4, 58083.0], [75.5, 58412.0], [75.6, 58702.0], [75.7, 58901.0], [75.8, 59000.0], [75.9, 59141.0], [76.0, 59573.0], [76.1, 59909.0], [76.2, 60131.0], [76.3, 60133.0], [76.4, 60136.0], [76.5, 60138.0], [76.6, 60141.0], [76.7, 60141.0], [76.8, 60142.0], [76.9, 60143.0], [77.0, 60149.0], [77.1, 60151.0], [77.2, 60155.0], [77.3, 60164.0], [77.4, 60292.0], [77.5, 60351.0], [77.6, 60352.0], [77.7, 60354.0], [77.8, 60356.0], [77.9, 60359.0], [78.0, 60360.0], [78.1, 60361.0], [78.2, 60361.0], [78.3, 60362.0], [78.4, 60362.0], [78.5, 60362.0], [78.6, 60362.0], [78.7, 60362.0], [78.8, 60363.0], [78.9, 60363.0], [79.0, 60363.0], [79.1, 60364.0], [79.2, 60364.0], [79.3, 60364.0], [79.4, 60364.0], [79.5, 60364.0], [79.6, 60364.0], [79.7, 60365.0], [79.8, 60365.0], [79.9, 60365.0], [80.0, 60365.0], [80.1, 60365.0], [80.2, 60365.0], [80.3, 60365.0], [80.4, 60366.0], [80.5, 60366.0], [80.6, 60366.0], [80.7, 60366.0], [80.8, 60366.0], [80.9, 60366.0], [81.0, 60367.0], [81.1, 60367.0], [81.2, 60367.0], [81.3, 60367.0], [81.4, 60367.0], [81.5, 60367.0], [81.6, 60367.0], [81.7, 60367.0], [81.8, 60367.0], [81.9, 60368.0], [82.0, 60368.0], [82.1, 60368.0], [82.2, 60368.0], [82.3, 60368.0], [82.4, 60369.0], [82.5, 60369.0], [82.6, 60369.0], [82.7, 60369.0], [82.8, 60369.0], [82.9, 60370.0], [83.0, 60370.0], [83.1, 60370.0], [83.2, 60370.0], [83.3, 60371.0], [83.4, 60371.0], [83.5, 60372.0], [83.6, 60372.0], [83.7, 60373.0], [83.8, 60373.0], [83.9, 60374.0], [84.0, 60374.0], [84.1, 60374.0], [84.2, 60375.0], [84.3, 60376.0], [84.4, 60376.0], [84.5, 60377.0], [84.6, 60378.0], [84.7, 60379.0], [84.8, 60380.0], [84.9, 60380.0], [85.0, 60382.0], [85.1, 60385.0], [85.2, 60386.0], [85.3, 60387.0], [85.4, 60389.0], [85.5, 60390.0], [85.6, 60390.0], [85.7, 60391.0], [85.8, 60392.0], [85.9, 60392.0], [86.0, 60393.0], [86.1, 60393.0], [86.2, 60393.0], [86.3, 60394.0], [86.4, 60394.0], [86.5, 60394.0], [86.6, 60394.0], [86.7, 60394.0], [86.8, 60394.0], [86.9, 60394.0], [87.0, 60395.0], [87.1, 60395.0], [87.2, 60395.0], [87.3, 60395.0], [87.4, 60395.0], [87.5, 60395.0], [87.6, 60395.0], [87.7, 60395.0], [87.8, 60396.0], [87.9, 60396.0], [88.0, 60396.0], [88.1, 60396.0], [88.2, 60396.0], [88.3, 60396.0], [88.4, 60397.0], [88.5, 60397.0], [88.6, 60397.0], [88.7, 60397.0], [88.8, 60397.0], [88.9, 60397.0], [89.0, 60397.0], [89.1, 60397.0], [89.2, 60398.0], [89.3, 60398.0], [89.4, 60398.0], [89.5, 60398.0], [89.6, 60398.0], [89.7, 60398.0], [89.8, 60398.0], [89.9, 60399.0], [90.0, 60399.0], [90.1, 60399.0], [90.2, 60399.0], [90.3, 60399.0], [90.4, 60399.0], [90.5, 60399.0], [90.6, 60399.0], [90.7, 60400.0], [90.8, 60400.0], [90.9, 60400.0], [91.0, 60400.0], [91.1, 60400.0], [91.2, 60400.0], [91.3, 60400.0], [91.4, 60401.0], [91.5, 60401.0], [91.6, 60401.0], [91.7, 60401.0], [91.8, 60401.0], [91.9, 60402.0], [92.0, 60402.0], [92.1, 60402.0], [92.2, 60402.0], [92.3, 60403.0], [92.4, 60403.0], [92.5, 60403.0], [92.6, 60403.0], [92.7, 60404.0], [92.8, 60404.0], [92.9, 60404.0], [93.0, 60405.0], [93.1, 60405.0], [93.2, 60405.0], [93.3, 60406.0], [93.4, 60406.0], [93.5, 60407.0], [93.6, 60407.0], [93.7, 60408.0], [93.8, 60408.0], [93.9, 60409.0], [94.0, 60410.0], [94.1, 60410.0], [94.2, 60410.0], [94.3, 60412.0], [94.4, 60412.0], [94.5, 60413.0], [94.6, 60416.0], [94.7, 60420.0], [94.8, 60421.0], [94.9, 60421.0], [95.0, 60422.0], [95.1, 60423.0], [95.2, 60425.0], [95.3, 60426.0], [95.4, 60426.0], [95.5, 60426.0], [95.6, 60427.0], [95.7, 60427.0], [95.8, 60428.0], [95.9, 60428.0], [96.0, 60429.0], [96.1, 60429.0], [96.2, 60429.0], [96.3, 60430.0], [96.4, 60430.0], [96.5, 60430.0], [96.6, 60431.0], [96.7, 60431.0], [96.8, 60432.0], [96.9, 60432.0], [97.0, 60433.0], [97.1, 60433.0], [97.2, 60433.0], [97.3, 60434.0], [97.4, 60435.0], [97.5, 60435.0], [97.6, 60436.0], [97.7, 60437.0], [97.8, 60438.0], [97.9, 60440.0], [98.0, 60444.0], [98.1, 60445.0], [98.2, 60448.0], [98.3, 60457.0], [98.4, 60465.0], [98.5, 60490.0], [98.6, 60543.0], [98.7, 60576.0], [98.8, 60583.0], [98.9, 60597.0], [99.0, 60747.0], [99.1, 60888.0], [99.2, 61265.0], [99.3, 61629.0], [99.4, 61866.0], [99.5, 62260.0], [99.6, 62536.0], [99.7, 62701.0], [99.8, 62746.0], [99.9, 63213.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 24500.0, "maxY": 495.0, "series": [{"data": [[34100.0, 3.0], [34500.0, 8.0], [33300.0, 4.0], [32900.0, 3.0], [33700.0, 5.0], [36500.0, 18.0], [35700.0, 11.0], [36100.0, 10.0], [34900.0, 8.0], [35300.0, 7.0], [36900.0, 6.0], [37300.0, 6.0], [37700.0, 6.0], [38900.0, 9.0], [38100.0, 5.0], [38500.0, 10.0], [40100.0, 19.0], [40500.0, 17.0], [40900.0, 10.0], [39300.0, 11.0], [39700.0, 21.0], [41300.0, 14.0], [42500.0, 16.0], [42900.0, 17.0], [41700.0, 17.0], [42100.0, 17.0], [44900.0, 26.0], [43700.0, 19.0], [44500.0, 17.0], [43300.0, 19.0], [44100.0, 10.0], [45700.0, 18.0], [46500.0, 31.0], [46100.0, 19.0], [46900.0, 6.0], [45300.0, 18.0], [48500.0, 18.0], [47300.0, 8.0], [48900.0, 10.0], [48100.0, 21.0], [47700.0, 17.0], [49300.0, 7.0], [50100.0, 6.0], [50900.0, 10.0], [50500.0, 3.0], [49700.0, 7.0], [51700.0, 6.0], [52900.0, 4.0], [52500.0, 8.0], [52100.0, 6.0], [51300.0, 11.0], [53300.0, 9.0], [54500.0, 12.0], [54100.0, 2.0], [54900.0, 2.0], [53700.0, 8.0], [55300.0, 2.0], [57300.0, 4.0], [56500.0, 8.0], [55700.0, 2.0], [56100.0, 2.0], [56900.0, 1.0], [57700.0, 2.0], [58900.0, 4.0], [60500.0, 14.0], [61300.0, 1.0], [59700.0, 2.0], [60100.0, 46.0], [62100.0, 1.0], [62500.0, 2.0], [26600.0, 1.0], [26800.0, 1.0], [29000.0, 1.0], [28800.0, 1.0], [30600.0, 2.0], [30400.0, 2.0], [30000.0, 1.0], [31600.0, 6.0], [31400.0, 2.0], [31200.0, 6.0], [31000.0, 4.0], [31800.0, 4.0], [32400.0, 5.0], [32000.0, 3.0], [32600.0, 1.0], [32200.0, 6.0], [33200.0, 9.0], [33600.0, 8.0], [34000.0, 5.0], [32800.0, 5.0], [34400.0, 5.0], [34800.0, 10.0], [36000.0, 19.0], [36400.0, 11.0], [35200.0, 4.0], [35600.0, 3.0], [36800.0, 9.0], [37200.0, 9.0], [37600.0, 5.0], [38000.0, 4.0], [38800.0, 16.0], [38400.0, 1.0], [40400.0, 18.0], [40800.0, 14.0], [39600.0, 9.0], [39200.0, 7.0], [40000.0, 12.0], [41600.0, 27.0], [42000.0, 11.0], [42400.0, 17.0], [42800.0, 24.0], [41200.0, 16.0], [44400.0, 19.0], [44800.0, 37.0], [44000.0, 14.0], [43200.0, 15.0], [43600.0, 19.0], [46000.0, 15.0], [46800.0, 23.0], [45600.0, 37.0], [46400.0, 30.0], [45200.0, 17.0], [48800.0, 10.0], [48400.0, 18.0], [47600.0, 26.0], [48000.0, 14.0], [47200.0, 10.0], [50400.0, 14.0], [50800.0, 8.0], [49600.0, 2.0], [49200.0, 7.0], [50000.0, 5.0], [53200.0, 12.0], [52800.0, 7.0], [52400.0, 7.0], [51200.0, 6.0], [51600.0, 6.0], [52000.0, 5.0], [54000.0, 11.0], [55200.0, 7.0], [53600.0, 8.0], [54400.0, 6.0], [54800.0, 3.0], [56000.0, 6.0], [55600.0, 6.0], [56800.0, 2.0], [57200.0, 2.0], [56400.0, 3.0], [57600.0, 2.0], [58400.0, 4.0], [58800.0, 2.0], [58000.0, 3.0], [59200.0, 2.0], [61200.0, 2.0], [60400.0, 297.0], [60800.0, 4.0], [60000.0, 1.0], [63200.0, 3.0], [61600.0, 3.0], [62000.0, 1.0], [62800.0, 1.0], [34700.0, 7.0], [33100.0, 9.0], [34300.0, 9.0], [33900.0, 7.0], [33500.0, 7.0], [35500.0, 3.0], [35900.0, 6.0], [36300.0, 8.0], [36700.0, 10.0], [35100.0, 5.0], [37100.0, 5.0], [37900.0, 12.0], [37500.0, 11.0], [38300.0, 11.0], [38700.0, 12.0], [39100.0, 12.0], [40300.0, 12.0], [39900.0, 19.0], [40700.0, 14.0], [39500.0, 5.0], [42700.0, 15.0], [41500.0, 32.0], [42300.0, 34.0], [41100.0, 10.0], [41900.0, 10.0], [43900.0, 13.0], [43100.0, 16.0], [44700.0, 19.0], [43500.0, 13.0], [44300.0, 15.0], [47100.0, 22.0], [46300.0, 30.0], [46700.0, 18.0], [45900.0, 12.0], [45500.0, 21.0], [45100.0, 24.0], [47900.0, 22.0], [48700.0, 17.0], [49100.0, 12.0], [48300.0, 13.0], [47500.0, 20.0], [50700.0, 5.0], [49500.0, 4.0], [50300.0, 5.0], [51100.0, 4.0], [49900.0, 3.0], [51500.0, 9.0], [52300.0, 7.0], [51900.0, 4.0], [53100.0, 9.0], [52700.0, 4.0], [54700.0, 4.0], [54300.0, 6.0], [53500.0, 7.0], [53900.0, 14.0], [55100.0, 7.0], [57100.0, 2.0], [55900.0, 4.0], [56700.0, 1.0], [56300.0, 2.0], [55500.0, 3.0], [58700.0, 1.0], [58300.0, 2.0], [57500.0, 3.0], [57900.0, 2.0], [59100.0, 3.0], [61100.0, 2.0], [60700.0, 2.0], [60300.0, 495.0], [59900.0, 1.0], [59500.0, 1.0], [62700.0, 5.0], [62300.0, 2.0], [61900.0, 1.0], [63100.0, 1.0], [24500.0, 1.0], [30100.0, 2.0], [30700.0, 1.0], [30500.0, 2.0], [30300.0, 3.0], [31500.0, 3.0], [31300.0, 4.0], [31700.0, 5.0], [31100.0, 5.0], [32700.0, 3.0], [32100.0, 9.0], [32500.0, 6.0], [31900.0, 4.0], [32300.0, 1.0], [34200.0, 4.0], [33800.0, 4.0], [33400.0, 5.0], [33000.0, 7.0], [34600.0, 2.0], [36600.0, 12.0], [35000.0, 4.0], [35400.0, 2.0], [36200.0, 5.0], [35800.0, 4.0], [37800.0, 7.0], [37400.0, 5.0], [37000.0, 4.0], [38200.0, 10.0], [38600.0, 2.0], [39400.0, 5.0], [40600.0, 19.0], [40200.0, 13.0], [39800.0, 14.0], [39000.0, 3.0], [41800.0, 17.0], [41400.0, 26.0], [42200.0, 22.0], [42600.0, 15.0], [41000.0, 13.0], [43000.0, 14.0], [43400.0, 10.0], [45000.0, 22.0], [44600.0, 14.0], [43800.0, 31.0], [44200.0, 15.0], [46200.0, 23.0], [47000.0, 14.0], [45800.0, 17.0], [46600.0, 31.0], [45400.0, 23.0], [47800.0, 26.0], [48600.0, 17.0], [47400.0, 12.0], [48200.0, 28.0], [49000.0, 14.0], [49400.0, 8.0], [50200.0, 13.0], [49800.0, 5.0], [50600.0, 3.0], [51000.0, 7.0], [52200.0, 14.0], [52600.0, 11.0], [51800.0, 9.0], [51400.0, 10.0], [53000.0, 2.0], [53800.0, 12.0], [53400.0, 8.0], [55000.0, 2.0], [54600.0, 9.0], [54200.0, 7.0], [57000.0, 2.0], [55800.0, 2.0], [56600.0, 3.0], [55400.0, 1.0], [56200.0, 2.0], [58200.0, 1.0], [59000.0, 2.0], [57800.0, 4.0], [57400.0, 6.0], [60600.0, 2.0], [60200.0, 2.0], [59400.0, 1.0], [63400.0, 1.0], [62600.0, 2.0], [61800.0, 3.0], [62200.0, 1.0], [63000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 63400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 184.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3566.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 184.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3566.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.03225806451613, "minX": 1.6084296E12, "maxY": 250.0, "series": [{"data": [[1.60842984E12, 250.0], [1.6084302E12, 250.0], [1.6084299E12, 250.0], [1.60843008E12, 250.0], [1.60842978E12, 250.0], [1.60843014E12, 250.0], [1.60843032E12, 135.2958801498126], [1.60843002E12, 250.0], [1.60842972E12, 250.0], [1.60843038E12, 16.03225806451613], [1.6084296E12, 250.0], [1.60843026E12, 238.8428093645484], [1.60842996E12, 250.0], [1.60842966E12, 250.0]], "isOverall": false, "label": "SEOC_Active_Thread_Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60843038E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30088.0, "minX": 1.0, "maxY": 60444.0, "series": [{"data": [[2.0, 50856.0], [3.0, 47292.0], [4.0, 58074.0], [5.0, 56129.0], [6.0, 50983.0], [7.0, 54780.0], [8.0, 53880.0], [9.0, 54509.0], [10.0, 53709.0], [11.0, 53545.0], [12.0, 60400.0], [13.0, 60385.0], [14.0, 60351.0], [15.0, 60371.0], [16.0, 60391.0], [17.0, 60395.0], [18.0, 60399.0], [19.0, 60388.0], [20.0, 60401.0], [22.0, 60365.5], [23.0, 60391.0], [24.0, 60366.0], [25.0, 60368.0], [26.0, 31464.0], [27.0, 30409.0], [28.0, 47601.0], [29.0, 60354.0], [30.0, 60363.0], [31.0, 30673.0], [33.0, 30088.0], [32.0, 60359.0], [35.0, 60395.0], [34.0, 30363.0], [37.0, 30348.0], [36.0, 60365.0], [39.0, 60407.0], [38.0, 60399.0], [41.0, 30578.0], [40.0, 60399.0], [43.0, 60351.0], [42.0, 60394.0], [45.0, 60426.0], [44.0, 30314.0], [47.0, 60392.0], [46.0, 30562.0], [49.0, 60366.0], [48.0, 60399.0], [51.0, 60394.0], [50.0, 60361.0], [53.0, 60367.0], [52.0, 30434.0], [55.0, 60384.0], [54.0, 60400.0], [57.0, 60374.0], [56.0, 31629.0], [59.0, 56109.0], [58.0, 31538.0], [61.0, 30628.0], [60.0, 50759.0], [63.0, 60400.0], [62.0, 60394.0], [67.0, 32170.0], [66.0, 31660.0], [65.0, 31010.0], [64.0, 31025.0], [71.0, 31355.0], [70.0, 31333.0], [69.0, 31094.0], [68.0, 60402.5], [75.0, 40977.666666666664], [74.0, 31281.0], [73.0, 31278.0], [72.0, 60369.0], [79.0, 60396.0], [78.0, 31143.0], [77.0, 45762.5], [76.0, 31147.0], [83.0, 31795.0], [82.0, 31502.0], [81.0, 60359.0], [80.0, 31111.0], [87.0, 60394.5], [86.0, 60444.0], [85.0, 32211.0], [84.0, 32174.0], [91.0, 32411.0], [90.0, 34723.333333333336], [89.0, 32069.0], [88.0, 60420.0], [95.0, 32990.0], [94.0, 32714.0], [93.0, 32903.5], [92.0, 32505.0], [99.0, 34337.0], [98.0, 34329.0], [97.0, 33677.0], [96.0, 34055.0], [103.0, 35238.0], [102.0, 35342.0], [101.0, 35241.0], [100.0, 35132.0], [107.0, 35569.0], [106.0, 60380.0], [105.0, 35659.0], [104.0, 35680.0], [111.0, 35728.0], [110.0, 35728.0], [109.0, 35380.0], [108.0, 60385.0], [115.0, 40690.0], [114.0, 38670.0], [113.0, 38004.0], [112.0, 36670.0], [119.0, 60405.0], [118.0, 40731.0], [117.0, 60381.0], [116.0, 40604.0], [123.0, 53641.0], [122.0, 60141.0], [121.0, 39333.0], [120.0, 40150.0], [127.0, 38966.0], [126.0, 54289.0], [125.0, 38808.0], [124.0, 39234.0], [135.0, 44212.75], [134.0, 41683.0], [133.0, 53318.0], [132.0, 42867.0], [131.0, 42953.0], [130.0, 42522.0], [129.0, 42293.5], [128.0, 60396.0], [143.0, 42198.0], [142.0, 58436.0], [141.0, 42643.0], [140.0, 43763.5], [139.0, 51990.5], [138.0, 43978.0], [137.0, 42802.0], [136.0, 41287.0], [151.0, 41205.0], [150.0, 41635.0], [149.0, 41213.0], [148.0, 41182.0], [147.0, 42259.0], [146.0, 41440.0], [145.0, 41159.0], [144.0, 59487.0], [159.0, 60393.0], [158.0, 60364.0], [157.0, 41497.0], [156.0, 43538.0], [155.0, 60394.0], [154.0, 50775.75], [153.0, 40577.0], [152.0, 41144.0], [167.0, 46495.0], [166.0, 54187.333333333336], [165.0, 60362.0], [164.0, 60364.0], [163.0, 42284.5], [162.0, 42308.0], [161.0, 42608.0], [160.0, 42215.0], [175.0, 44741.0], [174.0, 52498.0], [173.0, 44665.0], [172.0, 43025.0], [171.0, 41767.375], [170.0, 42350.0], [169.0, 41499.0], [168.0, 60368.0], [183.0, 45621.0], [182.0, 60394.0], [181.0, 45155.0], [180.0, 45112.0], [179.0, 44992.333333333336], [178.0, 52804.5], [177.0, 55253.666666666664], [176.0, 44874.0], [191.0, 54291.5], [190.0, 51917.666666666664], [189.0, 60141.0], [188.0, 53030.5], [187.0, 45268.0], [186.0, 45457.0], [185.0, 45618.0], [184.0, 45621.5], [199.0, 54131.666666666664], [198.0, 51402.857142857145], [197.0, 51991.42857142857], [196.0, 54309.0], [195.0, 48488.0], [194.0, 48280.0], [193.0, 48241.0], [192.0, 54242.5], [207.0, 48224.0], [206.0, 47983.0], [205.0, 47944.0], [204.0, 47680.0], [203.0, 46869.0], [202.0, 54840.6], [201.0, 45821.0], [200.0, 51687.333333333336], [215.0, 60398.0], [214.0, 60433.0], [213.0, 44015.0], [212.0, 52830.5], [211.0, 45709.5], [210.0, 53193.25], [209.0, 56277.0], [208.0, 50994.25], [223.0, 41656.0], [222.0, 42510.0], [221.0, 48411.666666666664], [220.0, 43706.0], [219.0, 43835.0], [218.0, 46845.33333333333], [217.0, 60403.0], [216.0, 44164.2], [231.0, 56643.07692307692], [230.0, 48087.5], [229.0, 54164.666666666664], [228.0, 55908.25], [227.0, 41313.0], [226.0, 39682.75], [225.0, 47401.608695652176], [224.0, 41435.0], [239.0, 50627.600000000006], [238.0, 48141.25], [237.0, 46902.99999999999], [236.0, 47440.99999999999], [235.0, 45731.0], [234.0, 45509.666666666664], [233.0, 45423.0], [232.0, 45307.0], [247.0, 45245.625], [246.0, 48043.357142857145], [245.0, 45912.272727272735], [244.0, 48055.2], [243.0, 47998.666666666664], [242.0, 45685.5], [241.0, 53812.25], [240.0, 50951.47058823529], [250.0, 48271.339504236], [249.0, 49695.88], [248.0, 44753.454545454544], [1.0, 57968.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[239.00933333333333, 48197.088800000005]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 83.7, "minX": 1.6084296E12, "maxY": 3053537.7666666666, "series": [{"data": [[1.60842984E12, 875523.5], [1.6084302E12, 377817.43333333335], [1.6084299E12, 1062105.7], [1.60843008E12, 315243.23333333334], [1.60842978E12, 501944.13333333336], [1.60843014E12, 315312.0333333333], [1.60843032E12, 750459.9166666666], [1.60843002E12, 253341.01666666666], [1.60842972E12, 627091.5166666667], [1.60843038E12, 747159.4666666667], [1.6084296E12, 809937.85], [1.60843026E12, 937570.7333333333], [1.60842996E12, 874963.65], [1.60842966E12, 3053537.7666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60842984E12, 842.4], [1.6084302E12, 864.0], [1.6084299E12, 823.5], [1.60843008E12, 799.2], [1.60842978E12, 804.6], [1.60843014E12, 807.3], [1.60843032E12, 720.9], [1.60843002E12, 858.6], [1.60842972E12, 931.5], [1.60843038E12, 83.7], [1.6084296E12, 194.4], [1.60843026E12, 807.3], [1.60842996E12, 723.6], [1.60842966E12, 864.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60843038E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 32516.76388888889, "minX": 1.6084296E12, "maxY": 54771.80645161291, "series": [{"data": [[1.60842984E12, 48811.60256410255], [1.6084302E12, 49392.59999999999], [1.6084299E12, 49047.03934426229], [1.60843008E12, 48719.44932432433], [1.60842978E12, 47557.64093959733], [1.60843014E12, 50580.68561872907], [1.60843032E12, 46732.67415730342], [1.60843002E12, 49336.85849056605], [1.60842972E12, 46464.95362318841], [1.60843038E12, 54771.80645161291], [1.6084296E12, 32516.76388888889], [1.60843026E12, 48771.575250836104], [1.60842996E12, 52646.85447761195], [1.60842966E12, 44061.8125]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60843038E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 32321.638888888883, "minX": 1.6084296E12, "maxY": 54145.96774193547, "series": [{"data": [[1.60842984E12, 48760.56730769233], [1.6084302E12, 49377.95625000001], [1.6084299E12, 48988.242622950835], [1.60843008E12, 48699.29729729729], [1.60842978E12, 47525.442953020145], [1.60843014E12, 50564.28762541807], [1.60843032E12, 46680.29962546816], [1.60843002E12, 49326.52201257869], [1.60842972E12, 46411.194202898565], [1.60843038E12, 54145.96774193547], [1.6084296E12, 32321.638888888883], [1.60843026E12, 48707.72909698999], [1.60842996E12, 52586.74626865667], [1.60842966E12, 43566.971875]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60843038E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 232.94382022471908, "minX": 1.6084296E12, "maxY": 1527.097222222222, "series": [{"data": [[1.60842984E12, 264.33333333333314], [1.6084302E12, 244.54687499999991], [1.6084299E12, 241.59016393442622], [1.60843008E12, 244.3412162162162], [1.60842978E12, 265.2617449664426], [1.60843014E12, 243.2842809364549], [1.60843032E12, 232.94382022471908], [1.60843002E12, 239.56603773584908], [1.60842972E12, 256.9826086956522], [1.60843038E12, 245.70967741935485], [1.6084296E12, 1527.097222222222], [1.60843026E12, 240.8996655518395], [1.60842996E12, 235.02611940298507], [1.60842966E12, 1124.7]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60843038E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24560.0, "minX": 1.6084296E12, "maxY": 63230.0, "series": [{"data": [[1.60842984E12, 60165.0], [1.6084302E12, 60808.0], [1.6084299E12, 60122.0], [1.60843008E12, 60723.0], [1.60842978E12, 60888.0], [1.60843014E12, 60264.0], [1.60843032E12, 59487.0], [1.60843002E12, 61100.0], [1.60842972E12, 62520.0], [1.60843038E12, 58074.0], [1.6084296E12, 41897.0], [1.60843026E12, 59272.0], [1.60842996E12, 62689.0], [1.60842966E12, 63230.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60842984E12, 58883.5], [1.6084302E12, 60808.0], [1.6084299E12, 58754.0], [1.60843008E12, 60723.0], [1.60842978E12, 60888.0], [1.60843014E12, 60264.0], [1.60843032E12, 59171.700000000004], [1.60843002E12, 61100.0], [1.60842972E12, 62138.200000000004], [1.60843038E12, 58042.2], [1.6084296E12, 41299.0], [1.60843026E12, 59257.6], [1.60842996E12, 61427.5], [1.60842966E12, 53310.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60842984E12, 60165.0], [1.6084302E12, 60808.0], [1.6084299E12, 60122.0], [1.60843008E12, 60723.0], [1.60842978E12, 60888.0], [1.60843014E12, 60264.0], [1.60843032E12, 59487.0], [1.60843002E12, 61100.0], [1.60842972E12, 62520.0], [1.60843038E12, 58074.0], [1.6084296E12, 41897.0], [1.60843026E12, 59272.0], [1.60842996E12, 62689.0], [1.60842966E12, 63230.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60842984E12, 60165.0], [1.6084302E12, 60808.0], [1.6084299E12, 60122.0], [1.60843008E12, 60723.0], [1.60842978E12, 60888.0], [1.60843014E12, 60264.0], [1.60843032E12, 59487.0], [1.60843002E12, 61100.0], [1.60842972E12, 62520.0], [1.60843038E12, 58074.0], [1.6084296E12, 41897.0], [1.60843026E12, 59272.0], [1.60842996E12, 62689.0], [1.60842966E12, 57214.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60842984E12, 52941.0], [1.6084302E12, 46482.0], [1.6084299E12, 52112.0], [1.60843008E12, 54794.0], [1.60842978E12, 54580.0], [1.60843014E12, 54027.0], [1.60843032E12, 50759.0], [1.60843002E12, 53055.0], [1.60842972E12, 46577.0], [1.60843038E12, 47292.0], [1.6084296E12, 24560.0], [1.60843026E12, 52414.0], [1.60842996E12, 53876.0], [1.60842966E12, 42706.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60842984E12, 56051.0], [1.6084302E12, 51631.0], [1.6084299E12, 55963.0], [1.60843008E12, 57305.0], [1.60842978E12, 58678.0], [1.60843014E12, 58083.0], [1.60843032E12, 54111.5], [1.60843002E12, 53780.0], [1.60842972E12, 55988.0], [1.60843038E12, 53794.5], [1.6084296E12, 31316.0], [1.60843026E12, 56907.0], [1.60842996E12, 58099.0], [1.60842966E12, 49189.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60843038E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 35985.0, "minX": 1.0, "maxY": 60808.0, "series": [{"data": [[2.0, 52941.0], [8.0, 52287.0], [9.0, 53487.0], [10.0, 47815.0], [3.0, 53912.0], [12.0, 50352.0], [13.0, 60166.0], [1.0, 55243.0], [4.0, 56794.0], [16.0, 60808.0], [17.0, 48442.5], [18.0, 48706.0], [5.0, 54534.0], [23.0, 57486.0], [6.0, 55117.0], [24.0, 57441.0], [27.0, 60292.0], [7.0, 56018.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 47553.0], [34.0, 43403.0], [37.0, 46638.0], [39.0, 50481.0], [40.0, 45379.5], [3.0, 47566.5], [49.0, 45566.0], [50.0, 50238.0], [54.0, 42314.0], [4.0, 47228.0], [5.0, 47429.0], [6.0, 45717.0], [7.0, 46448.0], [8.0, 46350.0], [9.0, 47798.0], [10.0, 44823.0], [11.0, 45725.5], [12.0, 47963.0], [13.0, 43732.5], [14.0, 46687.5], [15.0, 44375.0], [1.0, 45064.0], [16.0, 48608.0], [17.0, 47442.0], [18.0, 36428.0], [19.0, 51294.0], [20.0, 54438.0], [21.0, 35985.0], [22.0, 49291.0], [23.0, 46047.5], [24.0, 38436.0], [27.0, 46628.0], [29.0, 41621.0], [30.0, 42785.0], [31.0, 42408.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 35984.5, "minX": 1.0, "maxY": 60074.0, "series": [{"data": [[2.0, 49454.0], [8.0, 47939.0], [9.0, 52804.0], [10.0, 45497.0], [3.0, 53046.5], [12.0, 49336.0], [13.0, 59458.0], [1.0, 54463.0], [4.0, 55191.5], [16.0, 60074.0], [17.0, 47493.0], [18.0, 46278.0], [5.0, 52382.0], [23.0, 56695.0], [6.0, 53289.0], [24.0, 56618.0], [27.0, 59602.0], [7.0, 55256.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 47553.0], [34.0, 43403.0], [37.0, 46638.0], [39.0, 50481.0], [40.0, 45379.5], [3.0, 47566.5], [49.0, 45566.0], [50.0, 50237.5], [54.0, 42314.0], [4.0, 47228.0], [5.0, 47428.5], [6.0, 45717.0], [7.0, 46448.0], [8.0, 46349.0], [9.0, 47797.0], [10.0, 44823.0], [11.0, 45725.5], [12.0, 47962.0], [13.0, 43732.0], [14.0, 46687.0], [15.0, 44375.0], [1.0, 45064.0], [16.0, 48608.0], [17.0, 47442.0], [18.0, 36427.5], [19.0, 51293.5], [20.0, 54437.5], [21.0, 35984.5], [22.0, 49290.5], [23.0, 46047.5], [24.0, 38436.0], [27.0, 46627.0], [29.0, 41620.0], [30.0, 42785.0], [31.0, 42407.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 54.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.4666666666666666, "minX": 1.6084296E12, "maxY": 5.75, "series": [{"data": [[1.60842984E12, 5.2], [1.6084302E12, 5.333333333333333], [1.6084299E12, 5.083333333333333], [1.60843008E12, 4.933333333333334], [1.60842978E12, 4.966666666666667], [1.60843014E12, 4.983333333333333], [1.60843032E12, 1.4666666666666666], [1.60843002E12, 5.3], [1.60842972E12, 5.75], [1.6084296E12, 5.366666666666666], [1.60843026E12, 4.316666666666666], [1.60842996E12, 4.466666666666667], [1.60842966E12, 5.333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60843032E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.6084296E12, "maxY": 4.1, "series": [{"data": [[1.60842984E12, 0.23333333333333334], [1.6084302E12, 0.1], [1.6084299E12, 0.2833333333333333], [1.60843008E12, 0.08333333333333333], [1.60842978E12, 0.13333333333333333], [1.60843014E12, 0.08333333333333333], [1.60843032E12, 0.2], [1.60843002E12, 0.06666666666666667], [1.60842972E12, 0.16666666666666666], [1.60843038E12, 0.2], [1.6084296E12, 0.21666666666666667], [1.60843026E12, 0.25], [1.60842996E12, 0.23333333333333334], [1.60842966E12, 0.8166666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60842984E12, 3.8], [1.6084302E12, 4.05], [1.6084299E12, 3.6], [1.60843008E12, 3.9166666666666665], [1.60842978E12, 3.9833333333333334], [1.60843014E12, 3.6], [1.60843032E12, 2.9833333333333334], [1.60843002E12, 4.066666666666666], [1.60842972E12, 4.1], [1.60843038E12, 0.05], [1.6084296E12, 0.9833333333333333], [1.60843026E12, 3.5166666666666666], [1.60842996E12, 2.4833333333333334], [1.60842966E12, 3.6333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.60842984E12, 1.1666666666666667], [1.6084302E12, 1.1833333333333333], [1.6084299E12, 1.2], [1.60843008E12, 0.9333333333333333], [1.60842978E12, 0.85], [1.60843014E12, 1.3], [1.60843032E12, 1.2666666666666666], [1.60843002E12, 1.1666666666666667], [1.60842972E12, 1.4833333333333334], [1.60843038E12, 0.26666666666666666], [1.60843026E12, 1.2166666666666666], [1.60842996E12, 1.75], [1.60842966E12, 0.8833333333333333]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60843038E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6084296E12, "maxY": 5.583333333333333, "series": [{"data": [[1.60842984E12, 0.23333333333333334], [1.6084302E12, 0.1], [1.6084299E12, 0.2833333333333333], [1.60843008E12, 0.08333333333333333], [1.60842978E12, 0.13333333333333333], [1.60843014E12, 0.08333333333333333], [1.60843032E12, 0.2], [1.60843002E12, 0.06666666666666667], [1.60842972E12, 0.16666666666666666], [1.60843038E12, 0.2], [1.6084296E12, 0.21666666666666667], [1.60843026E12, 0.25], [1.60842996E12, 0.23333333333333334], [1.60842966E12, 0.8166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60842984E12, 4.966666666666667], [1.6084302E12, 5.233333333333333], [1.6084299E12, 4.8], [1.60843008E12, 4.85], [1.60842978E12, 4.833333333333333], [1.60843014E12, 4.9], [1.60843032E12, 4.25], [1.60843002E12, 5.233333333333333], [1.60842972E12, 5.583333333333333], [1.60843038E12, 0.31666666666666665], [1.6084296E12, 0.9833333333333333], [1.60843026E12, 4.733333333333333], [1.60842996E12, 4.233333333333333], [1.60842966E12, 4.516666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60843038E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6084296E12, "maxY": 5.583333333333333, "series": [{"data": [[1.60842984E12, 0.23333333333333334], [1.6084302E12, 0.1], [1.6084299E12, 0.2833333333333333], [1.60843008E12, 0.08333333333333333], [1.60842978E12, 0.13333333333333333], [1.60843014E12, 0.08333333333333333], [1.60843032E12, 0.2], [1.60843002E12, 0.06666666666666667], [1.60842972E12, 0.16666666666666666], [1.60843038E12, 0.2], [1.6084296E12, 0.21666666666666667], [1.60843026E12, 0.25], [1.60842996E12, 0.23333333333333334], [1.60842966E12, 0.8166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60842984E12, 4.966666666666667], [1.6084302E12, 5.233333333333333], [1.6084299E12, 4.8], [1.60843008E12, 4.85], [1.60842978E12, 4.833333333333333], [1.60843014E12, 4.9], [1.60843032E12, 4.25], [1.60843002E12, 5.233333333333333], [1.60842972E12, 5.583333333333333], [1.60843038E12, 0.31666666666666665], [1.6084296E12, 0.9833333333333333], [1.60843026E12, 4.733333333333333], [1.60842996E12, 4.233333333333333], [1.60842966E12, 4.516666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60843038E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

