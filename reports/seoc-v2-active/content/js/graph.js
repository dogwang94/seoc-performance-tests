/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1025.0, "minX": 0.0, "maxY": 60707.0, "series": [{"data": [[0.0, 1025.0], [0.1, 2593.0], [0.2, 2796.0], [0.3, 3178.0], [0.4, 7163.0], [0.5, 8903.0], [0.6, 9600.0], [0.7, 10238.0], [0.8, 10396.0], [0.9, 10620.0], [1.0, 10833.0], [1.1, 10983.0], [1.2, 11107.0], [1.3, 11115.0], [1.4, 11223.0], [1.5, 11279.0], [1.6, 11404.0], [1.7, 11456.0], [1.8, 11541.0], [1.9, 11553.0], [2.0, 11647.0], [2.1, 11715.0], [2.2, 11820.0], [2.3, 11947.0], [2.4, 12023.0], [2.5, 12096.0], [2.6, 12185.0], [2.7, 12237.0], [2.8, 12326.0], [2.9, 12493.0], [3.0, 12566.0], [3.1, 12708.0], [3.2, 12768.0], [3.3, 12902.0], [3.4, 12912.0], [3.5, 12975.0], [3.6, 13060.0], [3.7, 13121.0], [3.8, 13158.0], [3.9, 13198.0], [4.0, 13283.0], [4.1, 13336.0], [4.2, 13443.0], [4.3, 13471.0], [4.4, 13545.0], [4.5, 13578.0], [4.6, 13624.0], [4.7, 13693.0], [4.8, 13715.0], [4.9, 13753.0], [5.0, 13862.0], [5.1, 13898.0], [5.2, 13945.0], [5.3, 13976.0], [5.4, 14030.0], [5.5, 14050.0], [5.6, 14090.0], [5.7, 14129.0], [5.8, 14182.0], [5.9, 14223.0], [6.0, 14271.0], [6.1, 14291.0], [6.2, 14319.0], [6.3, 14355.0], [6.4, 14424.0], [6.5, 14455.0], [6.6, 14492.0], [6.7, 14528.0], [6.8, 14594.0], [6.9, 14613.0], [7.0, 14642.0], [7.1, 14669.0], [7.2, 14705.0], [7.3, 14728.0], [7.4, 14743.0], [7.5, 14798.0], [7.6, 14860.0], [7.7, 14890.0], [7.8, 14910.0], [7.9, 14936.0], [8.0, 15000.0], [8.1, 15015.0], [8.2, 15031.0], [8.3, 15089.0], [8.4, 15096.0], [8.5, 15098.0], [8.6, 15130.0], [8.7, 15156.0], [8.8, 15195.0], [8.9, 15231.0], [9.0, 15264.0], [9.1, 15292.0], [9.2, 15307.0], [9.3, 15321.0], [9.4, 15354.0], [9.5, 15379.0], [9.6, 15400.0], [9.7, 15421.0], [9.8, 15445.0], [9.9, 15458.0], [10.0, 15470.0], [10.1, 15493.0], [10.2, 15505.0], [10.3, 15524.0], [10.4, 15530.0], [10.5, 15556.0], [10.6, 15568.0], [10.7, 15586.0], [10.8, 15591.0], [10.9, 15617.0], [11.0, 15658.0], [11.1, 15689.0], [11.2, 15704.0], [11.3, 15739.0], [11.4, 15754.0], [11.5, 15775.0], [11.6, 15789.0], [11.7, 15819.0], [11.8, 15838.0], [11.9, 15856.0], [12.0, 15876.0], [12.1, 15911.0], [12.2, 15931.0], [12.3, 15940.0], [12.4, 15970.0], [12.5, 15996.0], [12.6, 16002.0], [12.7, 16032.0], [12.8, 16041.0], [12.9, 16051.0], [13.0, 16085.0], [13.1, 16109.0], [13.2, 16122.0], [13.3, 16134.0], [13.4, 16146.0], [13.5, 16156.0], [13.6, 16171.0], [13.7, 16197.0], [13.8, 16212.0], [13.9, 16219.0], [14.0, 16236.0], [14.1, 16266.0], [14.2, 16275.0], [14.3, 16294.0], [14.4, 16308.0], [14.5, 16343.0], [14.6, 16359.0], [14.7, 16400.0], [14.8, 16419.0], [14.9, 16435.0], [15.0, 16446.0], [15.1, 16473.0], [15.2, 16485.0], [15.3, 16509.0], [15.4, 16520.0], [15.5, 16531.0], [15.6, 16536.0], [15.7, 16576.0], [15.8, 16591.0], [15.9, 16613.0], [16.0, 16642.0], [16.1, 16691.0], [16.2, 16712.0], [16.3, 16739.0], [16.4, 16761.0], [16.5, 16770.0], [16.6, 16781.0], [16.7, 16807.0], [16.8, 16834.0], [16.9, 16837.0], [17.0, 16848.0], [17.1, 16876.0], [17.2, 16892.0], [17.3, 16898.0], [17.4, 16926.0], [17.5, 16974.0], [17.6, 16991.0], [17.7, 17039.0], [17.8, 17059.0], [17.9, 17076.0], [18.0, 17085.0], [18.1, 17096.0], [18.2, 17105.0], [18.3, 17128.0], [18.4, 17135.0], [18.5, 17158.0], [18.6, 17172.0], [18.7, 17191.0], [18.8, 17221.0], [18.9, 17254.0], [19.0, 17280.0], [19.1, 17286.0], [19.2, 17310.0], [19.3, 17352.0], [19.4, 17360.0], [19.5, 17393.0], [19.6, 17401.0], [19.7, 17453.0], [19.8, 17474.0], [19.9, 17501.0], [20.0, 17524.0], [20.1, 17535.0], [20.2, 17544.0], [20.3, 17563.0], [20.4, 17631.0], [20.5, 17650.0], [20.6, 17696.0], [20.7, 17722.0], [20.8, 17736.0], [20.9, 17760.0], [21.0, 17809.0], [21.1, 17847.0], [21.2, 17904.0], [21.3, 17958.0], [21.4, 18010.0], [21.5, 18048.0], [21.6, 18140.0], [21.7, 18161.0], [21.8, 18191.0], [21.9, 18245.0], [22.0, 18282.0], [22.1, 18310.0], [22.2, 18331.0], [22.3, 18364.0], [22.4, 18394.0], [22.5, 18450.0], [22.6, 18483.0], [22.7, 18541.0], [22.8, 18578.0], [22.9, 18600.0], [23.0, 18618.0], [23.1, 18683.0], [23.2, 18732.0], [23.3, 18769.0], [23.4, 18800.0], [23.5, 18836.0], [23.6, 18881.0], [23.7, 18952.0], [23.8, 18972.0], [23.9, 19047.0], [24.0, 19080.0], [24.1, 19101.0], [24.2, 19211.0], [24.3, 19245.0], [24.4, 19317.0], [24.5, 19348.0], [24.6, 19448.0], [24.7, 19509.0], [24.8, 19598.0], [24.9, 19650.0], [25.0, 19709.0], [25.1, 19758.0], [25.2, 19798.0], [25.3, 19864.0], [25.4, 19964.0], [25.5, 20085.0], [25.6, 20101.0], [25.7, 20161.0], [25.8, 20226.0], [25.9, 20260.0], [26.0, 20404.0], [26.1, 20467.0], [26.2, 20508.0], [26.3, 20572.0], [26.4, 20628.0], [26.5, 20824.0], [26.6, 20934.0], [26.7, 21110.0], [26.8, 21129.0], [26.9, 21150.0], [27.0, 21247.0], [27.1, 21289.0], [27.2, 21391.0], [27.3, 21463.0], [27.4, 21713.0], [27.5, 21904.0], [27.6, 22070.0], [27.7, 22221.0], [27.8, 22322.0], [27.9, 22707.0], [28.0, 22824.0], [28.1, 22927.0], [28.2, 23024.0], [28.3, 23098.0], [28.4, 23167.0], [28.5, 23338.0], [28.6, 23445.0], [28.7, 23713.0], [28.8, 23780.0], [28.9, 23868.0], [29.0, 24062.0], [29.1, 24165.0], [29.2, 24192.0], [29.3, 24299.0], [29.4, 24474.0], [29.5, 24592.0], [29.6, 24737.0], [29.7, 24964.0], [29.8, 25110.0], [29.9, 25291.0], [30.0, 25343.0], [30.1, 25407.0], [30.2, 25458.0], [30.3, 25537.0], [30.4, 25592.0], [30.5, 25685.0], [30.6, 25769.0], [30.7, 25822.0], [30.8, 25850.0], [30.9, 25872.0], [31.0, 25914.0], [31.1, 25955.0], [31.2, 25968.0], [31.3, 26066.0], [31.4, 26097.0], [31.5, 26119.0], [31.6, 26181.0], [31.7, 26274.0], [31.8, 26343.0], [31.9, 26386.0], [32.0, 26448.0], [32.1, 26482.0], [32.2, 26562.0], [32.3, 26572.0], [32.4, 26594.0], [32.5, 26615.0], [32.6, 26675.0], [32.7, 26706.0], [32.8, 26784.0], [32.9, 26851.0], [33.0, 26904.0], [33.1, 26952.0], [33.2, 26997.0], [33.3, 27076.0], [33.4, 27114.0], [33.5, 27151.0], [33.6, 27159.0], [33.7, 27195.0], [33.8, 27230.0], [33.9, 27326.0], [34.0, 27342.0], [34.1, 27376.0], [34.2, 27431.0], [34.3, 27497.0], [34.4, 27546.0], [34.5, 27570.0], [34.6, 27598.0], [34.7, 27621.0], [34.8, 27693.0], [34.9, 27710.0], [35.0, 27741.0], [35.1, 27768.0], [35.2, 27775.0], [35.3, 27823.0], [35.4, 27867.0], [35.5, 27898.0], [35.6, 27940.0], [35.7, 27951.0], [35.8, 27996.0], [35.9, 28045.0], [36.0, 28087.0], [36.1, 28129.0], [36.2, 28162.0], [36.3, 28224.0], [36.4, 28270.0], [36.5, 28312.0], [36.6, 28317.0], [36.7, 28341.0], [36.8, 28350.0], [36.9, 28362.0], [37.0, 28387.0], [37.1, 28425.0], [37.2, 28447.0], [37.3, 28467.0], [37.4, 28493.0], [37.5, 28543.0], [37.6, 28584.0], [37.7, 28623.0], [37.8, 28644.0], [37.9, 28708.0], [38.0, 28724.0], [38.1, 28753.0], [38.2, 28772.0], [38.3, 28795.0], [38.4, 28845.0], [38.5, 28855.0], [38.6, 28869.0], [38.7, 28890.0], [38.8, 28944.0], [38.9, 28952.0], [39.0, 28995.0], [39.1, 29045.0], [39.2, 29096.0], [39.3, 29111.0], [39.4, 29133.0], [39.5, 29174.0], [39.6, 29185.0], [39.7, 29198.0], [39.8, 29220.0], [39.9, 29271.0], [40.0, 29306.0], [40.1, 29329.0], [40.2, 29348.0], [40.3, 29382.0], [40.4, 29407.0], [40.5, 29414.0], [40.6, 29443.0], [40.7, 29486.0], [40.8, 29555.0], [40.9, 29600.0], [41.0, 29625.0], [41.1, 29659.0], [41.2, 29687.0], [41.3, 29732.0], [41.4, 29744.0], [41.5, 29776.0], [41.6, 29812.0], [41.7, 29828.0], [41.8, 29859.0], [41.9, 29888.0], [42.0, 29926.0], [42.1, 29956.0], [42.2, 29986.0], [42.3, 30011.0], [42.4, 30054.0], [42.5, 30075.0], [42.6, 30095.0], [42.7, 30144.0], [42.8, 30189.0], [42.9, 30215.0], [43.0, 30258.0], [43.1, 30271.0], [43.2, 30303.0], [43.3, 30308.0], [43.4, 30322.0], [43.5, 30336.0], [43.6, 30350.0], [43.7, 30356.0], [43.8, 30382.0], [43.9, 30415.0], [44.0, 30426.0], [44.1, 30451.0], [44.2, 30468.0], [44.3, 30491.0], [44.4, 30525.0], [44.5, 30539.0], [44.6, 30573.0], [44.7, 30596.0], [44.8, 30622.0], [44.9, 30655.0], [45.0, 30703.0], [45.1, 30712.0], [45.2, 30738.0], [45.3, 30752.0], [45.4, 30768.0], [45.5, 30778.0], [45.6, 30833.0], [45.7, 30852.0], [45.8, 30893.0], [45.9, 30940.0], [46.0, 30980.0], [46.1, 31037.0], [46.2, 31078.0], [46.3, 31113.0], [46.4, 31153.0], [46.5, 31227.0], [46.6, 31277.0], [46.7, 31313.0], [46.8, 31344.0], [46.9, 31385.0], [47.0, 31444.0], [47.1, 31465.0], [47.2, 31511.0], [47.3, 31548.0], [47.4, 31564.0], [47.5, 31589.0], [47.6, 31630.0], [47.7, 31637.0], [47.8, 31675.0], [47.9, 31687.0], [48.0, 31770.0], [48.1, 31823.0], [48.2, 31894.0], [48.3, 31916.0], [48.4, 32006.0], [48.5, 32048.0], [48.6, 32065.0], [48.7, 32106.0], [48.8, 32128.0], [48.9, 32142.0], [49.0, 32185.0], [49.1, 32213.0], [49.2, 32267.0], [49.3, 32302.0], [49.4, 32334.0], [49.5, 32366.0], [49.6, 32394.0], [49.7, 32412.0], [49.8, 32454.0], [49.9, 32532.0], [50.0, 32590.0], [50.1, 32641.0], [50.2, 32676.0], [50.3, 32690.0], [50.4, 32751.0], [50.5, 32776.0], [50.6, 32847.0], [50.7, 32870.0], [50.8, 32903.0], [50.9, 32924.0], [51.0, 32967.0], [51.1, 33013.0], [51.2, 33084.0], [51.3, 33120.0], [51.4, 33159.0], [51.5, 33201.0], [51.6, 33227.0], [51.7, 33248.0], [51.8, 33286.0], [51.9, 33313.0], [52.0, 33341.0], [52.1, 33367.0], [52.2, 33408.0], [52.3, 33430.0], [52.4, 33458.0], [52.5, 33496.0], [52.6, 33512.0], [52.7, 33593.0], [52.8, 33657.0], [52.9, 33671.0], [53.0, 33724.0], [53.1, 33743.0], [53.2, 33785.0], [53.3, 33843.0], [53.4, 33875.0], [53.5, 33910.0], [53.6, 33953.0], [53.7, 33965.0], [53.8, 34021.0], [53.9, 34057.0], [54.0, 34104.0], [54.1, 34163.0], [54.2, 34184.0], [54.3, 34202.0], [54.4, 34226.0], [54.5, 34244.0], [54.6, 34274.0], [54.7, 34305.0], [54.8, 34384.0], [54.9, 34398.0], [55.0, 34415.0], [55.1, 34429.0], [55.2, 34449.0], [55.3, 34460.0], [55.4, 34474.0], [55.5, 34515.0], [55.6, 34553.0], [55.7, 34576.0], [55.8, 34609.0], [55.9, 34647.0], [56.0, 34670.0], [56.1, 34699.0], [56.2, 34719.0], [56.3, 34738.0], [56.4, 34791.0], [56.5, 34794.0], [56.6, 34821.0], [56.7, 34837.0], [56.8, 34881.0], [56.9, 34932.0], [57.0, 34964.0], [57.1, 35001.0], [57.2, 35039.0], [57.3, 35061.0], [57.4, 35124.0], [57.5, 35160.0], [57.6, 35182.0], [57.7, 35196.0], [57.8, 35207.0], [57.9, 35225.0], [58.0, 35246.0], [58.1, 35265.0], [58.2, 35275.0], [58.3, 35294.0], [58.4, 35307.0], [58.5, 35313.0], [58.6, 35337.0], [58.7, 35386.0], [58.8, 35445.0], [58.9, 35461.0], [59.0, 35476.0], [59.1, 35511.0], [59.2, 35529.0], [59.3, 35542.0], [59.4, 35556.0], [59.5, 35575.0], [59.6, 35586.0], [59.7, 35600.0], [59.8, 35615.0], [59.9, 35620.0], [60.0, 35647.0], [60.1, 35661.0], [60.2, 35674.0], [60.3, 35705.0], [60.4, 35715.0], [60.5, 35723.0], [60.6, 35749.0], [60.7, 35774.0], [60.8, 35791.0], [60.9, 35807.0], [61.0, 35819.0], [61.1, 35831.0], [61.2, 35856.0], [61.3, 35876.0], [61.4, 35895.0], [61.5, 35900.0], [61.6, 35947.0], [61.7, 35951.0], [61.8, 35966.0], [61.9, 35969.0], [62.0, 35983.0], [62.1, 35989.0], [62.2, 35999.0], [62.3, 36011.0], [62.4, 36022.0], [62.5, 36027.0], [62.6, 36048.0], [62.7, 36063.0], [62.8, 36071.0], [62.9, 36082.0], [63.0, 36097.0], [63.1, 36125.0], [63.2, 36138.0], [63.3, 36148.0], [63.4, 36155.0], [63.5, 36165.0], [63.6, 36189.0], [63.7, 36196.0], [63.8, 36217.0], [63.9, 36235.0], [64.0, 36240.0], [64.1, 36253.0], [64.2, 36267.0], [64.3, 36272.0], [64.4, 36277.0], [64.5, 36292.0], [64.6, 36301.0], [64.7, 36336.0], [64.8, 36342.0], [64.9, 36349.0], [65.0, 36357.0], [65.1, 36360.0], [65.2, 36370.0], [65.3, 36381.0], [65.4, 36394.0], [65.5, 36404.0], [65.6, 36413.0], [65.7, 36417.0], [65.8, 36423.0], [65.9, 36437.0], [66.0, 36443.0], [66.1, 36457.0], [66.2, 36465.0], [66.3, 36471.0], [66.4, 36479.0], [66.5, 36490.0], [66.6, 36491.0], [66.7, 36517.0], [66.8, 36529.0], [66.9, 36537.0], [67.0, 36559.0], [67.1, 36568.0], [67.2, 36576.0], [67.3, 36585.0], [67.4, 36595.0], [67.5, 36611.0], [67.6, 36622.0], [67.7, 36628.0], [67.8, 36637.0], [67.9, 36645.0], [68.0, 36659.0], [68.1, 36669.0], [68.2, 36685.0], [68.3, 36695.0], [68.4, 36701.0], [68.5, 36716.0], [68.6, 36737.0], [68.7, 36752.0], [68.8, 36778.0], [68.9, 36794.0], [69.0, 36806.0], [69.1, 36830.0], [69.2, 36857.0], [69.3, 36867.0], [69.4, 36882.0], [69.5, 36903.0], [69.6, 36916.0], [69.7, 36923.0], [69.8, 36938.0], [69.9, 36955.0], [70.0, 36972.0], [70.1, 36987.0], [70.2, 37004.0], [70.3, 37010.0], [70.4, 37020.0], [70.5, 37039.0], [70.6, 37058.0], [70.7, 37086.0], [70.8, 37114.0], [70.9, 37124.0], [71.0, 37137.0], [71.1, 37151.0], [71.2, 37160.0], [71.3, 37167.0], [71.4, 37185.0], [71.5, 37203.0], [71.6, 37209.0], [71.7, 37218.0], [71.8, 37220.0], [71.9, 37236.0], [72.0, 37255.0], [72.1, 37274.0], [72.2, 37284.0], [72.3, 37291.0], [72.4, 37302.0], [72.5, 37308.0], [72.6, 37330.0], [72.7, 37345.0], [72.8, 37356.0], [72.9, 37360.0], [73.0, 37372.0], [73.1, 37394.0], [73.2, 37413.0], [73.3, 37421.0], [73.4, 37430.0], [73.5, 37439.0], [73.6, 37446.0], [73.7, 37450.0], [73.8, 37463.0], [73.9, 37491.0], [74.0, 37511.0], [74.1, 37520.0], [74.2, 37529.0], [74.3, 37540.0], [74.4, 37555.0], [74.5, 37567.0], [74.6, 37591.0], [74.7, 37639.0], [74.8, 37647.0], [74.9, 37660.0], [75.0, 37669.0], [75.1, 37687.0], [75.2, 37699.0], [75.3, 37711.0], [75.4, 37719.0], [75.5, 37735.0], [75.6, 37772.0], [75.7, 37785.0], [75.8, 37808.0], [75.9, 37850.0], [76.0, 37867.0], [76.1, 37886.0], [76.2, 37898.0], [76.3, 37928.0], [76.4, 37937.0], [76.5, 37963.0], [76.6, 38019.0], [76.7, 38071.0], [76.8, 38093.0], [76.9, 38111.0], [77.0, 38151.0], [77.1, 38180.0], [77.2, 38201.0], [77.3, 38209.0], [77.4, 38222.0], [77.5, 38240.0], [77.6, 38260.0], [77.7, 38279.0], [77.8, 38298.0], [77.9, 38335.0], [78.0, 38367.0], [78.1, 38391.0], [78.2, 38434.0], [78.3, 38451.0], [78.4, 38460.0], [78.5, 38474.0], [78.6, 38482.0], [78.7, 38510.0], [78.8, 38513.0], [78.9, 38520.0], [79.0, 38550.0], [79.1, 38592.0], [79.2, 38622.0], [79.3, 38628.0], [79.4, 38677.0], [79.5, 38690.0], [79.6, 38716.0], [79.7, 38753.0], [79.8, 38803.0], [79.9, 38825.0], [80.0, 38848.0], [80.1, 38864.0], [80.2, 38897.0], [80.3, 38974.0], [80.4, 39031.0], [80.5, 39071.0], [80.6, 39095.0], [80.7, 39138.0], [80.8, 39208.0], [80.9, 39221.0], [81.0, 39273.0], [81.1, 39301.0], [81.2, 39337.0], [81.3, 39348.0], [81.4, 39378.0], [81.5, 39435.0], [81.6, 39477.0], [81.7, 39484.0], [81.8, 39518.0], [81.9, 39551.0], [82.0, 39590.0], [82.1, 39615.0], [82.2, 39661.0], [82.3, 39724.0], [82.4, 39760.0], [82.5, 39786.0], [82.6, 39808.0], [82.7, 39862.0], [82.8, 39904.0], [82.9, 39951.0], [83.0, 40010.0], [83.1, 40059.0], [83.2, 40111.0], [83.3, 40131.0], [83.4, 40149.0], [83.5, 40173.0], [83.6, 40208.0], [83.7, 40222.0], [83.8, 40246.0], [83.9, 40302.0], [84.0, 40324.0], [84.1, 40349.0], [84.2, 40374.0], [84.3, 40394.0], [84.4, 40488.0], [84.5, 40508.0], [84.6, 40545.0], [84.7, 40583.0], [84.8, 40627.0], [84.9, 40692.0], [85.0, 40733.0], [85.1, 40773.0], [85.2, 40788.0], [85.3, 40821.0], [85.4, 40863.0], [85.5, 40944.0], [85.6, 40980.0], [85.7, 40982.0], [85.8, 40995.0], [85.9, 41025.0], [86.0, 41089.0], [86.1, 41141.0], [86.2, 41178.0], [86.3, 41193.0], [86.4, 41238.0], [86.5, 41258.0], [86.6, 41356.0], [86.7, 41402.0], [86.8, 41444.0], [86.9, 41476.0], [87.0, 41511.0], [87.1, 41540.0], [87.2, 41569.0], [87.3, 41585.0], [87.4, 41660.0], [87.5, 41713.0], [87.6, 41760.0], [87.7, 41840.0], [87.8, 41929.0], [87.9, 41970.0], [88.0, 42023.0], [88.1, 42058.0], [88.2, 42091.0], [88.3, 42127.0], [88.4, 42182.0], [88.5, 42214.0], [88.6, 42312.0], [88.7, 42350.0], [88.8, 42409.0], [88.9, 42436.0], [89.0, 42466.0], [89.1, 42473.0], [89.2, 42535.0], [89.3, 42586.0], [89.4, 42627.0], [89.5, 42694.0], [89.6, 42737.0], [89.7, 42768.0], [89.8, 42839.0], [89.9, 42865.0], [90.0, 42886.0], [90.1, 42962.0], [90.2, 42985.0], [90.3, 43025.0], [90.4, 43075.0], [90.5, 43168.0], [90.6, 43223.0], [90.7, 43272.0], [90.8, 43330.0], [90.9, 43386.0], [91.0, 43474.0], [91.1, 43604.0], [91.2, 43813.0], [91.3, 43941.0], [91.4, 44062.0], [91.5, 44184.0], [91.6, 44329.0], [91.7, 44500.0], [91.8, 44769.0], [91.9, 44828.0], [92.0, 44941.0], [92.1, 45079.0], [92.2, 45410.0], [92.3, 45586.0], [92.4, 45823.0], [92.5, 46116.0], [92.6, 46295.0], [92.7, 46596.0], [92.8, 46808.0], [92.9, 47002.0], [93.0, 47308.0], [93.1, 47555.0], [93.2, 47575.0], [93.3, 47767.0], [93.4, 47835.0], [93.5, 47920.0], [93.6, 48035.0], [93.7, 48275.0], [93.8, 48406.0], [93.9, 48521.0], [94.0, 48610.0], [94.1, 48799.0], [94.2, 48955.0], [94.3, 49198.0], [94.4, 49308.0], [94.5, 49533.0], [94.6, 49572.0], [94.7, 49770.0], [94.8, 49887.0], [94.9, 50157.0], [95.0, 50524.0], [95.1, 50662.0], [95.2, 50821.0], [95.3, 51023.0], [95.4, 51190.0], [95.5, 51417.0], [95.6, 51529.0], [95.7, 51729.0], [95.8, 51857.0], [95.9, 52197.0], [96.0, 52272.0], [96.1, 52452.0], [96.2, 52633.0], [96.3, 52744.0], [96.4, 52791.0], [96.5, 52865.0], [96.6, 53016.0], [96.7, 53204.0], [96.8, 53364.0], [96.9, 53551.0], [97.0, 53927.0], [97.1, 54131.0], [97.2, 54298.0], [97.3, 54620.0], [97.4, 55060.0], [97.5, 55273.0], [97.6, 55514.0], [97.7, 55932.0], [97.8, 56633.0], [97.9, 56845.0], [98.0, 57018.0], [98.1, 58082.0], [98.2, 58980.0], [98.3, 59176.0], [98.4, 59598.0], [98.5, 60033.0], [98.6, 60136.0], [98.7, 60137.0], [98.8, 60139.0], [98.9, 60140.0], [99.0, 60140.0], [99.1, 60142.0], [99.2, 60142.0], [99.3, 60388.0], [99.4, 60394.0], [99.5, 60396.0], [99.6, 60397.0], [99.7, 60400.0], [99.8, 60401.0], [99.9, 60419.0], [100.0, 60707.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 45.0, "series": [{"data": [[34500.0, 12.0], [33700.0, 12.0], [32900.0, 11.0], [35300.0, 14.0], [36100.0, 27.0], [36900.0, 25.0], [38500.0, 16.0], [37700.0, 20.0], [39300.0, 12.0], [40900.0, 14.0], [40100.0, 15.0], [42500.0, 7.0], [41700.0, 7.0], [44100.0, 3.0], [43300.0, 7.0], [44900.0, 1.0], [46500.0, 3.0], [48100.0, 1.0], [47300.0, 3.0], [48900.0, 2.0], [50500.0, 3.0], [49700.0, 1.0], [52900.0, 2.0], [52100.0, 2.0], [51300.0, 2.0], [54500.0, 1.0], [56900.0, 2.0], [60100.0, 28.0], [1000.0, 1.0], [2300.0, 1.0], [2500.0, 2.0], [2700.0, 4.0], [2900.0, 2.0], [3100.0, 2.0], [3200.0, 1.0], [5000.0, 1.0], [5500.0, 1.0], [7100.0, 1.0], [8600.0, 1.0], [9000.0, 1.0], [9600.0, 2.0], [10200.0, 3.0], [10000.0, 1.0], [10600.0, 1.0], [10400.0, 1.0], [10800.0, 3.0], [11200.0, 7.0], [11000.0, 2.0], [11600.0, 5.0], [11400.0, 8.0], [11800.0, 6.0], [12200.0, 6.0], [12000.0, 6.0], [12400.0, 3.0], [12600.0, 2.0], [13000.0, 4.0], [13200.0, 3.0], [12800.0, 1.0], [13800.0, 8.0], [13400.0, 7.0], [13600.0, 8.0], [14000.0, 10.0], [14200.0, 11.0], [14800.0, 9.0], [14600.0, 14.0], [14400.0, 9.0], [15200.0, 10.0], [15000.0, 19.0], [15400.0, 23.0], [15600.0, 10.0], [15800.0, 17.0], [16200.0, 23.0], [16000.0, 19.0], [16400.0, 21.0], [17200.0, 17.0], [16800.0, 25.0], [18400.0, 10.0], [17600.0, 11.0], [18000.0, 7.0], [18800.0, 9.0], [19200.0, 7.0], [20000.0, 4.0], [19600.0, 7.0], [20400.0, 7.0], [20800.0, 4.0], [21200.0, 6.0], [22400.0, 2.0], [22000.0, 2.0], [22800.0, 4.0], [23200.0, 3.0], [23600.0, 2.0], [24400.0, 4.0], [24000.0, 2.0], [25200.0, 3.0], [24800.0, 1.0], [26400.0, 9.0], [26000.0, 6.0], [25600.0, 5.0], [26800.0, 6.0], [27600.0, 7.0], [27200.0, 7.0], [28400.0, 14.0], [28000.0, 7.0], [28800.0, 15.0], [29600.0, 13.0], [29200.0, 11.0], [30000.0, 12.0], [30400.0, 17.0], [30800.0, 10.0], [31200.0, 9.0], [31600.0, 13.0], [32000.0, 9.0], [32400.0, 7.0], [33600.0, 8.0], [32800.0, 9.0], [34400.0, 21.0], [36000.0, 30.0], [35200.0, 25.0], [36800.0, 20.0], [37600.0, 22.0], [38400.0, 20.0], [39200.0, 12.0], [40800.0, 7.0], [40000.0, 8.0], [41600.0, 6.0], [42400.0, 14.0], [44000.0, 3.0], [43200.0, 7.0], [44800.0, 3.0], [45600.0, 1.0], [46400.0, 1.0], [48800.0, 2.0], [48000.0, 4.0], [50400.0, 2.0], [49600.0, 1.0], [52800.0, 4.0], [51200.0, 1.0], [53600.0, 1.0], [55200.0, 3.0], [56800.0, 2.0], [56000.0, 3.0], [58400.0, 1.0], [60000.0, 1.0], [33100.0, 7.0], [33900.0, 10.0], [34700.0, 16.0], [36300.0, 32.0], [35500.0, 22.0], [37100.0, 28.0], [38700.0, 8.0], [37900.0, 12.0], [39500.0, 12.0], [40300.0, 17.0], [41900.0, 8.0], [41100.0, 11.0], [42700.0, 8.0], [43500.0, 3.0], [44300.0, 3.0], [45900.0, 1.0], [46700.0, 1.0], [47500.0, 5.0], [49100.0, 3.0], [48300.0, 3.0], [49900.0, 2.0], [50700.0, 2.0], [51500.0, 3.0], [52300.0, 2.0], [53900.0, 1.0], [54700.0, 1.0], [55500.0, 2.0], [57100.0, 1.0], [57900.0, 1.0], [59500.0, 3.0], [60300.0, 16.0], [17300.0, 15.0], [16900.0, 11.0], [16500.0, 21.0], [17700.0, 14.0], [18100.0, 9.0], [18500.0, 8.0], [19300.0, 8.0], [18900.0, 7.0], [20100.0, 7.0], [19700.0, 8.0], [20900.0, 3.0], [20500.0, 6.0], [21300.0, 4.0], [21700.0, 3.0], [22100.0, 2.0], [22900.0, 4.0], [23300.0, 3.0], [24100.0, 6.0], [24500.0, 2.0], [23700.0, 5.0], [25300.0, 6.0], [24900.0, 3.0], [26500.0, 10.0], [26100.0, 7.0], [25700.0, 6.0], [27300.0, 9.0], [26900.0, 8.0], [28500.0, 10.0], [27700.0, 15.0], [28100.0, 8.0], [29300.0, 14.0], [28900.0, 11.0], [30100.0, 9.0], [30500.0, 15.0], [29700.0, 14.0], [31700.0, 5.0], [30900.0, 9.0], [31300.0, 9.0], [32100.0, 14.0], [32500.0, 8.0], [33000.0, 7.0], [33800.0, 8.0], [34600.0, 12.0], [35400.0, 13.0], [36200.0, 32.0], [37000.0, 23.0], [38600.0, 16.0], [37800.0, 18.0], [39400.0, 12.0], [40200.0, 10.0], [41000.0, 8.0], [41800.0, 3.0], [42600.0, 7.0], [43400.0, 3.0], [44200.0, 2.0], [45000.0, 4.0], [46600.0, 1.0], [45800.0, 2.0], [48200.0, 2.0], [49000.0, 1.0], [49800.0, 3.0], [50600.0, 2.0], [52200.0, 3.0], [53000.0, 4.0], [51400.0, 1.0], [54600.0, 1.0], [53800.0, 1.0], [57000.0, 1.0], [55400.0, 1.0], [57800.0, 1.0], [33300.0, 14.0], [34100.0, 9.0], [34900.0, 10.0], [36500.0, 29.0], [35700.0, 22.0], [37300.0, 28.0], [38900.0, 6.0], [38100.0, 14.0], [39700.0, 11.0], [40500.0, 12.0], [41300.0, 5.0], [42900.0, 9.0], [42100.0, 8.0], [44500.0, 1.0], [43700.0, 1.0], [46900.0, 1.0], [46100.0, 2.0], [45300.0, 1.0], [48500.0, 3.0], [47700.0, 2.0], [49300.0, 2.0], [50100.0, 1.0], [50900.0, 1.0], [51700.0, 5.0], [52500.0, 1.0], [53300.0, 2.0], [54100.0, 4.0], [55700.0, 1.0], [58900.0, 1.0], [58100.0, 1.0], [8500.0, 1.0], [8900.0, 2.0], [9100.0, 1.0], [9900.0, 1.0], [10300.0, 2.0], [10500.0, 1.0], [10700.0, 1.0], [10900.0, 5.0], [11100.0, 6.0], [11500.0, 6.0], [11300.0, 1.0], [11700.0, 2.0], [12100.0, 4.0], [11900.0, 2.0], [12300.0, 2.0], [12500.0, 5.0], [12700.0, 6.0], [12900.0, 10.0], [13300.0, 6.0], [13100.0, 10.0], [13500.0, 7.0], [13700.0, 6.0], [14300.0, 9.0], [13900.0, 9.0], [14100.0, 8.0], [14500.0, 8.0], [14700.0, 12.0], [15100.0, 13.0], [15300.0, 16.0], [14900.0, 9.0], [15700.0, 19.0], [15500.0, 26.0], [15900.0, 17.0], [16300.0, 14.0], [16100.0, 25.0], [17000.0, 21.0], [17400.0, 12.0], [16600.0, 12.0], [18200.0, 10.0], [17800.0, 7.0], [18600.0, 10.0], [19000.0, 10.0], [19400.0, 5.0], [19800.0, 6.0], [20200.0, 7.0], [21400.0, 4.0], [20600.0, 4.0], [21000.0, 2.0], [22200.0, 4.0], [21800.0, 1.0], [23400.0, 2.0], [23000.0, 5.0], [24200.0, 4.0], [23800.0, 3.0], [25000.0, 3.0], [25400.0, 7.0], [24600.0, 1.0], [25800.0, 10.0], [26600.0, 9.0], [26200.0, 5.0], [27400.0, 7.0], [27000.0, 5.0], [28600.0, 7.0], [28200.0, 9.0], [27800.0, 12.0], [29400.0, 13.0], [29000.0, 8.0], [30200.0, 12.0], [29800.0, 13.0], [30600.0, 9.0], [31000.0, 7.0], [31400.0, 10.0], [32600.0, 10.0], [31800.0, 7.0], [32200.0, 10.0], [33200.0, 13.0], [34000.0, 10.0], [34800.0, 11.0], [36400.0, 45.0], [35600.0, 23.0], [38800.0, 17.0], [37200.0, 33.0], [38000.0, 10.0], [39600.0, 8.0], [40400.0, 5.0], [42000.0, 11.0], [42800.0, 10.0], [41200.0, 8.0], [44400.0, 1.0], [43600.0, 2.0], [46800.0, 3.0], [45200.0, 1.0], [46000.0, 1.0], [48400.0, 4.0], [47600.0, 2.0], [50000.0, 1.0], [49200.0, 2.0], [50800.0, 3.0], [53200.0, 3.0], [52400.0, 4.0], [51600.0, 2.0], [54800.0, 2.0], [54000.0, 1.0], [55600.0, 1.0], [58800.0, 1.0], [58000.0, 1.0], [60400.0, 11.0], [59600.0, 1.0], [34300.0, 10.0], [33500.0, 8.0], [35100.0, 15.0], [36700.0, 21.0], [35900.0, 27.0], [37500.0, 27.0], [38300.0, 13.0], [39100.0, 6.0], [40700.0, 12.0], [39900.0, 7.0], [41500.0, 13.0], [42300.0, 7.0], [43900.0, 3.0], [43100.0, 6.0], [44700.0, 6.0], [45500.0, 5.0], [47100.0, 1.0], [47900.0, 1.0], [48700.0, 2.0], [49500.0, 7.0], [51100.0, 3.0], [52700.0, 5.0], [51900.0, 1.0], [53500.0, 2.0], [54300.0, 2.0], [56700.0, 1.0], [55900.0, 1.0], [59100.0, 3.0], [59900.0, 1.0], [60700.0, 1.0], [17100.0, 21.0], [16700.0, 19.0], [17500.0, 16.0], [17900.0, 8.0], [18300.0, 12.0], [19100.0, 3.0], [18700.0, 9.0], [19900.0, 4.0], [19500.0, 4.0], [20300.0, 1.0], [21100.0, 10.0], [20700.0, 1.0], [21500.0, 2.0], [21900.0, 3.0], [22300.0, 2.0], [23500.0, 1.0], [23100.0, 3.0], [22700.0, 3.0], [24300.0, 2.0], [23900.0, 3.0], [25100.0, 2.0], [25500.0, 5.0], [24700.0, 2.0], [26300.0, 7.0], [25900.0, 11.0], [27500.0, 11.0], [27100.0, 14.0], [26700.0, 6.0], [28300.0, 21.0], [27900.0, 12.0], [29100.0, 18.0], [28700.0, 17.0], [29500.0, 6.0], [30700.0, 23.0], [29900.0, 13.0], [30300.0, 26.0], [31500.0, 15.0], [31100.0, 6.0], [31900.0, 6.0], [32300.0, 14.0], [32700.0, 9.0], [33400.0, 12.0], [34200.0, 15.0], [35800.0, 23.0], [36600.0, 36.0], [35000.0, 8.0], [37400.0, 30.0], [38200.0, 23.0], [40600.0, 6.0], [39000.0, 9.0], [39800.0, 9.0], [41400.0, 11.0], [42200.0, 5.0], [43000.0, 6.0], [43800.0, 4.0], [44600.0, 1.0], [47000.0, 3.0], [45400.0, 2.0], [46200.0, 3.0], [48600.0, 3.0], [47800.0, 7.0], [49400.0, 2.0], [51000.0, 2.0], [50200.0, 1.0], [52600.0, 4.0], [51800.0, 2.0], [54200.0, 2.0], [53400.0, 2.0], [55000.0, 3.0], [56600.0, 2.0], [59000.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2542.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2542.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1207.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 101.64353312302838, "minX": 1.60842438E12, "maxY": 250.0, "series": [{"data": [[1.60842462E12, 250.0], [1.60842444E12, 250.0], [1.60842474E12, 247.79443254818003], [1.60842456E12, 250.0], [1.60842438E12, 217.39428571428567], [1.60842486E12, 101.64353312302838], [1.60842468E12, 250.0], [1.6084245E12, 250.0], [1.6084248E12, 214.4025974025974]], "isOverall": false, "label": "SEOC_Active_Thread_Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842486E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1025.0, "minX": 1.0, "maxY": 53250.0, "series": [{"data": [[2.0, 2593.0], [3.0, 3144.0], [4.0, 2685.5], [5.0, 2759.0], [6.0, 2758.0], [7.0, 2951.0], [8.0, 2337.0], [9.0, 2766.0], [10.0, 2913.0], [11.0, 3284.0], [12.0, 3178.0], [13.0, 5009.0], [14.0, 5558.0], [15.0, 9010.0], [16.0, 12678.0], [17.0, 11400.0], [18.0, 10424.0], [19.0, 20535.0], [20.0, 23712.5], [21.0, 8903.0], [22.0, 9301.5], [23.0, 23279.75], [24.0, 13945.0], [25.0, 28400.5], [26.0, 8649.0], [27.0, 22178.333333333332], [28.0, 13719.5], [29.0, 11697.0], [30.0, 25620.0], [31.0, 32118.0], [33.0, 13683.0], [32.0, 16436.0], [35.0, 34861.333333333336], [34.0, 15483.0], [37.0, 14037.0], [36.0, 13724.0], [39.0, 25836.0], [38.0, 15231.0], [41.0, 14424.0], [40.0, 26278.0], [43.0, 27265.0], [42.0, 23094.0], [45.0, 32240.666666666664], [47.0, 13186.0], [46.0, 12831.0], [49.0, 38607.0], [48.0, 37137.0], [51.0, 13693.0], [50.0, 29201.0], [53.0, 21150.0], [52.0, 30395.0], [55.0, 20620.0], [54.0, 17623.0], [57.0, 15514.0], [56.0, 23230.0], [59.0, 17135.0], [58.0, 23033.0], [61.0, 30952.0], [60.0, 24737.0], [63.0, 12932.0], [62.0, 15996.0], [67.0, 14628.0], [66.0, 17096.0], [65.0, 24435.5], [64.0, 37893.0], [71.0, 17287.0], [70.0, 17970.0], [69.0, 37699.0], [68.0, 30650.0], [75.0, 25544.0], [74.0, 30299.666666666668], [73.0, 26878.0], [72.0, 25561.0], [79.0, 37660.0], [78.0, 21042.0], [77.0, 22708.5], [76.0, 23118.333333333332], [83.0, 16109.0], [82.0, 38149.0], [81.0, 40737.666666666664], [80.0, 17310.0], [87.0, 18017.0], [86.0, 27919.5], [85.0, 28540.0], [84.0, 38201.0], [91.0, 23778.0], [90.0, 30367.0], [89.0, 27722.5], [88.0, 29602.0], [95.0, 30446.0], [94.0, 18963.0], [93.0, 24760.5], [92.0, 29841.5], [99.0, 27269.75], [98.0, 53250.0], [97.0, 30769.0], [96.0, 27872.2], [103.0, 40601.0], [102.0, 31123.0], [101.0, 19496.0], [100.0, 39467.0], [107.0, 19650.0], [106.0, 30468.0], [105.0, 19166.5], [104.0, 29382.0], [111.0, 29680.454545454548], [110.0, 43039.0], [109.0, 25133.0], [108.0, 25614.5], [115.0, 21140.0], [114.0, 31340.5], [113.0, 20420.0], [112.0, 32703.0], [119.0, 20502.0], [118.0, 30726.0], [117.0, 25527.0], [116.0, 25629.5], [123.0, 28541.428571428572], [122.0, 26474.5], [121.0, 20410.0], [120.0, 44376.0], [127.0, 31503.0], [126.0, 31520.0], [125.0, 20607.0], [124.0, 33366.333333333336], [130.0, 20858.0], [132.0, 20430.666666666668], [133.0, 22932.5], [135.0, 16822.8], [134.0, 20525.0], [131.0, 19792.0], [129.0, 39005.25], [128.0, 20805.75], [136.0, 21958.25], [137.0, 18333.0], [138.0, 18809.5], [139.0, 15287.0], [140.0, 15775.0], [142.0, 15171.0], [143.0, 18875.333333333332], [141.0, 24566.0], [144.0, 23250.666666666664], [145.0, 15879.666666666666], [147.0, 17327.25], [148.0, 17524.444444444445], [151.0, 21138.333333333332], [150.0, 35296.5], [149.0, 40905.0], [146.0, 29870.0], [152.0, 16809.75], [153.0, 21366.6], [154.0, 26664.666666666664], [155.0, 16557.6], [157.0, 27052.333333333336], [159.0, 12736.0], [158.0, 23074.0], [156.0, 28272.0], [161.0, 22357.25], [165.0, 18291.5], [166.0, 27487.0], [167.0, 34660.4], [164.0, 25457.75], [163.0, 38714.0], [162.0, 31165.0], [160.0, 28754.0], [170.0, 18308.5], [175.0, 33892.75], [174.0, 36487.00000000001], [173.0, 33897.38888888889], [172.0, 26585.75], [171.0, 33306.0], [169.0, 32794.11111111111], [168.0, 39197.75], [183.0, 32536.0], [182.0, 37971.5], [181.0, 35377.2], [180.0, 24751.0], [179.0, 34927.125], [178.0, 29847.8], [177.0, 28776.333333333332], [176.0, 24964.0], [191.0, 36091.666666666664], [190.0, 22452.25], [189.0, 21877.8], [188.0, 34243.0], [187.0, 17068.666666666668], [186.0, 34375.125], [185.0, 36666.0], [184.0, 30196.272727272724], [199.0, 36017.0], [198.0, 31424.500000000004], [197.0, 19706.333333333332], [196.0, 24715.3], [195.0, 12390.0], [194.0, 35061.0], [193.0, 25744.0], [192.0, 25458.0], [207.0, 41183.333333333336], [206.0, 35043.0], [205.0, 29623.0], [204.0, 20710.6], [203.0, 25815.5], [202.0, 31770.5], [201.0, 24643.0], [200.0, 31662.0], [215.0, 29205.071428571428], [214.0, 13060.0], [213.0, 31237.5], [212.0, 35841.0], [211.0, 28209.5], [210.0, 26486.0], [209.0, 30551.062499999996], [208.0, 14349.0], [218.0, 31841.2], [221.0, 13634.666666666666], [223.0, 31659.833333333336], [222.0, 26105.0], [220.0, 35034.99999999999], [219.0, 24014.4], [217.0, 36111.5], [216.0, 27580.0], [225.0, 19007.0], [227.0, 27043.61111111111], [228.0, 22056.0], [229.0, 17418.5], [231.0, 26948.0], [230.0, 37469.0], [226.0, 34385.57142857143], [224.0, 30043.928571428572], [234.0, 13758.8], [235.0, 20772.222222222223], [236.0, 25008.399999999998], [237.0, 13243.333333333334], [238.0, 30020.071428571428], [239.0, 21096.0], [233.0, 29691.33333333333], [232.0, 36486.0], [240.0, 23895.714285714286], [241.0, 35109.62068965516], [242.0, 33364.99999999999], [243.0, 30321.8], [244.0, 28056.531914893614], [245.0, 31422.266666666666], [247.0, 31797.562962962955], [246.0, 34516.130434782615], [248.0, 24158.909090909096], [249.0, 32102.049019607846], [250.0, 31956.107509881385], [1.0, 1025.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[231.277066666667, 30851.470133333354]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 492.9166666666667, "minX": 1.60842438E12, "maxY": 2148228.9833333334, "series": [{"data": [[1.60842462E12, 1930231.8166666667], [1.60842444E12, 2135044.816666667], [1.60842474E12, 2148228.9833333334], [1.60842456E12, 2066723.45], [1.60842438E12, 1178676.1166666667], [1.60842486E12, 1982941.0], [1.60842468E12, 1699089.2], [1.6084245E12, 2141655.2], [1.6084248E12, 2059762.7166666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60842462E12, 1230.8833333333334], [1.60842444E12, 1399.8833333333334], [1.60842474E12, 1315.3833333333334], [1.60842456E12, 1332.2833333333333], [1.60842438E12, 492.9166666666667], [1.60842486E12, 892.8833333333333], [1.60842468E12, 1233.7], [1.6084245E12, 1363.2666666666667], [1.6084248E12, 1301.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842486E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16378.502857142857, "minX": 1.60842438E12, "maxY": 35681.43378995431, "series": [{"data": [[1.60842462E12, 32678.029748283774], [1.60842444E12, 30476.820925553315], [1.60842474E12, 32119.573875803006], [1.60842456E12, 32282.154334038074], [1.60842438E12, 16378.502857142857], [1.60842486E12, 25949.870662460555], [1.60842468E12, 35681.43378995431], [1.6084245E12, 31339.417355371905], [1.6084248E12, 30535.370129870123]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842486E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15931.222857142853, "minX": 1.60842438E12, "maxY": 35438.69863013701, "series": [{"data": [[1.60842462E12, 32392.407322654446], [1.60842444E12, 30200.488933601617], [1.60842474E12, 31818.6402569593], [1.60842456E12, 32012.568710359403], [1.60842438E12, 15931.222857142853], [1.60842486E12, 25564.33753943218], [1.60842468E12, 35438.69863013701], [1.6084245E12, 31067.902892561975], [1.6084248E12, 30254.536796536795]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842486E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 111.58990536277605, "minX": 1.60842438E12, "maxY": 1276.6057142857153, "series": [{"data": [[1.60842462E12, 133.96796338672758], [1.60842444E12, 232.83299798792743], [1.60842474E12, 137.2355460385439], [1.60842456E12, 126.4735729386891], [1.60842438E12, 1276.6057142857153], [1.60842486E12, 111.58990536277605], [1.60842468E12, 152.75570776255688], [1.6084245E12, 141.74380165289259], [1.6084248E12, 133.6991341991342]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842486E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1025.0, "minX": 1.60842438E12, "maxY": 60707.0, "series": [{"data": [[1.60842462E12, 58082.0], [1.60842444E12, 59516.0], [1.60842474E12, 58168.0], [1.60842456E12, 57874.0], [1.60842438E12, 33432.0], [1.60842486E12, 58420.0], [1.60842468E12, 60707.0], [1.6084245E12, 54131.0], [1.6084248E12, 56954.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60842462E12, 44474.4], [1.60842444E12, 41618.4], [1.60842474E12, 43734.000000000015], [1.60842456E12, 43099.0], [1.60842438E12, 23506.0], [1.60842486E12, 39798.0], [1.60842468E12, 49770.0], [1.6084245E12, 42066.0], [1.6084248E12, 41465.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60842462E12, 57042.48], [1.60842444E12, 53343.560000000005], [1.60842474E12, 56630.03999999998], [1.60842456E12, 56017.959999999985], [1.60842438E12, 33260.32], [1.60842486E12, 51837.799999999974], [1.60842468E12, 59440.0], [1.6084245E12, 53600.3], [1.6084248E12, 53199.799999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60842462E12, 52787.2], [1.60842444E12, 44098.6], [1.60842474E12, 51737.0], [1.60842456E12, 45818.00000000001], [1.60842438E12, 28503.799999999992], [1.60842486E12, 46390.59999999999], [1.60842468E12, 52638.5], [1.6084245E12, 43020.75], [1.6084248E12, 42842.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60842462E12, 13336.0], [1.60842444E12, 11947.0], [1.60842474E12, 14050.0], [1.60842456E12, 13577.0], [1.60842438E12, 8944.0], [1.60842486E12, 1025.0], [1.60842468E12, 14293.0], [1.6084245E12, 13301.0], [1.6084248E12, 10756.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60842462E12, 28948.0], [1.60842444E12, 27104.0], [1.60842474E12, 28441.0], [1.60842456E12, 28757.0], [1.60842438E12, 14551.0], [1.60842486E12, 23033.0], [1.60842468E12, 32106.0], [1.6084245E12, 27742.5], [1.6084248E12, 27296.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842486E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15763.0, "minX": 1.0, "maxY": 37770.5, "series": [{"data": [[2.0, 17650.0], [8.0, 27836.0], [9.0, 26612.0], [10.0, 27661.5], [11.0, 28802.0], [3.0, 21171.0], [12.0, 28501.0], [13.0, 28314.0], [14.0, 29748.0], [15.0, 28791.0], [16.0, 16242.0], [1.0, 22865.0], [4.0, 28538.0], [17.0, 28751.5], [18.0, 15763.0], [19.0, 17563.0], [5.0, 27299.0], [20.0, 28219.0], [6.0, 26479.0], [7.0, 28213.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 36437.0], [2.0, 37046.0], [9.0, 36529.0], [10.0, 37047.0], [11.0, 37643.0], [12.0, 36519.5], [3.0, 36631.0], [13.0, 36424.5], [14.0, 35825.0], [15.0, 35119.5], [16.0, 36197.0], [4.0, 36801.5], [1.0, 37770.5], [17.0, 36552.0], [18.0, 36134.0], [19.0, 32412.0], [5.0, 36357.0], [20.0, 34961.5], [6.0, 36611.0], [7.0, 36420.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 20.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15100.0, "minX": 1.0, "maxY": 37770.5, "series": [{"data": [[2.0, 17205.0], [8.0, 27452.0], [9.0, 26183.0], [10.0, 27262.0], [11.0, 28427.0], [3.0, 20776.5], [12.0, 28015.5], [13.0, 27894.0], [14.0, 29323.5], [15.0, 28333.5], [16.0, 15818.0], [1.0, 22448.0], [4.0, 28142.5], [17.0, 28326.5], [18.0, 15100.0], [19.0, 17188.0], [5.0, 26869.0], [20.0, 27786.5], [6.0, 26059.5], [7.0, 27788.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 36437.0], [2.0, 37045.0], [9.0, 36529.0], [10.0, 37046.5], [11.0, 37643.0], [12.0, 36519.0], [3.0, 36631.0], [13.0, 36424.0], [14.0, 35825.0], [15.0, 35119.5], [16.0, 36196.0], [4.0, 36801.5], [1.0, 37770.5], [17.0, 36552.0], [18.0, 36134.0], [19.0, 32411.0], [5.0, 36356.0], [20.0, 34961.5], [6.0, 36610.5], [7.0, 36420.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 20.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.4166666666666665, "minX": 1.60842438E12, "maxY": 8.283333333333333, "series": [{"data": [[1.60842462E12, 7.283333333333333], [1.60842444E12, 8.283333333333333], [1.60842474E12, 7.683333333333334], [1.60842456E12, 7.883333333333334], [1.60842438E12, 7.083333333333333], [1.60842486E12, 2.4166666666666665], [1.60842468E12, 7.3], [1.6084245E12, 8.066666666666666], [1.6084248E12, 6.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842486E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60842438E12, "maxY": 5.25, "series": [{"data": [[1.60842462E12, 4.716666666666667], [1.60842444E12, 5.216666666666667], [1.60842474E12, 5.25], [1.60842456E12, 5.05], [1.60842438E12, 2.8833333333333333], [1.60842486E12, 4.85], [1.60842468E12, 4.15], [1.6084245E12, 5.233333333333333], [1.6084248E12, 5.033333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60842462E12, 2.45], [1.60842444E12, 3.05], [1.60842474E12, 2.3333333333333335], [1.60842456E12, 2.7], [1.60842438E12, 0.03333333333333333], [1.60842486E12, 0.4166666666666667], [1.60842468E12, 2.9166666666666665], [1.6084245E12, 2.7333333333333334], [1.6084248E12, 2.566666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.60842462E12, 0.11666666666666667], [1.60842444E12, 0.016666666666666666], [1.60842474E12, 0.2], [1.60842456E12, 0.13333333333333333], [1.60842486E12, 0.016666666666666666], [1.60842468E12, 0.23333333333333334], [1.6084245E12, 0.1], [1.6084248E12, 0.1]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842486E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60842438E12, "maxY": 5.25, "series": [{"data": [[1.60842462E12, 4.716666666666667], [1.60842444E12, 5.216666666666667], [1.60842474E12, 5.25], [1.60842456E12, 5.05], [1.60842438E12, 2.8833333333333333], [1.60842486E12, 4.85], [1.60842468E12, 4.15], [1.6084245E12, 5.233333333333333], [1.6084248E12, 5.033333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60842462E12, 2.566666666666667], [1.60842444E12, 3.066666666666667], [1.60842474E12, 2.533333333333333], [1.60842456E12, 2.8333333333333335], [1.60842438E12, 0.03333333333333333], [1.60842486E12, 0.43333333333333335], [1.60842468E12, 3.15], [1.6084245E12, 2.8333333333333335], [1.6084248E12, 2.6666666666666665]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842486E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60842438E12, "maxY": 5.25, "series": [{"data": [[1.60842462E12, 4.716666666666667], [1.60842444E12, 5.216666666666667], [1.60842474E12, 5.25], [1.60842456E12, 5.05], [1.60842438E12, 2.8833333333333333], [1.60842486E12, 4.85], [1.60842468E12, 4.15], [1.6084245E12, 5.233333333333333], [1.6084248E12, 5.033333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60842462E12, 2.566666666666667], [1.60842444E12, 3.066666666666667], [1.60842474E12, 2.533333333333333], [1.60842456E12, 2.8333333333333335], [1.60842438E12, 0.03333333333333333], [1.60842486E12, 0.43333333333333335], [1.60842468E12, 3.15], [1.6084245E12, 2.8333333333333335], [1.6084248E12, 2.6666666666666665]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842486E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

