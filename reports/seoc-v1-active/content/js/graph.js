/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 895.0, "minX": 0.0, "maxY": 60921.0, "series": [{"data": [[0.0, 895.0], [0.1, 1241.0], [0.2, 1793.0], [0.3, 1982.0], [0.4, 2096.0], [0.5, 2134.0], [0.6, 2682.0], [0.7, 2794.0], [0.8, 2890.0], [0.9, 3110.0], [1.0, 3352.0], [1.1, 3666.0], [1.2, 4418.0], [1.3, 4560.0], [1.4, 4935.0], [1.5, 5553.0], [1.6, 6210.0], [1.7, 6565.0], [1.8, 6900.0], [1.9, 7141.0], [2.0, 7361.0], [2.1, 7552.0], [2.2, 7838.0], [2.3, 8227.0], [2.4, 8328.0], [2.5, 8617.0], [2.6, 8696.0], [2.7, 8738.0], [2.8, 8758.0], [2.9, 8855.0], [3.0, 8942.0], [3.1, 9037.0], [3.2, 9124.0], [3.3, 9174.0], [3.4, 9241.0], [3.5, 9287.0], [3.6, 9334.0], [3.7, 9394.0], [3.8, 9454.0], [3.9, 9488.0], [4.0, 9583.0], [4.1, 9599.0], [4.2, 9630.0], [4.3, 9691.0], [4.4, 9767.0], [4.5, 9819.0], [4.6, 9920.0], [4.7, 9948.0], [4.8, 9986.0], [4.9, 10019.0], [5.0, 10088.0], [5.1, 10173.0], [5.2, 10191.0], [5.3, 10232.0], [5.4, 10276.0], [5.5, 10316.0], [5.6, 10384.0], [5.7, 10404.0], [5.8, 10477.0], [5.9, 10539.0], [6.0, 10611.0], [6.1, 10634.0], [6.2, 10676.0], [6.3, 10717.0], [6.4, 10733.0], [6.5, 10757.0], [6.6, 10786.0], [6.7, 10817.0], [6.8, 10859.0], [6.9, 10897.0], [7.0, 10959.0], [7.1, 10988.0], [7.2, 11040.0], [7.3, 11062.0], [7.4, 11084.0], [7.5, 11116.0], [7.6, 11148.0], [7.7, 11184.0], [7.8, 11237.0], [7.9, 11307.0], [8.0, 11344.0], [8.1, 11361.0], [8.2, 11380.0], [8.3, 11420.0], [8.4, 11451.0], [8.5, 11470.0], [8.6, 11536.0], [8.7, 11585.0], [8.8, 11604.0], [8.9, 11619.0], [9.0, 11643.0], [9.1, 11667.0], [9.2, 11692.0], [9.3, 11712.0], [9.4, 11729.0], [9.5, 11749.0], [9.6, 11761.0], [9.7, 11804.0], [9.8, 11841.0], [9.9, 11873.0], [10.0, 11878.0], [10.1, 11905.0], [10.2, 11924.0], [10.3, 11928.0], [10.4, 11932.0], [10.5, 11947.0], [10.6, 11971.0], [10.7, 11981.0], [10.8, 11995.0], [10.9, 12001.0], [11.0, 12019.0], [11.1, 12040.0], [11.2, 12063.0], [11.3, 12092.0], [11.4, 12101.0], [11.5, 12116.0], [11.6, 12130.0], [11.7, 12147.0], [11.8, 12165.0], [11.9, 12168.0], [12.0, 12176.0], [12.1, 12179.0], [12.2, 12188.0], [12.3, 12208.0], [12.4, 12216.0], [12.5, 12222.0], [12.6, 12233.0], [12.7, 12256.0], [12.8, 12263.0], [12.9, 12270.0], [13.0, 12292.0], [13.1, 12305.0], [13.2, 12318.0], [13.3, 12335.0], [13.4, 12345.0], [13.5, 12355.0], [13.6, 12369.0], [13.7, 12376.0], [13.8, 12391.0], [13.9, 12405.0], [14.0, 12412.0], [14.1, 12417.0], [14.2, 12432.0], [14.3, 12443.0], [14.4, 12457.0], [14.5, 12466.0], [14.6, 12470.0], [14.7, 12476.0], [14.8, 12483.0], [14.9, 12500.0], [15.0, 12507.0], [15.1, 12526.0], [15.2, 12531.0], [15.3, 12534.0], [15.4, 12541.0], [15.5, 12551.0], [15.6, 12563.0], [15.7, 12566.0], [15.8, 12573.0], [15.9, 12578.0], [16.0, 12584.0], [16.1, 12591.0], [16.2, 12600.0], [16.3, 12611.0], [16.4, 12614.0], [16.5, 12630.0], [16.6, 12636.0], [16.7, 12639.0], [16.8, 12642.0], [16.9, 12655.0], [17.0, 12664.0], [17.1, 12674.0], [17.2, 12684.0], [17.3, 12691.0], [17.4, 12695.0], [17.5, 12703.0], [17.6, 12706.0], [17.7, 12719.0], [17.8, 12739.0], [17.9, 12746.0], [18.0, 12750.0], [18.1, 12764.0], [18.2, 12779.0], [18.3, 12797.0], [18.4, 12806.0], [18.5, 12821.0], [18.6, 12840.0], [18.7, 12847.0], [18.8, 12850.0], [18.9, 12855.0], [19.0, 12871.0], [19.1, 12879.0], [19.2, 12881.0], [19.3, 12903.0], [19.4, 12907.0], [19.5, 12917.0], [19.6, 12923.0], [19.7, 12936.0], [19.8, 12960.0], [19.9, 12965.0], [20.0, 12969.0], [20.1, 12985.0], [20.2, 13005.0], [20.3, 13016.0], [20.4, 13023.0], [20.5, 13027.0], [20.6, 13037.0], [20.7, 13058.0], [20.8, 13070.0], [20.9, 13078.0], [21.0, 13084.0], [21.1, 13091.0], [21.2, 13100.0], [21.3, 13110.0], [21.4, 13123.0], [21.5, 13129.0], [21.6, 13135.0], [21.7, 13146.0], [21.8, 13160.0], [21.9, 13181.0], [22.0, 13184.0], [22.1, 13192.0], [22.2, 13213.0], [22.3, 13228.0], [22.4, 13235.0], [22.5, 13248.0], [22.6, 13252.0], [22.7, 13256.0], [22.8, 13260.0], [22.9, 13273.0], [23.0, 13287.0], [23.1, 13299.0], [23.2, 13305.0], [23.3, 13319.0], [23.4, 13330.0], [23.5, 13336.0], [23.6, 13348.0], [23.7, 13363.0], [23.8, 13384.0], [23.9, 13399.0], [24.0, 13413.0], [24.1, 13433.0], [24.2, 13448.0], [24.3, 13471.0], [24.4, 13480.0], [24.5, 13494.0], [24.6, 13500.0], [24.7, 13539.0], [24.8, 13545.0], [24.9, 13560.0], [25.0, 13588.0], [25.1, 13636.0], [25.2, 13646.0], [25.3, 13656.0], [25.4, 13666.0], [25.5, 13699.0], [25.6, 13715.0], [25.7, 13733.0], [25.8, 13750.0], [25.9, 13770.0], [26.0, 13782.0], [26.1, 13831.0], [26.2, 13843.0], [26.3, 13857.0], [26.4, 13877.0], [26.5, 13894.0], [26.6, 13924.0], [26.7, 13945.0], [26.8, 13979.0], [26.9, 14000.0], [27.0, 14048.0], [27.1, 14059.0], [27.2, 14074.0], [27.3, 14123.0], [27.4, 14220.0], [27.5, 14244.0], [27.6, 14268.0], [27.7, 14321.0], [27.8, 14360.0], [27.9, 14382.0], [28.0, 14409.0], [28.1, 14434.0], [28.2, 14479.0], [28.3, 14524.0], [28.4, 14554.0], [28.5, 14593.0], [28.6, 14634.0], [28.7, 14646.0], [28.8, 14755.0], [28.9, 14784.0], [29.0, 14855.0], [29.1, 14945.0], [29.2, 14960.0], [29.3, 15054.0], [29.4, 15191.0], [29.5, 15298.0], [29.6, 15355.0], [29.7, 15444.0], [29.8, 15561.0], [29.9, 15604.0], [30.0, 15685.0], [30.1, 15741.0], [30.2, 15784.0], [30.3, 15816.0], [30.4, 15830.0], [30.5, 15850.0], [30.6, 16092.0], [30.7, 16178.0], [30.8, 16204.0], [30.9, 16270.0], [31.0, 16387.0], [31.1, 16506.0], [31.2, 16582.0], [31.3, 16769.0], [31.4, 17107.0], [31.5, 17299.0], [31.6, 17448.0], [31.7, 17580.0], [31.8, 17817.0], [31.9, 17887.0], [32.0, 17964.0], [32.1, 17985.0], [32.2, 18168.0], [32.3, 18242.0], [32.4, 18339.0], [32.5, 18457.0], [32.6, 18602.0], [32.7, 18688.0], [32.8, 18840.0], [32.9, 19018.0], [33.0, 19167.0], [33.1, 19254.0], [33.2, 19294.0], [33.3, 19374.0], [33.4, 19490.0], [33.5, 19608.0], [33.6, 19633.0], [33.7, 19828.0], [33.8, 19909.0], [33.9, 19947.0], [34.0, 20021.0], [34.1, 20119.0], [34.2, 20136.0], [34.3, 20153.0], [34.4, 20244.0], [34.5, 20300.0], [34.6, 20333.0], [34.7, 20386.0], [34.8, 20440.0], [34.9, 20550.0], [35.0, 20602.0], [35.1, 20649.0], [35.2, 20696.0], [35.3, 20745.0], [35.4, 20770.0], [35.5, 20790.0], [35.6, 20838.0], [35.7, 20845.0], [35.8, 20887.0], [35.9, 20906.0], [36.0, 20918.0], [36.1, 20951.0], [36.2, 20956.0], [36.3, 21001.0], [36.4, 21035.0], [36.5, 21084.0], [36.6, 21106.0], [36.7, 21134.0], [36.8, 21171.0], [36.9, 21181.0], [37.0, 21190.0], [37.1, 21225.0], [37.2, 21236.0], [37.3, 21249.0], [37.4, 21283.0], [37.5, 21297.0], [37.6, 21316.0], [37.7, 21334.0], [37.8, 21348.0], [37.9, 21361.0], [38.0, 21384.0], [38.1, 21392.0], [38.2, 21412.0], [38.3, 21419.0], [38.4, 21439.0], [38.5, 21450.0], [38.6, 21459.0], [38.7, 21491.0], [38.8, 21518.0], [38.9, 21525.0], [39.0, 21544.0], [39.1, 21555.0], [39.2, 21574.0], [39.3, 21584.0], [39.4, 21599.0], [39.5, 21616.0], [39.6, 21636.0], [39.7, 21650.0], [39.8, 21671.0], [39.9, 21690.0], [40.0, 21757.0], [40.1, 21772.0], [40.2, 21800.0], [40.3, 21818.0], [40.4, 21839.0], [40.5, 21861.0], [40.6, 21881.0], [40.7, 21915.0], [40.8, 21934.0], [40.9, 21950.0], [41.0, 21971.0], [41.1, 21975.0], [41.2, 21986.0], [41.3, 21991.0], [41.4, 22010.0], [41.5, 22051.0], [41.6, 22079.0], [41.7, 22090.0], [41.8, 22108.0], [41.9, 22127.0], [42.0, 22137.0], [42.1, 22154.0], [42.2, 22181.0], [42.3, 22208.0], [42.4, 22223.0], [42.5, 22236.0], [42.6, 22266.0], [42.7, 22284.0], [42.8, 22303.0], [42.9, 22309.0], [43.0, 22326.0], [43.1, 22338.0], [43.2, 22384.0], [43.3, 22412.0], [43.4, 22413.0], [43.5, 22427.0], [43.6, 22459.0], [43.7, 22467.0], [43.8, 22478.0], [43.9, 22496.0], [44.0, 22507.0], [44.1, 22526.0], [44.2, 22536.0], [44.3, 22549.0], [44.4, 22573.0], [44.5, 22601.0], [44.6, 22625.0], [44.7, 22651.0], [44.8, 22680.0], [44.9, 22724.0], [45.0, 22750.0], [45.1, 22780.0], [45.2, 22805.0], [45.3, 22818.0], [45.4, 22845.0], [45.5, 22861.0], [45.6, 22876.0], [45.7, 22897.0], [45.8, 22913.0], [45.9, 22932.0], [46.0, 22962.0], [46.1, 22977.0], [46.2, 22993.0], [46.3, 23026.0], [46.4, 23082.0], [46.5, 23102.0], [46.6, 23135.0], [46.7, 23148.0], [46.8, 23183.0], [46.9, 23233.0], [47.0, 23250.0], [47.1, 23274.0], [47.2, 23289.0], [47.3, 23320.0], [47.4, 23358.0], [47.5, 23401.0], [47.6, 23421.0], [47.7, 23452.0], [47.8, 23504.0], [47.9, 23582.0], [48.0, 23610.0], [48.1, 23627.0], [48.2, 23676.0], [48.3, 23687.0], [48.4, 23718.0], [48.5, 23761.0], [48.6, 23785.0], [48.7, 23829.0], [48.8, 23873.0], [48.9, 23910.0], [49.0, 23947.0], [49.1, 23970.0], [49.2, 24005.0], [49.3, 24033.0], [49.4, 24071.0], [49.5, 24082.0], [49.6, 24131.0], [49.7, 24154.0], [49.8, 24252.0], [49.9, 24348.0], [50.0, 24454.0], [50.1, 24471.0], [50.2, 24565.0], [50.3, 24646.0], [50.4, 24761.0], [50.5, 24941.0], [50.6, 25016.0], [50.7, 25138.0], [50.8, 25230.0], [50.9, 25314.0], [51.0, 25595.0], [51.1, 25712.0], [51.2, 25775.0], [51.3, 25889.0], [51.4, 25950.0], [51.5, 25967.0], [51.6, 25993.0], [51.7, 26026.0], [51.8, 26239.0], [51.9, 26312.0], [52.0, 26424.0], [52.1, 26571.0], [52.2, 26632.0], [52.3, 26693.0], [52.4, 26767.0], [52.5, 26804.0], [52.6, 26998.0], [52.7, 27076.0], [52.8, 27159.0], [52.9, 27270.0], [53.0, 27335.0], [53.1, 27493.0], [53.2, 27595.0], [53.3, 27682.0], [53.4, 27719.0], [53.5, 27839.0], [53.6, 27986.0], [53.7, 28074.0], [53.8, 28237.0], [53.9, 28363.0], [54.0, 28519.0], [54.1, 28575.0], [54.2, 28772.0], [54.3, 28910.0], [54.4, 29071.0], [54.5, 29097.0], [54.6, 29276.0], [54.7, 29547.0], [54.8, 29807.0], [54.9, 29946.0], [55.0, 30080.0], [55.1, 30089.0], [55.2, 30100.0], [55.3, 30141.0], [55.4, 30178.0], [55.5, 30259.0], [55.6, 30331.0], [55.7, 30358.0], [55.8, 30391.0], [55.9, 30419.0], [56.0, 30455.0], [56.1, 30472.0], [56.2, 30501.0], [56.3, 30523.0], [56.4, 30569.0], [56.5, 30579.0], [56.6, 30632.0], [56.7, 30706.0], [56.8, 30718.0], [56.9, 30723.0], [57.0, 30793.0], [57.1, 30854.0], [57.2, 30892.0], [57.3, 30945.0], [57.4, 30978.0], [57.5, 31002.0], [57.6, 31048.0], [57.7, 31056.0], [57.8, 31115.0], [57.9, 31136.0], [58.0, 31185.0], [58.1, 31209.0], [58.2, 31245.0], [58.3, 31309.0], [58.4, 31335.0], [58.5, 31364.0], [58.6, 31379.0], [58.7, 31417.0], [58.8, 31448.0], [58.9, 31464.0], [59.0, 31498.0], [59.1, 31513.0], [59.2, 31545.0], [59.3, 31563.0], [59.4, 31624.0], [59.5, 31663.0], [59.6, 31690.0], [59.7, 31695.0], [59.8, 31733.0], [59.9, 31759.0], [60.0, 31771.0], [60.1, 31783.0], [60.2, 31805.0], [60.3, 31835.0], [60.4, 31872.0], [60.5, 31876.0], [60.6, 31926.0], [60.7, 31955.0], [60.8, 31988.0], [60.9, 32009.0], [61.0, 32031.0], [61.1, 32044.0], [61.2, 32054.0], [61.3, 32063.0], [61.4, 32097.0], [61.5, 32104.0], [61.6, 32118.0], [61.7, 32123.0], [61.8, 32139.0], [61.9, 32180.0], [62.0, 32202.0], [62.1, 32242.0], [62.2, 32255.0], [62.3, 32260.0], [62.4, 32292.0], [62.5, 32298.0], [62.6, 32305.0], [62.7, 32317.0], [62.8, 32352.0], [62.9, 32374.0], [63.0, 32384.0], [63.1, 32421.0], [63.2, 32431.0], [63.3, 32448.0], [63.4, 32474.0], [63.5, 32487.0], [63.6, 32501.0], [63.7, 32513.0], [63.8, 32540.0], [63.9, 32560.0], [64.0, 32602.0], [64.1, 32623.0], [64.2, 32640.0], [64.3, 32655.0], [64.4, 32692.0], [64.5, 32708.0], [64.6, 32731.0], [64.7, 32742.0], [64.8, 32778.0], [64.9, 32780.0], [65.0, 32814.0], [65.1, 32821.0], [65.2, 32837.0], [65.3, 32847.0], [65.4, 32903.0], [65.5, 32936.0], [65.6, 32957.0], [65.7, 32974.0], [65.8, 32986.0], [65.9, 33014.0], [66.0, 33024.0], [66.1, 33028.0], [66.2, 33052.0], [66.3, 33110.0], [66.4, 33130.0], [66.5, 33152.0], [66.6, 33166.0], [66.7, 33181.0], [66.8, 33220.0], [66.9, 33281.0], [67.0, 33323.0], [67.1, 33337.0], [67.2, 33353.0], [67.3, 33378.0], [67.4, 33415.0], [67.5, 33423.0], [67.6, 33464.0], [67.7, 33496.0], [67.8, 33530.0], [67.9, 33562.0], [68.0, 33602.0], [68.1, 33618.0], [68.2, 33639.0], [68.3, 33679.0], [68.4, 33709.0], [68.5, 33717.0], [68.6, 33751.0], [68.7, 33777.0], [68.8, 33822.0], [68.9, 33832.0], [69.0, 33859.0], [69.1, 33890.0], [69.2, 33910.0], [69.3, 33916.0], [69.4, 33935.0], [69.5, 33959.0], [69.6, 33997.0], [69.7, 34005.0], [69.8, 34015.0], [69.9, 34033.0], [70.0, 34073.0], [70.1, 34084.0], [70.2, 34102.0], [70.3, 34129.0], [70.4, 34154.0], [70.5, 34168.0], [70.6, 34195.0], [70.7, 34223.0], [70.8, 34234.0], [70.9, 34254.0], [71.0, 34284.0], [71.1, 34332.0], [71.2, 34356.0], [71.3, 34378.0], [71.4, 34383.0], [71.5, 34390.0], [71.6, 34417.0], [71.7, 34436.0], [71.8, 34457.0], [71.9, 34480.0], [72.0, 34529.0], [72.1, 34538.0], [72.2, 34562.0], [72.3, 34572.0], [72.4, 34581.0], [72.5, 34603.0], [72.6, 34621.0], [72.7, 34649.0], [72.8, 34655.0], [72.9, 34669.0], [73.0, 34689.0], [73.1, 34712.0], [73.2, 34719.0], [73.3, 34728.0], [73.4, 34745.0], [73.5, 34753.0], [73.6, 34778.0], [73.7, 34792.0], [73.8, 34804.0], [73.9, 34830.0], [74.0, 34844.0], [74.1, 34850.0], [74.2, 34853.0], [74.3, 34871.0], [74.4, 34878.0], [74.5, 34882.0], [74.6, 34889.0], [74.7, 34908.0], [74.8, 34923.0], [74.9, 34936.0], [75.0, 34946.0], [75.1, 34960.0], [75.2, 34974.0], [75.3, 34999.0], [75.4, 35018.0], [75.5, 35037.0], [75.6, 35050.0], [75.7, 35052.0], [75.8, 35062.0], [75.9, 35079.0], [76.0, 35088.0], [76.1, 35094.0], [76.2, 35114.0], [76.3, 35124.0], [76.4, 35137.0], [76.5, 35141.0], [76.6, 35147.0], [76.7, 35153.0], [76.8, 35163.0], [76.9, 35169.0], [77.0, 35181.0], [77.1, 35191.0], [77.2, 35199.0], [77.3, 35206.0], [77.4, 35222.0], [77.5, 35235.0], [77.6, 35245.0], [77.7, 35250.0], [77.8, 35259.0], [77.9, 35269.0], [78.0, 35304.0], [78.1, 35310.0], [78.2, 35321.0], [78.3, 35347.0], [78.4, 35371.0], [78.5, 35385.0], [78.6, 35396.0], [78.7, 35413.0], [78.8, 35419.0], [78.9, 35427.0], [79.0, 35436.0], [79.1, 35450.0], [79.2, 35463.0], [79.3, 35471.0], [79.4, 35488.0], [79.5, 35509.0], [79.6, 35516.0], [79.7, 35529.0], [79.8, 35544.0], [79.9, 35558.0], [80.0, 35589.0], [80.1, 35616.0], [80.2, 35632.0], [80.3, 35641.0], [80.4, 35661.0], [80.5, 35671.0], [80.6, 35688.0], [80.7, 35707.0], [80.8, 35714.0], [80.9, 35720.0], [81.0, 35729.0], [81.1, 35763.0], [81.2, 35778.0], [81.3, 35789.0], [81.4, 35803.0], [81.5, 35807.0], [81.6, 35841.0], [81.7, 35849.0], [81.8, 35852.0], [81.9, 35865.0], [82.0, 35878.0], [82.1, 35885.0], [82.2, 35894.0], [82.3, 35905.0], [82.4, 35918.0], [82.5, 35929.0], [82.6, 35940.0], [82.7, 35957.0], [82.8, 35981.0], [82.9, 35989.0], [83.0, 36016.0], [83.1, 36039.0], [83.2, 36046.0], [83.3, 36069.0], [83.4, 36078.0], [83.5, 36110.0], [83.6, 36130.0], [83.7, 36175.0], [83.8, 36196.0], [83.9, 36197.0], [84.0, 36214.0], [84.1, 36244.0], [84.2, 36277.0], [84.3, 36292.0], [84.4, 36329.0], [84.5, 36341.0], [84.6, 36367.0], [84.7, 36382.0], [84.8, 36393.0], [84.9, 36400.0], [85.0, 36418.0], [85.1, 36448.0], [85.2, 36464.0], [85.3, 36531.0], [85.4, 36543.0], [85.5, 36559.0], [85.6, 36585.0], [85.7, 36641.0], [85.8, 36657.0], [85.9, 36733.0], [86.0, 36754.0], [86.1, 36833.0], [86.2, 36911.0], [86.3, 36947.0], [86.4, 37010.0], [86.5, 37081.0], [86.6, 37199.0], [86.7, 37270.0], [86.8, 37333.0], [86.9, 37462.0], [87.0, 37523.0], [87.1, 37612.0], [87.2, 37707.0], [87.3, 37793.0], [87.4, 37881.0], [87.5, 38002.0], [87.6, 38076.0], [87.7, 38159.0], [87.8, 38344.0], [87.9, 38394.0], [88.0, 38456.0], [88.1, 38520.0], [88.2, 38573.0], [88.3, 38776.0], [88.4, 39076.0], [88.5, 39138.0], [88.6, 39390.0], [88.7, 39544.0], [88.8, 39624.0], [88.9, 39864.0], [89.0, 40061.0], [89.1, 40160.0], [89.2, 40209.0], [89.3, 40318.0], [89.4, 40438.0], [89.5, 40578.0], [89.6, 40652.0], [89.7, 40686.0], [89.8, 40711.0], [89.9, 40731.0], [90.0, 40747.0], [90.1, 40816.0], [90.2, 40880.0], [90.3, 40912.0], [90.4, 40954.0], [90.5, 40999.0], [90.6, 41036.0], [90.7, 41085.0], [90.8, 41114.0], [90.9, 41229.0], [91.0, 41261.0], [91.1, 41340.0], [91.2, 41361.0], [91.3, 41419.0], [91.4, 41457.0], [91.5, 41494.0], [91.6, 41538.0], [91.7, 41561.0], [91.8, 41612.0], [91.9, 41648.0], [92.0, 41667.0], [92.1, 41684.0], [92.2, 41719.0], [92.3, 41739.0], [92.4, 41810.0], [92.5, 41843.0], [92.6, 41848.0], [92.7, 41875.0], [92.8, 41904.0], [92.9, 41936.0], [93.0, 42007.0], [93.1, 42037.0], [93.2, 42073.0], [93.3, 42092.0], [93.4, 42118.0], [93.5, 42145.0], [93.6, 42206.0], [93.7, 42233.0], [93.8, 42347.0], [93.9, 42440.0], [94.0, 42489.0], [94.1, 42620.0], [94.2, 42642.0], [94.3, 42737.0], [94.4, 42864.0], [94.5, 42915.0], [94.6, 42925.0], [94.7, 43207.0], [94.8, 43322.0], [94.9, 43496.0], [95.0, 43629.0], [95.1, 43871.0], [95.2, 44008.0], [95.3, 44166.0], [95.4, 44408.0], [95.5, 44505.0], [95.6, 44783.0], [95.7, 45043.0], [95.8, 45209.0], [95.9, 45288.0], [96.0, 45479.0], [96.1, 45844.0], [96.2, 46485.0], [96.3, 46775.0], [96.4, 46989.0], [96.5, 47388.0], [96.6, 47563.0], [96.7, 48873.0], [96.8, 49688.0], [96.9, 50129.0], [97.0, 50379.0], [97.1, 50695.0], [97.2, 50962.0], [97.3, 51154.0], [97.4, 51318.0], [97.5, 51576.0], [97.6, 51864.0], [97.7, 52271.0], [97.8, 52600.0], [97.9, 53090.0], [98.0, 53190.0], [98.1, 53418.0], [98.2, 53849.0], [98.3, 53983.0], [98.4, 54823.0], [98.5, 55714.0], [98.6, 56168.0], [98.7, 56951.0], [98.8, 57253.0], [98.9, 59604.0], [99.0, 60130.0], [99.1, 60135.0], [99.2, 60140.0], [99.3, 60141.0], [99.4, 60146.0], [99.5, 60359.0], [99.6, 60362.0], [99.7, 60378.0], [99.8, 60397.0], [99.9, 60428.0], [100.0, 60921.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 49.0, "series": [{"data": [[32900.0, 16.0], [33700.0, 14.0], [34500.0, 21.0], [36100.0, 19.0], [35300.0, 25.0], [37700.0, 4.0], [36900.0, 8.0], [38500.0, 6.0], [39300.0, 3.0], [40100.0, 5.0], [40900.0, 11.0], [41700.0, 9.0], [42500.0, 3.0], [43300.0, 1.0], [44900.0, 3.0], [44100.0, 2.0], [45700.0, 1.0], [46500.0, 1.0], [47300.0, 1.0], [48100.0, 1.0], [49700.0, 2.0], [50500.0, 1.0], [51300.0, 3.0], [52100.0, 2.0], [56900.0, 1.0], [56100.0, 3.0], [59300.0, 1.0], [58500.0, 1.0], [60100.0, 19.0], [60900.0, 1.0], [800.0, 1.0], [900.0, 1.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [1500.0, 1.0], [1700.0, 2.0], [1900.0, 5.0], [2000.0, 3.0], [2100.0, 4.0], [2300.0, 1.0], [2200.0, 1.0], [2600.0, 1.0], [2800.0, 4.0], [2700.0, 4.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 2.0], [3300.0, 2.0], [3200.0, 2.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 1.0], [4000.0, 1.0], [4500.0, 2.0], [4400.0, 2.0], [4800.0, 2.0], [4700.0, 1.0], [5000.0, 1.0], [4900.0, 1.0], [5300.0, 1.0], [5500.0, 1.0], [5400.0, 1.0], [5600.0, 1.0], [5800.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6500.0, 2.0], [6600.0, 2.0], [6400.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7100.0, 2.0], [7000.0, 3.0], [7200.0, 1.0], [7300.0, 4.0], [7600.0, 1.0], [7500.0, 2.0], [7800.0, 1.0], [7700.0, 1.0], [8000.0, 2.0], [8100.0, 1.0], [8600.0, 5.0], [8200.0, 3.0], [9000.0, 3.0], [9200.0, 9.0], [8800.0, 6.0], [9400.0, 8.0], [9600.0, 8.0], [9800.0, 5.0], [10200.0, 8.0], [10000.0, 6.0], [10400.0, 7.0], [10600.0, 11.0], [11000.0, 11.0], [10800.0, 9.0], [11200.0, 6.0], [11600.0, 17.0], [11400.0, 11.0], [11800.0, 14.0], [12200.0, 30.0], [12000.0, 20.0], [12600.0, 48.0], [12400.0, 39.0], [13000.0, 39.0], [12800.0, 35.0], [13200.0, 38.0], [13800.0, 19.0], [13400.0, 25.0], [13600.0, 18.0], [14000.0, 13.0], [14200.0, 11.0], [14600.0, 9.0], [14800.0, 5.0], [14400.0, 9.0], [15200.0, 4.0], [15000.0, 7.0], [15600.0, 4.0], [15800.0, 9.0], [15400.0, 4.0], [16200.0, 7.0], [16000.0, 3.0], [16400.0, 2.0], [17200.0, 2.0], [18400.0, 3.0], [17600.0, 1.0], [19200.0, 7.0], [18800.0, 3.0], [20000.0, 4.0], [19600.0, 5.0], [20400.0, 5.0], [21200.0, 18.0], [20800.0, 14.0], [22400.0, 28.0], [22000.0, 14.0], [21600.0, 20.0], [23200.0, 16.0], [22800.0, 19.0], [23600.0, 15.0], [24400.0, 8.0], [24000.0, 13.0], [25200.0, 4.0], [24800.0, 1.0], [26000.0, 4.0], [25600.0, 3.0], [26400.0, 1.0], [26800.0, 4.0], [27600.0, 5.0], [27200.0, 5.0], [28000.0, 4.0], [28400.0, 3.0], [28800.0, 2.0], [29200.0, 4.0], [29600.0, 1.0], [30000.0, 10.0], [30400.0, 11.0], [31600.0, 13.0], [30800.0, 6.0], [31200.0, 8.0], [32000.0, 21.0], [32400.0, 19.0], [32800.0, 17.0], [33600.0, 15.0], [34400.0, 14.0], [36800.0, 4.0], [36000.0, 20.0], [35200.0, 27.0], [38400.0, 4.0], [37600.0, 5.0], [40000.0, 3.0], [40800.0, 5.0], [39200.0, 2.0], [41600.0, 12.0], [42400.0, 5.0], [43200.0, 3.0], [44000.0, 3.0], [46400.0, 2.0], [45600.0, 1.0], [48800.0, 1.0], [50400.0, 2.0], [49600.0, 1.0], [51200.0, 2.0], [52800.0, 1.0], [55200.0, 1.0], [53600.0, 1.0], [56800.0, 2.0], [33100.0, 18.0], [34700.0, 27.0], [33900.0, 17.0], [36300.0, 20.0], [35500.0, 22.0], [37100.0, 4.0], [38700.0, 3.0], [37900.0, 3.0], [39500.0, 2.0], [40300.0, 4.0], [41900.0, 8.0], [41100.0, 6.0], [42700.0, 2.0], [44300.0, 1.0], [43500.0, 1.0], [45900.0, 1.0], [46700.0, 3.0], [45100.0, 2.0], [47500.0, 3.0], [48300.0, 1.0], [50700.0, 1.0], [49900.0, 1.0], [53100.0, 4.0], [51500.0, 3.0], [54700.0, 1.0], [53900.0, 2.0], [60300.0, 15.0], [16500.0, 4.0], [16900.0, 3.0], [17300.0, 2.0], [17700.0, 2.0], [18100.0, 3.0], [18500.0, 2.0], [19300.0, 5.0], [18900.0, 1.0], [20100.0, 10.0], [19700.0, 2.0], [21300.0, 23.0], [20900.0, 15.0], [20500.0, 5.0], [22500.0, 19.0], [22100.0, 19.0], [21700.0, 9.0], [23300.0, 9.0], [22900.0, 20.0], [23700.0, 9.0], [24500.0, 2.0], [24100.0, 8.0], [24900.0, 3.0], [25300.0, 1.0], [25700.0, 6.0], [26500.0, 6.0], [26100.0, 1.0], [26900.0, 2.0], [27300.0, 3.0], [28500.0, 4.0], [28100.0, 2.0], [27700.0, 4.0], [28900.0, 3.0], [30100.0, 10.0], [29700.0, 2.0], [30500.0, 15.0], [31700.0, 17.0], [31300.0, 13.0], [30900.0, 8.0], [32500.0, 17.0], [32100.0, 21.0], [33000.0, 18.0], [34600.0, 22.0], [33800.0, 15.0], [35400.0, 32.0], [36200.0, 13.0], [37000.0, 5.0], [38600.0, 2.0], [37800.0, 4.0], [40200.0, 3.0], [39400.0, 1.0], [41000.0, 8.0], [41800.0, 16.0], [42600.0, 7.0], [44200.0, 2.0], [45000.0, 2.0], [43400.0, 4.0], [45800.0, 1.0], [47400.0, 1.0], [50600.0, 1.0], [52200.0, 2.0], [53000.0, 1.0], [53800.0, 3.0], [57000.0, 2.0], [60200.0, 1.0], [33300.0, 13.0], [34100.0, 17.0], [34900.0, 25.0], [36500.0, 13.0], [35700.0, 24.0], [37300.0, 4.0], [38900.0, 1.0], [38100.0, 2.0], [40500.0, 6.0], [39700.0, 1.0], [42900.0, 7.0], [41300.0, 7.0], [42100.0, 9.0], [43700.0, 2.0], [44500.0, 1.0], [46900.0, 1.0], [46100.0, 1.0], [45300.0, 1.0], [49300.0, 1.0], [50900.0, 1.0], [50100.0, 1.0], [53300.0, 1.0], [56500.0, 1.0], [57300.0, 1.0], [55700.0, 1.0], [60500.0, 1.0], [8300.0, 3.0], [8700.0, 8.0], [8500.0, 1.0], [9100.0, 5.0], [8900.0, 4.0], [9700.0, 5.0], [9500.0, 7.0], [9300.0, 6.0], [9900.0, 10.0], [10100.0, 8.0], [10500.0, 6.0], [10700.0, 14.0], [10300.0, 8.0], [10900.0, 9.0], [11100.0, 11.0], [11700.0, 17.0], [11500.0, 8.0], [11300.0, 14.0], [11900.0, 29.0], [12100.0, 34.0], [12300.0, 29.0], [12700.0, 32.0], [12500.0, 49.0], [13300.0, 30.0], [13100.0, 35.0], [12900.0, 33.0], [13700.0, 18.0], [13500.0, 17.0], [14300.0, 11.0], [13900.0, 14.0], [14100.0, 6.0], [14700.0, 6.0], [14500.0, 11.0], [14900.0, 6.0], [15300.0, 4.0], [15100.0, 1.0], [15700.0, 10.0], [15500.0, 6.0], [16100.0, 6.0], [16300.0, 3.0], [15900.0, 1.0], [17400.0, 2.0], [17800.0, 5.0], [18200.0, 5.0], [19400.0, 4.0], [19000.0, 2.0], [18600.0, 5.0], [20200.0, 6.0], [19800.0, 3.0], [20600.0, 8.0], [21000.0, 10.0], [21400.0, 22.0], [21800.0, 19.0], [22200.0, 21.0], [22600.0, 14.0], [23000.0, 9.0], [23400.0, 11.0], [23800.0, 9.0], [24200.0, 4.0], [25000.0, 5.0], [24600.0, 5.0], [25400.0, 2.0], [26600.0, 6.0], [26200.0, 4.0], [25800.0, 3.0], [27400.0, 3.0], [27000.0, 4.0], [27800.0, 4.0], [28600.0, 1.0], [28200.0, 2.0], [29400.0, 2.0], [29000.0, 5.0], [30600.0, 5.0], [30200.0, 3.0], [29800.0, 3.0], [31400.0, 14.0], [31000.0, 13.0], [31800.0, 14.0], [32200.0, 19.0], [32600.0, 16.0], [33200.0, 7.0], [34800.0, 32.0], [34000.0, 21.0], [36400.0, 16.0], [35600.0, 23.0], [37200.0, 6.0], [38800.0, 1.0], [38000.0, 6.0], [39600.0, 5.0], [40400.0, 2.0], [42000.0, 12.0], [41200.0, 7.0], [42800.0, 6.0], [44400.0, 4.0], [43600.0, 3.0], [45200.0, 5.0], [46800.0, 1.0], [50800.0, 1.0], [53200.0, 1.0], [51600.0, 1.0], [52400.0, 2.0], [54000.0, 1.0], [54800.0, 2.0], [55600.0, 1.0], [57200.0, 1.0], [60400.0, 3.0], [59600.0, 1.0], [33500.0, 11.0], [34300.0, 19.0], [35900.0, 26.0], [36700.0, 8.0], [35100.0, 40.0], [38300.0, 8.0], [37500.0, 3.0], [39100.0, 2.0], [40700.0, 12.0], [39900.0, 2.0], [41500.0, 10.0], [42300.0, 4.0], [44700.0, 3.0], [43900.0, 2.0], [43100.0, 1.0], [47100.0, 2.0], [46300.0, 1.0], [45500.0, 1.0], [50300.0, 3.0], [49500.0, 1.0], [51100.0, 3.0], [51900.0, 1.0], [55900.0, 1.0], [16700.0, 4.0], [17100.0, 3.0], [17900.0, 9.0], [17500.0, 3.0], [18300.0, 3.0], [19100.0, 3.0], [18700.0, 2.0], [19500.0, 2.0], [19900.0, 7.0], [20300.0, 9.0], [21500.0, 26.0], [20700.0, 12.0], [21100.0, 18.0], [22300.0, 16.0], [21900.0, 25.0], [23500.0, 7.0], [22700.0, 13.0], [23100.0, 13.0], [23900.0, 12.0], [24300.0, 5.0], [25100.0, 4.0], [25500.0, 2.0], [24700.0, 2.0], [25900.0, 12.0], [26300.0, 4.0], [27500.0, 4.0], [26700.0, 4.0], [27100.0, 4.0], [27900.0, 2.0], [28300.0, 3.0], [28700.0, 4.0], [29500.0, 2.0], [30300.0, 12.0], [30700.0, 14.0], [29900.0, 2.0], [31500.0, 13.0], [31100.0, 11.0], [31900.0, 13.0], [32300.0, 20.0], [32700.0, 19.0], [34200.0, 15.0], [33400.0, 15.0], [35000.0, 32.0], [35800.0, 35.0], [36600.0, 8.0], [37400.0, 4.0], [38200.0, 1.0], [40600.0, 7.0], [39800.0, 1.0], [39000.0, 2.0], [42200.0, 8.0], [41400.0, 10.0], [43800.0, 2.0], [47000.0, 1.0], [45400.0, 2.0], [47800.0, 1.0], [50200.0, 1.0], [51000.0, 1.0], [51800.0, 2.0], [52600.0, 3.0], [53400.0, 3.0], [60600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2908.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2908.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 837.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 40.27884615384616, "minX": 1.60842786E12, "maxY": 250.0, "series": [{"data": [[1.6084281E12, 250.0], [1.60842792E12, 236.8336842105263], [1.60842798E12, 250.0], [1.60842828E12, 145.0213270142181], [1.60842786E12, 69.2340425531915], [1.60842834E12, 40.27884615384616], [1.60842816E12, 246.58545454545472], [1.60842822E12, 222.28917910447763], [1.60842804E12, 250.0]], "isOverall": false, "label": "SEOC_Active_Thread_Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842834E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 895.0, "minX": 1.0, "maxY": 47522.0, "series": [{"data": [[2.0, 983.0], [3.0, 1241.0], [4.0, 1785.0], [5.0, 1793.0], [6.0, 2028.0], [7.0, 2268.0], [8.0, 2739.0], [9.0, 2766.0], [10.0, 3508.0], [11.0, 2811.0], [12.0, 4098.0], [13.0, 3758.0], [14.0, 3832.0], [15.0, 4323.666666666667], [16.0, 4418.0], [17.0, 4468.0], [18.0, 5641.0], [19.0, 7579.0], [20.0, 6675.0], [21.0, 5919.0], [22.0, 14306.5], [23.0, 6441.0], [24.0, 6661.0], [25.0, 8737.0], [26.0, 7058.0], [27.0, 9926.0], [28.0, 11370.0], [29.0, 14487.0], [30.0, 7309.0], [31.0, 15562.5], [33.0, 23151.5], [32.0, 14524.0], [35.0, 5457.6], [34.0, 8227.0], [36.0, 4298.166666666667], [37.0, 6152.0], [39.0, 17887.0], [38.0, 11098.0], [40.0, 6168.5], [41.0, 10302.0], [43.0, 16706.0], [42.0, 12062.0], [45.0, 29201.0], [44.0, 13480.0], [46.0, 7351.5], [47.0, 11588.5], [48.0, 7621.0], [49.0, 26688.0], [51.0, 16003.0], [50.0, 24128.0], [53.0, 12871.0], [52.0, 31699.666666666668], [55.0, 6414.5], [54.0, 24141.0], [56.0, 9005.2], [57.0, 7256.5], [58.0, 7573.666666666667], [59.0, 12962.0], [60.0, 6809.0], [61.0, 9895.0], [62.0, 15618.666666666666], [63.0, 14360.0], [64.0, 15225.0], [67.0, 10819.0], [66.0, 11756.0], [65.0, 11953.0], [71.0, 10243.0], [70.0, 15387.333333333334], [69.0, 11084.0], [68.0, 10897.0], [72.0, 11426.0], [75.0, 28613.5], [74.0, 36543.0], [73.0, 26033.0], [78.0, 6858.5], [79.0, 10763.0], [77.0, 22324.0], [76.0, 25287.0], [83.0, 17648.5], [82.0, 16759.666666666668], [81.0, 12574.0], [80.0, 22682.5], [85.0, 5599.333333333334], [87.0, 20396.5], [86.0, 12208.5], [84.0, 23000.333333333332], [89.0, 10555.666666666668], [91.0, 12371.0], [90.0, 12426.0], [88.0, 12710.5], [95.0, 10981.0], [94.0, 36839.0], [93.0, 26457.833333333332], [92.0, 26388.0], [96.0, 10620.25], [99.0, 17875.0], [98.0, 9842.5], [97.0, 26809.0], [103.0, 19177.399999999998], [102.0, 23554.6], [101.0, 12781.0], [100.0, 18954.2], [104.0, 17193.6], [105.0, 17131.75], [106.0, 11149.0], [107.0, 13585.5], [108.0, 14455.5], [109.0, 12830.333333333334], [110.0, 9104.0], [111.0, 13393.5], [113.0, 20347.624999999996], [115.0, 28968.5], [114.0, 14092.0], [112.0, 18085.875], [116.0, 16163.5], [117.0, 18653.8], [119.0, 25816.25], [118.0, 17008.5], [123.0, 39076.0], [122.0, 13845.0], [121.0, 22147.0], [120.0, 38661.0], [125.0, 20507.333333333332], [127.0, 9707.333333333334], [126.0, 14639.5], [124.0, 20477.0], [131.0, 18958.0], [133.0, 14059.5], [135.0, 13676.5], [134.0, 30029.0], [132.0, 21528.375000000004], [130.0, 25578.333333333332], [129.0, 21241.5], [128.0, 21588.0], [136.0, 12637.0], [139.0, 24352.833333333336], [140.0, 27143.000000000004], [141.0, 15512.5], [142.0, 26060.14285714286], [143.0, 20384.0], [138.0, 27078.0], [137.0, 24263.0], [145.0, 22675.333333333332], [148.0, 20697.666666666664], [149.0, 27020.4], [150.0, 26391.2], [151.0, 22869.6], [147.0, 33350.5], [146.0, 26776.375], [144.0, 26112.5], [152.0, 23339.0], [154.0, 25044.75], [159.0, 27623.25], [158.0, 32771.88888888889], [157.0, 20582.0], [156.0, 30184.0], [155.0, 26556.666666666668], [153.0, 27906.666666666668], [164.0, 29714.0], [165.0, 15661.0], [166.0, 15173.666666666666], [167.0, 28440.0], [163.0, 34153.4], [162.0, 27224.909090909092], [161.0, 30652.75], [160.0, 32423.5], [168.0, 20828.571428571428], [172.0, 23181.8], [174.0, 23058.333333333332], [175.0, 32642.78571428572], [173.0, 22109.0], [171.0, 28367.5], [170.0, 35264.333333333336], [169.0, 25033.666666666668], [179.0, 30217.666666666668], [181.0, 28593.166666666668], [182.0, 17151.5], [183.0, 26480.25], [180.0, 27802.6], [178.0, 23801.8], [177.0, 22012.666666666668], [176.0, 24771.0], [190.0, 25225.333333333332], [191.0, 33767.8125], [189.0, 40692.375], [188.0, 26744.0], [187.0, 37384.71428571428], [186.0, 24969.0], [185.0, 32375.0], [184.0, 47522.0], [195.0, 32914.75], [198.0, 9245.5], [197.0, 21396.5], [196.0, 28795.142857142855], [194.0, 24445.166666666668], [193.0, 32638.75], [192.0, 21562.0], [200.0, 26085.3], [203.0, 21560.0], [204.0, 26512.0], [205.0, 28614.428571428572], [207.0, 13273.0], [206.0, 22674.0], [202.0, 25920.444444444445], [201.0, 21605.5], [208.0, 20354.333333333336], [210.0, 26468.333333333332], [212.0, 17038.333333333336], [213.0, 9823.0], [214.0, 20325.0], [215.0, 20799.5], [211.0, 31990.2], [209.0, 33688.0], [216.0, 22856.095238095233], [219.0, 19150.777777777774], [220.0, 22758.222222222223], [221.0, 26418.428571428572], [222.0, 26450.0], [223.0, 25525.41935483871], [218.0, 22905.375], [217.0, 9143.666666666666], [224.0, 24375.608695652172], [227.0, 23306.354838709678], [228.0, 18680.714285714286], [229.0, 23447.333333333332], [231.0, 23106.72], [230.0, 23469.333333333332], [226.0, 31505.0], [225.0, 23883.29166666667], [235.0, 28150.210526315786], [238.0, 23370.75], [239.0, 24542.11627906977], [237.0, 26711.205479452055], [236.0, 29600.11111111111], [234.0, 26500.0], [233.0, 20979.307692307695], [232.0, 24120.80555555556], [240.0, 21158.14285714286], [242.0, 27144.807692307688], [244.0, 23709.0], [246.0, 27892.333333333332], [247.0, 26015.520000000004], [245.0, 27870.258064516132], [243.0, 29036.000000000007], [241.0, 12490.0], [250.0, 27389.600288600286], [249.0, 25886.058479532156], [248.0, 27194.6224489796], [1.0, 895.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[223.9752000000002, 25881.832266666628]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 132.38333333333333, "minX": 1.60842786E12, "maxY": 1459258.6333333333, "series": [{"data": [[1.6084281E12, 1459258.6333333333], [1.60842792E12, 1379338.4166666667], [1.60842798E12, 1218941.2166666666], [1.60842828E12, 1245097.8833333333], [1.60842786E12, 161547.21666666667], [1.60842834E12, 357465.7166666667], [1.60842816E12, 1442027.6833333333], [1.60842822E12, 1335697.1], [1.60842804E12, 1424866.7166666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6084281E12, 1574.5166666666667], [1.60842792E12, 1337.9166666666667], [1.60842798E12, 1433.6833333333334], [1.60842828E12, 1188.6333333333334], [1.60842786E12, 132.38333333333333], [1.60842834E12, 292.93333333333334], [1.60842816E12, 1549.1666666666667], [1.60842822E12, 1509.7333333333333], [1.60842804E12, 1543.5333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842834E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3857.72340425532, "minX": 1.60842786E12, "maxY": 30340.654223968566, "series": [{"data": [[1.6084281E12, 27375.606440071566], [1.60842792E12, 20856.48210526314], [1.60842798E12, 30340.654223968566], [1.60842828E12, 27133.924170616137], [1.60842786E12, 3857.72340425532], [1.60842834E12, 12656.173076923074], [1.60842816E12, 26698.578181818175], [1.60842822E12, 25580.65858208955], [1.60842804E12, 27482.049270073003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842834E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3583.106382978723, "minX": 1.60842786E12, "maxY": 30091.428290766227, "series": [{"data": [[1.6084281E12, 27132.604651162816], [1.60842792E12, 20563.141052631567], [1.60842798E12, 30091.428290766227], [1.60842828E12, 26861.625592417033], [1.60842786E12, 3583.106382978723], [1.60842834E12, 12340.15384615385], [1.60842816E12, 26454.412727272716], [1.60842822E12, 25350.361940298484], [1.60842804E12, 27238.58759124088]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842834E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 54.09615384615386, "minX": 1.60842786E12, "maxY": 1152.9574468085107, "series": [{"data": [[1.6084281E12, 110.08944543828261], [1.60842792E12, 687.4252631578953], [1.60842798E12, 121.14145383104125], [1.60842828E12, 116.70142180094787], [1.60842786E12, 1152.9574468085107], [1.60842834E12, 54.09615384615386], [1.60842816E12, 104.76727272727267], [1.60842822E12, 103.13059701492537], [1.60842804E12, 107.68248175182467]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842834E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 895.0, "minX": 1.60842786E12, "maxY": 60921.0, "series": [{"data": [[1.6084281E12, 53210.0], [1.60842792E12, 47518.0], [1.60842798E12, 60921.0], [1.60842828E12, 57253.0], [1.60842786E12, 8683.0], [1.60842834E12, 39235.0], [1.60842816E12, 60211.0], [1.60842822E12, 53983.0], [1.60842804E12, 60524.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6084281E12, 41809.5], [1.60842792E12, 33342.6], [1.60842798E12, 41969.0], [1.60842828E12, 39404.6], [1.60842786E12, 7171.6], [1.60842834E12, 24393.5], [1.60842816E12, 41101.0], [1.60842822E12, 40672.6], [1.60842804E12, 41852.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6084281E12, 52102.25], [1.60842792E12, 44238.40000000001], [1.60842798E12, 55328.69999999997], [1.60842828E12, 56410.350000000006], [1.60842786E12, 8683.0], [1.60842834E12, 39173.950000000004], [1.60842816E12, 51607.4], [1.60842822E12, 51166.080000000016], [1.60842804E12, 55554.60000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6084281E12, 42670.5], [1.60842792E12, 36352.39999999999], [1.60842798E12, 46663.25], [1.60842828E12, 44955.34999999996], [1.60842786E12, 8509.599999999999], [1.60842834E12, 29789.75], [1.60842816E12, 42037.0], [1.60842822E12, 41866.9], [1.60842804E12, 44031.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6084281E12, 11380.0], [1.60842792E12, 5836.0], [1.60842798E12, 10874.0], [1.60842828E12, 7008.0], [1.60842786E12, 1164.0], [1.60842834E12, 895.0], [1.60842816E12, 11377.0], [1.60842822E12, 8121.0], [1.60842804E12, 10962.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6084281E12, 22298.5], [1.60842792E12, 14802.0], [1.60842798E12, 25664.0], [1.60842828E12, 24483.5], [1.60842786E12, 3110.0], [1.60842834E12, 11357.0], [1.60842816E12, 21975.0], [1.60842822E12, 20626.5], [1.60842804E12, 22464.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842834E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16032.5, "minX": 1.0, "maxY": 37080.0, "series": [{"data": [[2.0, 20669.5], [8.0, 21364.0], [9.0, 21459.0], [10.0, 21328.5], [11.0, 20964.0], [12.0, 21297.0], [3.0, 25993.0], [13.0, 21991.0], [14.0, 22120.0], [15.0, 20789.0], [4.0, 19608.0], [1.0, 16032.5], [16.0, 17871.5], [17.0, 24491.0], [18.0, 23872.0], [19.0, 25534.5], [5.0, 20218.0], [20.0, 22284.0], [21.0, 25989.0], [6.0, 21253.0], [7.0, 22496.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 35371.0], [2.0, 36047.0], [9.0, 35451.5], [10.0, 35317.5], [11.0, 34868.0], [12.0, 35162.0], [3.0, 33560.5], [13.0, 35316.5], [14.0, 35490.0], [15.0, 35450.0], [4.0, 34640.0], [16.0, 35409.5], [1.0, 36096.0], [17.0, 33766.5], [18.0, 35503.5], [19.0, 32479.5], [5.0, 34978.5], [20.0, 34970.0], [21.0, 37080.0], [6.0, 35137.0], [7.0, 35046.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15703.0, "minX": 1.0, "maxY": 37079.0, "series": [{"data": [[2.0, 20358.5], [8.0, 21034.0], [9.0, 21035.0], [10.0, 20997.5], [11.0, 20669.0], [12.0, 20789.0], [3.0, 25666.0], [13.0, 21660.0], [14.0, 21790.5], [15.0, 20483.0], [4.0, 19262.0], [1.0, 15703.0], [16.0, 17508.0], [17.0, 24199.0], [18.0, 23546.5], [19.0, 25204.5], [5.0, 19920.0], [20.0, 21955.0], [21.0, 25649.0], [6.0, 20921.0], [7.0, 22163.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 35370.0], [2.0, 36047.0], [9.0, 35451.0], [10.0, 35316.5], [11.0, 34868.0], [12.0, 35162.0], [3.0, 33560.0], [13.0, 35316.0], [14.0, 35490.0], [15.0, 35449.0], [4.0, 34639.0], [16.0, 35409.0], [1.0, 36095.5], [17.0, 33766.0], [18.0, 35503.0], [19.0, 32479.0], [5.0, 34978.5], [20.0, 34958.0], [21.0, 37079.0], [6.0, 35127.0], [7.0, 35046.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.60842786E12, "maxY": 10.2, "series": [{"data": [[1.6084281E12, 9.316666666666666], [1.60842792E12, 10.2], [1.60842798E12, 8.483333333333333], [1.60842828E12, 5.016666666666667], [1.60842786E12, 2.6666666666666665], [1.60842834E12, 0.5166666666666667], [1.60842816E12, 8.95], [1.60842822E12, 8.216666666666667], [1.60842804E12, 9.133333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842834E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.60842786E12, "maxY": 7.066666666666666, "series": [{"data": [[1.6084281E12, 7.066666666666666], [1.60842792E12, 6.683333333333334], [1.60842798E12, 5.9], [1.60842828E12, 6.033333333333333], [1.60842786E12, 0.7833333333333333], [1.60842834E12, 1.7333333333333334], [1.60842816E12, 6.983333333333333], [1.60842822E12, 6.466666666666667], [1.60842804E12, 6.9]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6084281E12, 2.15], [1.60842792E12, 1.2333333333333334], [1.60842798E12, 2.4833333333333334], [1.60842828E12, 0.95], [1.60842816E12, 2.066666666666667], [1.60842822E12, 2.35], [1.60842804E12, 2.1166666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6084281E12, 0.1], [1.60842798E12, 0.1], [1.60842828E12, 0.05], [1.60842816E12, 0.11666666666666667], [1.60842822E12, 0.11666666666666667], [1.60842804E12, 0.11666666666666667]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842834E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7833333333333333, "minX": 1.60842786E12, "maxY": 7.066666666666666, "series": [{"data": [[1.6084281E12, 7.066666666666666], [1.60842792E12, 6.683333333333334], [1.60842798E12, 5.9], [1.60842828E12, 6.033333333333333], [1.60842786E12, 0.7833333333333333], [1.60842834E12, 1.7333333333333334], [1.60842816E12, 6.983333333333333], [1.60842822E12, 6.466666666666667], [1.60842804E12, 6.9]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6084281E12, 2.25], [1.60842792E12, 1.2333333333333334], [1.60842798E12, 2.5833333333333335], [1.60842828E12, 1.0], [1.60842816E12, 2.183333333333333], [1.60842822E12, 2.466666666666667], [1.60842804E12, 2.2333333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842834E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7833333333333333, "minX": 1.60842786E12, "maxY": 7.066666666666666, "series": [{"data": [[1.6084281E12, 7.066666666666666], [1.60842792E12, 6.683333333333334], [1.60842798E12, 5.9], [1.60842828E12, 6.033333333333333], [1.60842786E12, 0.7833333333333333], [1.60842834E12, 1.7333333333333334], [1.60842816E12, 6.983333333333333], [1.60842822E12, 6.466666666666667], [1.60842804E12, 6.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6084281E12, 2.25], [1.60842792E12, 1.2333333333333334], [1.60842798E12, 2.5833333333333335], [1.60842828E12, 1.0], [1.60842816E12, 2.183333333333333], [1.60842822E12, 2.466666666666667], [1.60842804E12, 2.2333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842834E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

