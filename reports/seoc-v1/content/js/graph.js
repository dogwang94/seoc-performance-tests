/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 30503.0, "minX": 0.0, "maxY": 64658.0, "series": [{"data": [[0.0, 30503.0], [0.1, 30547.0], [0.2, 31055.0], [0.3, 31302.0], [0.4, 31463.0], [0.5, 31572.0], [0.6, 31760.0], [0.7, 31936.0], [0.8, 32127.0], [0.9, 32167.0], [1.0, 32327.0], [1.1, 32499.0], [1.2, 32596.0], [1.3, 32632.0], [1.4, 32660.0], [1.5, 32784.0], [1.6, 32871.0], [1.7, 32917.0], [1.8, 32997.0], [1.9, 33027.0], [2.0, 33168.0], [2.1, 33250.0], [2.2, 33338.0], [2.3, 33471.0], [2.4, 33538.0], [2.5, 33706.0], [2.6, 33771.0], [2.7, 33851.0], [2.8, 33923.0], [2.9, 34077.0], [3.0, 34105.0], [3.1, 34205.0], [3.2, 34309.0], [3.3, 34383.0], [3.4, 34429.0], [3.5, 34535.0], [3.6, 34611.0], [3.7, 34697.0], [3.8, 34758.0], [3.9, 34841.0], [4.0, 34939.0], [4.1, 35046.0], [4.2, 35178.0], [4.3, 35286.0], [4.4, 35385.0], [4.5, 35502.0], [4.6, 35637.0], [4.7, 35730.0], [4.8, 35853.0], [4.9, 36032.0], [5.0, 36165.0], [5.1, 36275.0], [5.2, 36388.0], [5.3, 36444.0], [5.4, 36728.0], [5.5, 36787.0], [5.6, 36876.0], [5.7, 36924.0], [5.8, 36972.0], [5.9, 37034.0], [6.0, 37041.0], [6.1, 37124.0], [6.2, 37180.0], [6.3, 37233.0], [6.4, 37260.0], [6.5, 37318.0], [6.6, 37392.0], [6.7, 37658.0], [6.8, 37785.0], [6.9, 37941.0], [7.0, 37960.0], [7.1, 38018.0], [7.2, 38086.0], [7.3, 38121.0], [7.4, 38207.0], [7.5, 38235.0], [7.6, 38295.0], [7.7, 38337.0], [7.8, 38349.0], [7.9, 38372.0], [8.0, 38383.0], [8.1, 38391.0], [8.2, 38448.0], [8.3, 38517.0], [8.4, 38543.0], [8.5, 38554.0], [8.6, 38578.0], [8.7, 38590.0], [8.8, 38605.0], [8.9, 38617.0], [9.0, 38661.0], [9.1, 38680.0], [9.2, 38696.0], [9.3, 38738.0], [9.4, 38839.0], [9.5, 38862.0], [9.6, 38883.0], [9.7, 38914.0], [9.8, 38923.0], [9.9, 38937.0], [10.0, 38958.0], [10.1, 38967.0], [10.2, 38996.0], [10.3, 39004.0], [10.4, 39016.0], [10.5, 39029.0], [10.6, 39058.0], [10.7, 39080.0], [10.8, 39094.0], [10.9, 39118.0], [11.0, 39140.0], [11.1, 39212.0], [11.2, 39223.0], [11.3, 39230.0], [11.4, 39260.0], [11.5, 39272.0], [11.6, 39281.0], [11.7, 39291.0], [11.8, 39341.0], [11.9, 39467.0], [12.0, 39500.0], [12.1, 39555.0], [12.2, 39559.0], [12.3, 39587.0], [12.4, 39619.0], [12.5, 39631.0], [12.6, 39666.0], [12.7, 39676.0], [12.8, 39684.0], [12.9, 39705.0], [13.0, 39711.0], [13.1, 39725.0], [13.2, 39731.0], [13.3, 39740.0], [13.4, 39745.0], [13.5, 39751.0], [13.6, 39758.0], [13.7, 39794.0], [13.8, 39808.0], [13.9, 39818.0], [14.0, 39822.0], [14.1, 39832.0], [14.2, 39851.0], [14.3, 39903.0], [14.4, 39920.0], [14.5, 39949.0], [14.6, 40080.0], [14.7, 40210.0], [14.8, 40282.0], [14.9, 40381.0], [15.0, 40485.0], [15.1, 40492.0], [15.2, 40496.0], [15.3, 40504.0], [15.4, 40537.0], [15.5, 40588.0], [15.6, 40599.0], [15.7, 40612.0], [15.8, 40615.0], [15.9, 40625.0], [16.0, 40646.0], [16.1, 40659.0], [16.2, 40672.0], [16.3, 40680.0], [16.4, 40686.0], [16.5, 40712.0], [16.6, 40728.0], [16.7, 40767.0], [16.8, 40791.0], [16.9, 40832.0], [17.0, 40880.0], [17.1, 40922.0], [17.2, 40935.0], [17.3, 40944.0], [17.4, 40955.0], [17.5, 40974.0], [17.6, 40980.0], [17.7, 40986.0], [17.8, 40998.0], [17.9, 41005.0], [18.0, 41011.0], [18.1, 41035.0], [18.2, 41043.0], [18.3, 41048.0], [18.4, 41055.0], [18.5, 41061.0], [18.6, 41065.0], [18.7, 41068.0], [18.8, 41071.0], [18.9, 41077.0], [19.0, 41097.0], [19.1, 41146.0], [19.2, 41190.0], [19.3, 41216.0], [19.4, 41231.0], [19.5, 41247.0], [19.6, 41268.0], [19.7, 41329.0], [19.8, 41365.0], [19.9, 41432.0], [20.0, 41456.0], [20.1, 41491.0], [20.2, 41551.0], [20.3, 41594.0], [20.4, 41617.0], [20.5, 41663.0], [20.6, 41670.0], [20.7, 41692.0], [20.8, 41712.0], [20.9, 41754.0], [21.0, 41806.0], [21.1, 41850.0], [21.2, 41887.0], [21.3, 41919.0], [21.4, 41935.0], [21.5, 41952.0], [21.6, 41974.0], [21.7, 41992.0], [21.8, 42002.0], [21.9, 42022.0], [22.0, 42025.0], [22.1, 42053.0], [22.2, 42067.0], [22.3, 42074.0], [22.4, 42086.0], [22.5, 42094.0], [22.6, 42124.0], [22.7, 42138.0], [22.8, 42154.0], [22.9, 42176.0], [23.0, 42192.0], [23.1, 42199.0], [23.2, 42212.0], [23.3, 42239.0], [23.4, 42260.0], [23.5, 42281.0], [23.6, 42292.0], [23.7, 42319.0], [23.8, 42349.0], [23.9, 42352.0], [24.0, 42354.0], [24.1, 42360.0], [24.2, 42383.0], [24.3, 42401.0], [24.4, 42421.0], [24.5, 42450.0], [24.6, 42464.0], [24.7, 42505.0], [24.8, 42513.0], [24.9, 42538.0], [25.0, 42551.0], [25.1, 42564.0], [25.2, 42584.0], [25.3, 42602.0], [25.4, 42625.0], [25.5, 42656.0], [25.6, 42673.0], [25.7, 42681.0], [25.8, 42687.0], [25.9, 42697.0], [26.0, 42700.0], [26.1, 42706.0], [26.2, 42714.0], [26.3, 42727.0], [26.4, 42733.0], [26.5, 42744.0], [26.6, 42747.0], [26.7, 42761.0], [26.8, 42763.0], [26.9, 42767.0], [27.0, 42773.0], [27.1, 42780.0], [27.2, 42787.0], [27.3, 42793.0], [27.4, 42799.0], [27.5, 42807.0], [27.6, 42832.0], [27.7, 42844.0], [27.8, 42858.0], [27.9, 42867.0], [28.0, 42875.0], [28.1, 42892.0], [28.2, 42911.0], [28.3, 42935.0], [28.4, 42945.0], [28.5, 42956.0], [28.6, 42974.0], [28.7, 42987.0], [28.8, 42992.0], [28.9, 43005.0], [29.0, 43039.0], [29.1, 43076.0], [29.2, 43099.0], [29.3, 43271.0], [29.4, 43305.0], [29.5, 43363.0], [29.6, 43464.0], [29.7, 43483.0], [29.8, 43508.0], [29.9, 43519.0], [30.0, 43553.0], [30.1, 43580.0], [30.2, 43608.0], [30.3, 43672.0], [30.4, 43686.0], [30.5, 43737.0], [30.6, 43773.0], [30.7, 43823.0], [30.8, 43858.0], [30.9, 43910.0], [31.0, 43979.0], [31.1, 44032.0], [31.2, 44076.0], [31.3, 44104.0], [31.4, 44130.0], [31.5, 44238.0], [31.6, 44306.0], [31.7, 44367.0], [31.8, 44418.0], [31.9, 44498.0], [32.0, 44544.0], [32.1, 44566.0], [32.2, 44658.0], [32.3, 44687.0], [32.4, 44700.0], [32.5, 44730.0], [32.6, 44772.0], [32.7, 44807.0], [32.8, 44906.0], [32.9, 44998.0], [33.0, 45054.0], [33.1, 45103.0], [33.2, 45127.0], [33.3, 45155.0], [33.4, 45195.0], [33.5, 45223.0], [33.6, 45284.0], [33.7, 45321.0], [33.8, 45387.0], [33.9, 45435.0], [34.0, 45541.0], [34.1, 45625.0], [34.2, 45716.0], [34.3, 45778.0], [34.4, 45831.0], [34.5, 45897.0], [34.6, 45920.0], [34.7, 45946.0], [34.8, 45991.0], [34.9, 46055.0], [35.0, 46215.0], [35.1, 46280.0], [35.2, 46304.0], [35.3, 46417.0], [35.4, 46505.0], [35.5, 46526.0], [35.6, 46544.0], [35.7, 46598.0], [35.8, 46635.0], [35.9, 46690.0], [36.0, 46771.0], [36.1, 46835.0], [36.2, 46889.0], [36.3, 47024.0], [36.4, 47065.0], [36.5, 47080.0], [36.6, 47105.0], [36.7, 47155.0], [36.8, 47182.0], [36.9, 47197.0], [37.0, 47235.0], [37.1, 47248.0], [37.2, 47276.0], [37.3, 47300.0], [37.4, 47307.0], [37.5, 47315.0], [37.6, 47373.0], [37.7, 47405.0], [37.8, 47438.0], [37.9, 47497.0], [38.0, 47524.0], [38.1, 47542.0], [38.2, 47625.0], [38.3, 47728.0], [38.4, 47798.0], [38.5, 47817.0], [38.6, 47861.0], [38.7, 47882.0], [38.8, 47897.0], [38.9, 47913.0], [39.0, 47958.0], [39.1, 47964.0], [39.2, 47997.0], [39.3, 48053.0], [39.4, 48090.0], [39.5, 48190.0], [39.6, 48257.0], [39.7, 48301.0], [39.8, 48327.0], [39.9, 48386.0], [40.0, 48403.0], [40.1, 48446.0], [40.2, 48502.0], [40.3, 48555.0], [40.4, 48584.0], [40.5, 48604.0], [40.6, 48687.0], [40.7, 48810.0], [40.8, 48872.0], [40.9, 48908.0], [41.0, 49034.0], [41.1, 49104.0], [41.2, 49162.0], [41.3, 49255.0], [41.4, 49396.0], [41.5, 49454.0], [41.6, 49505.0], [41.7, 49513.0], [41.8, 49527.0], [41.9, 49546.0], [42.0, 49587.0], [42.1, 49601.0], [42.2, 49610.0], [42.3, 49623.0], [42.4, 49647.0], [42.5, 49683.0], [42.6, 49752.0], [42.7, 49804.0], [42.8, 49843.0], [42.9, 49885.0], [43.0, 49905.0], [43.1, 49942.0], [43.2, 49952.0], [43.3, 49959.0], [43.4, 49968.0], [43.5, 49977.0], [43.6, 49983.0], [43.7, 49994.0], [43.8, 49998.0], [43.9, 50017.0], [44.0, 50020.0], [44.1, 50059.0], [44.2, 50108.0], [44.3, 50132.0], [44.4, 50162.0], [44.5, 50168.0], [44.6, 50252.0], [44.7, 50291.0], [44.8, 50324.0], [44.9, 50335.0], [45.0, 50398.0], [45.1, 50412.0], [45.2, 50461.0], [45.3, 50494.0], [45.4, 50531.0], [45.5, 50544.0], [45.6, 50565.0], [45.7, 50572.0], [45.8, 50616.0], [45.9, 50642.0], [46.0, 50660.0], [46.1, 50663.0], [46.2, 50693.0], [46.3, 50739.0], [46.4, 50760.0], [46.5, 50788.0], [46.6, 50821.0], [46.7, 50880.0], [46.8, 50927.0], [46.9, 51049.0], [47.0, 51062.0], [47.1, 51125.0], [47.2, 51206.0], [47.3, 51233.0], [47.4, 51260.0], [47.5, 51284.0], [47.6, 51318.0], [47.7, 51451.0], [47.8, 51490.0], [47.9, 51596.0], [48.0, 51708.0], [48.1, 51814.0], [48.2, 51936.0], [48.3, 51949.0], [48.4, 51961.0], [48.5, 51975.0], [48.6, 51992.0], [48.7, 52005.0], [48.8, 52015.0], [48.9, 52020.0], [49.0, 52028.0], [49.1, 52045.0], [49.2, 52052.0], [49.3, 52059.0], [49.4, 52077.0], [49.5, 52109.0], [49.6, 52135.0], [49.7, 52137.0], [49.8, 52142.0], [49.9, 52152.0], [50.0, 52173.0], [50.1, 52179.0], [50.2, 52199.0], [50.3, 52216.0], [50.4, 52252.0], [50.5, 52307.0], [50.6, 52350.0], [50.7, 52363.0], [50.8, 52395.0], [50.9, 52421.0], [51.0, 52448.0], [51.1, 52469.0], [51.2, 52483.0], [51.3, 52486.0], [51.4, 52495.0], [51.5, 52511.0], [51.6, 52518.0], [51.7, 52521.0], [51.8, 52527.0], [51.9, 52544.0], [52.0, 52561.0], [52.1, 52569.0], [52.2, 52580.0], [52.3, 52589.0], [52.4, 52596.0], [52.5, 52600.0], [52.6, 52611.0], [52.7, 52615.0], [52.8, 52621.0], [52.9, 52627.0], [53.0, 52641.0], [53.1, 52645.0], [53.2, 52659.0], [53.3, 52668.0], [53.4, 52680.0], [53.5, 52691.0], [53.6, 52693.0], [53.7, 52699.0], [53.8, 52709.0], [53.9, 52721.0], [54.0, 52741.0], [54.1, 52747.0], [54.2, 52755.0], [54.3, 52778.0], [54.4, 52785.0], [54.5, 52791.0], [54.6, 52807.0], [54.7, 52853.0], [54.8, 52873.0], [54.9, 52880.0], [55.0, 52894.0], [55.1, 52917.0], [55.2, 52932.0], [55.3, 52933.0], [55.4, 52981.0], [55.5, 53018.0], [55.6, 53029.0], [55.7, 53042.0], [55.8, 53058.0], [55.9, 53061.0], [56.0, 53081.0], [56.1, 53086.0], [56.2, 53100.0], [56.3, 53103.0], [56.4, 53118.0], [56.5, 53128.0], [56.6, 53180.0], [56.7, 53198.0], [56.8, 53239.0], [56.9, 53256.0], [57.0, 53303.0], [57.1, 53324.0], [57.2, 53333.0], [57.3, 53343.0], [57.4, 53349.0], [57.5, 53358.0], [57.6, 53369.0], [57.7, 53375.0], [57.8, 53378.0], [57.9, 53387.0], [58.0, 53403.0], [58.1, 53403.0], [58.2, 53413.0], [58.3, 53422.0], [58.4, 53427.0], [58.5, 53435.0], [58.6, 53448.0], [58.7, 53463.0], [58.8, 53481.0], [58.9, 53499.0], [59.0, 53511.0], [59.1, 53546.0], [59.2, 53584.0], [59.3, 53610.0], [59.4, 53634.0], [59.5, 53644.0], [59.6, 53667.0], [59.7, 53705.0], [59.8, 53732.0], [59.9, 53774.0], [60.0, 53784.0], [60.1, 53791.0], [60.2, 53794.0], [60.3, 53802.0], [60.4, 53812.0], [60.5, 53815.0], [60.6, 53821.0], [60.7, 53833.0], [60.8, 53836.0], [60.9, 53839.0], [61.0, 53850.0], [61.1, 53854.0], [61.2, 53860.0], [61.3, 53864.0], [61.4, 53868.0], [61.5, 53877.0], [61.6, 53885.0], [61.7, 53893.0], [61.8, 53897.0], [61.9, 53911.0], [62.0, 53921.0], [62.1, 53923.0], [62.2, 53928.0], [62.3, 53936.0], [62.4, 53943.0], [62.5, 53951.0], [62.6, 53957.0], [62.7, 53966.0], [62.8, 53971.0], [62.9, 53979.0], [63.0, 53992.0], [63.1, 54001.0], [63.2, 54019.0], [63.3, 54036.0], [63.4, 54041.0], [63.5, 54056.0], [63.6, 54088.0], [63.7, 54100.0], [63.8, 54112.0], [63.9, 54122.0], [64.0, 54144.0], [64.1, 54147.0], [64.2, 54154.0], [64.3, 54167.0], [64.4, 54179.0], [64.5, 54188.0], [64.6, 54201.0], [64.7, 54231.0], [64.8, 54238.0], [64.9, 54294.0], [65.0, 54329.0], [65.1, 54367.0], [65.2, 54397.0], [65.3, 54414.0], [65.4, 54449.0], [65.5, 54469.0], [65.6, 54493.0], [65.7, 54511.0], [65.8, 54530.0], [65.9, 54577.0], [66.0, 54600.0], [66.1, 54615.0], [66.2, 54621.0], [66.3, 54635.0], [66.4, 54650.0], [66.5, 54666.0], [66.6, 54687.0], [66.7, 54693.0], [66.8, 54700.0], [66.9, 54712.0], [67.0, 54722.0], [67.1, 54728.0], [67.2, 54733.0], [67.3, 54737.0], [67.4, 54751.0], [67.5, 54755.0], [67.6, 54784.0], [67.7, 54802.0], [67.8, 54807.0], [67.9, 54816.0], [68.0, 54826.0], [68.1, 54834.0], [68.2, 54845.0], [68.3, 54856.0], [68.4, 54879.0], [68.5, 54889.0], [68.6, 54897.0], [68.7, 54905.0], [68.8, 54916.0], [68.9, 54920.0], [69.0, 54927.0], [69.1, 54933.0], [69.2, 54936.0], [69.3, 54937.0], [69.4, 54947.0], [69.5, 54954.0], [69.6, 54971.0], [69.7, 54974.0], [69.8, 54986.0], [69.9, 54993.0], [70.0, 55003.0], [70.1, 55005.0], [70.2, 55011.0], [70.3, 55017.0], [70.4, 55024.0], [70.5, 55033.0], [70.6, 55038.0], [70.7, 55044.0], [70.8, 55048.0], [70.9, 55050.0], [71.0, 55067.0], [71.1, 55086.0], [71.2, 55139.0], [71.3, 55155.0], [71.4, 55163.0], [71.5, 55217.0], [71.6, 55233.0], [71.7, 55255.0], [71.8, 55262.0], [71.9, 55285.0], [72.0, 55355.0], [72.1, 55362.0], [72.2, 55371.0], [72.3, 55380.0], [72.4, 55399.0], [72.5, 55412.0], [72.6, 55443.0], [72.7, 55470.0], [72.8, 55477.0], [72.9, 55484.0], [73.0, 55526.0], [73.1, 55551.0], [73.2, 55566.0], [73.3, 55576.0], [73.4, 55592.0], [73.5, 55615.0], [73.6, 55621.0], [73.7, 55628.0], [73.8, 55656.0], [73.9, 55698.0], [74.0, 55732.0], [74.1, 55757.0], [74.2, 55798.0], [74.3, 55815.0], [74.4, 55823.0], [74.5, 55824.0], [74.6, 55843.0], [74.7, 55868.0], [74.8, 55886.0], [74.9, 55911.0], [75.0, 55929.0], [75.1, 55934.0], [75.2, 55973.0], [75.3, 55992.0], [75.4, 56024.0], [75.5, 56037.0], [75.6, 56059.0], [75.7, 56068.0], [75.8, 56099.0], [75.9, 56104.0], [76.0, 56120.0], [76.1, 56135.0], [76.2, 56151.0], [76.3, 56165.0], [76.4, 56190.0], [76.5, 56205.0], [76.6, 56239.0], [76.7, 56291.0], [76.8, 56322.0], [76.9, 56328.0], [77.0, 56352.0], [77.1, 56387.0], [77.2, 56405.0], [77.3, 56412.0], [77.4, 56423.0], [77.5, 56430.0], [77.6, 56433.0], [77.7, 56447.0], [77.8, 56457.0], [77.9, 56466.0], [78.0, 56474.0], [78.1, 56481.0], [78.2, 56492.0], [78.3, 56501.0], [78.4, 56517.0], [78.5, 56519.0], [78.6, 56530.0], [78.7, 56556.0], [78.8, 56564.0], [78.9, 56576.0], [79.0, 56587.0], [79.1, 56596.0], [79.2, 56609.0], [79.3, 56622.0], [79.4, 56627.0], [79.5, 56644.0], [79.6, 56662.0], [79.7, 56681.0], [79.8, 56687.0], [79.9, 56694.0], [80.0, 56715.0], [80.1, 56722.0], [80.2, 56738.0], [80.3, 56746.0], [80.4, 56759.0], [80.5, 56769.0], [80.6, 56792.0], [80.7, 56794.0], [80.8, 56795.0], [80.9, 56805.0], [81.0, 56815.0], [81.1, 56834.0], [81.2, 56870.0], [81.3, 56877.0], [81.4, 56919.0], [81.5, 56938.0], [81.6, 56977.0], [81.7, 56984.0], [81.8, 57046.0], [81.9, 57111.0], [82.0, 57154.0], [82.1, 57169.0], [82.2, 57188.0], [82.3, 57222.0], [82.4, 57255.0], [82.5, 57321.0], [82.6, 57342.0], [82.7, 57370.0], [82.8, 57422.0], [82.9, 57426.0], [83.0, 57459.0], [83.1, 57474.0], [83.2, 57488.0], [83.3, 57493.0], [83.4, 57497.0], [83.5, 57506.0], [83.6, 57513.0], [83.7, 57528.0], [83.8, 57538.0], [83.9, 57552.0], [84.0, 57561.0], [84.1, 57562.0], [84.2, 57569.0], [84.3, 57576.0], [84.4, 57583.0], [84.5, 57589.0], [84.6, 57593.0], [84.7, 57595.0], [84.8, 57610.0], [84.9, 57618.0], [85.0, 57623.0], [85.1, 57624.0], [85.2, 57629.0], [85.3, 57631.0], [85.4, 57638.0], [85.5, 57649.0], [85.6, 57656.0], [85.7, 57663.0], [85.8, 57673.0], [85.9, 57678.0], [86.0, 57697.0], [86.1, 57703.0], [86.2, 57703.0], [86.3, 57723.0], [86.4, 57751.0], [86.5, 57755.0], [86.6, 57766.0], [86.7, 57776.0], [86.8, 57791.0], [86.9, 57800.0], [87.0, 57811.0], [87.1, 57814.0], [87.2, 57823.0], [87.3, 57829.0], [87.4, 57842.0], [87.5, 57852.0], [87.6, 57899.0], [87.7, 57905.0], [87.8, 57930.0], [87.9, 57954.0], [88.0, 58033.0], [88.1, 58058.0], [88.2, 58063.0], [88.3, 58074.0], [88.4, 58088.0], [88.5, 58114.0], [88.6, 58166.0], [88.7, 58194.0], [88.8, 58202.0], [88.9, 58210.0], [89.0, 58277.0], [89.1, 58298.0], [89.2, 58382.0], [89.3, 58516.0], [89.4, 58568.0], [89.5, 58601.0], [89.6, 58627.0], [89.7, 58696.0], [89.8, 58740.0], [89.9, 58763.0], [90.0, 58797.0], [90.1, 58822.0], [90.2, 58838.0], [90.3, 58880.0], [90.4, 58895.0], [90.5, 58916.0], [90.6, 58979.0], [90.7, 59052.0], [90.8, 59061.0], [90.9, 59082.0], [91.0, 59104.0], [91.1, 59177.0], [91.2, 59211.0], [91.3, 59227.0], [91.4, 59391.0], [91.5, 59677.0], [91.6, 59682.0], [91.7, 59863.0], [91.8, 59925.0], [91.9, 59959.0], [92.0, 60014.0], [92.1, 60079.0], [92.2, 60145.0], [92.3, 60197.0], [92.4, 60257.0], [92.5, 60331.0], [92.6, 60340.0], [92.7, 60360.0], [92.8, 60361.0], [92.9, 60362.0], [93.0, 60364.0], [93.1, 60367.0], [93.2, 60368.0], [93.3, 60371.0], [93.4, 60372.0], [93.5, 60376.0], [93.6, 60377.0], [93.7, 60380.0], [93.8, 60384.0], [93.9, 60386.0], [94.0, 60388.0], [94.1, 60390.0], [94.2, 60391.0], [94.3, 60392.0], [94.4, 60392.0], [94.5, 60393.0], [94.6, 60393.0], [94.7, 60394.0], [94.8, 60394.0], [94.9, 60396.0], [95.0, 60397.0], [95.1, 60398.0], [95.2, 60399.0], [95.3, 60400.0], [95.4, 60401.0], [95.5, 60401.0], [95.6, 60403.0], [95.7, 60404.0], [95.8, 60405.0], [95.9, 60406.0], [96.0, 60408.0], [96.1, 60410.0], [96.2, 60417.0], [96.3, 60420.0], [96.4, 60423.0], [96.5, 60426.0], [96.6, 60427.0], [96.7, 60428.0], [96.8, 60429.0], [96.9, 60429.0], [97.0, 60430.0], [97.1, 60431.0], [97.2, 60431.0], [97.3, 60432.0], [97.4, 60432.0], [97.5, 60432.0], [97.6, 60433.0], [97.7, 60434.0], [97.8, 60434.0], [97.9, 60436.0], [98.0, 60436.0], [98.1, 60439.0], [98.2, 60442.0], [98.3, 60444.0], [98.4, 60449.0], [98.5, 60456.0], [98.6, 60809.0], [98.7, 61309.0], [98.8, 61435.0], [98.9, 61666.0], [99.0, 62028.0], [99.1, 62495.0], [99.2, 62793.0], [99.3, 63056.0], [99.4, 63280.0], [99.5, 63506.0], [99.6, 63633.0], [99.7, 63807.0], [99.8, 63980.0], [99.9, 64106.0], [100.0, 64658.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 30500.0, "maxY": 123.0, "series": [{"data": [[34500.0, 5.0], [34100.0, 5.0], [32900.0, 8.0], [33300.0, 4.0], [33700.0, 5.0], [35300.0, 4.0], [34900.0, 6.0], [36100.0, 5.0], [35700.0, 3.0], [36500.0, 1.0], [36900.0, 8.0], [37300.0, 6.0], [38100.0, 6.0], [38500.0, 18.0], [37700.0, 2.0], [38900.0, 22.0], [40900.0, 29.0], [40100.0, 3.0], [39700.0, 34.0], [40500.0, 12.0], [39300.0, 2.0], [42500.0, 22.0], [42900.0, 26.0], [41700.0, 8.0], [42100.0, 22.0], [41300.0, 8.0], [44500.0, 8.0], [44900.0, 6.0], [43700.0, 11.0], [43300.0, 7.0], [44100.0, 8.0], [46100.0, 2.0], [46500.0, 12.0], [45300.0, 7.0], [46900.0, 2.0], [45700.0, 6.0], [47300.0, 13.0], [48100.0, 4.0], [47700.0, 5.0], [48900.0, 4.0], [48500.0, 12.0], [50500.0, 18.0], [50100.0, 13.0], [49300.0, 4.0], [49700.0, 6.0], [50900.0, 5.0], [52500.0, 40.0], [52100.0, 28.0], [51300.0, 3.0], [51700.0, 4.0], [52900.0, 16.0], [54900.0, 51.0], [54100.0, 34.0], [54500.0, 14.0], [53700.0, 22.0], [53300.0, 38.0], [56100.0, 23.0], [56900.0, 16.0], [56500.0, 32.0], [57300.0, 11.0], [55700.0, 10.0], [55300.0, 18.0], [59300.0, 4.0], [58900.0, 9.0], [58100.0, 13.0], [57700.0, 32.0], [58500.0, 8.0], [61300.0, 2.0], [60900.0, 1.0], [60100.0, 8.0], [59700.0, 1.0], [60500.0, 1.0], [61700.0, 1.0], [62900.0, 1.0], [62500.0, 2.0], [63300.0, 1.0], [62100.0, 1.0], [63700.0, 2.0], [64100.0, 1.0], [31400.0, 4.0], [31200.0, 2.0], [31600.0, 2.0], [31000.0, 1.0], [32600.0, 7.0], [32400.0, 3.0], [32000.0, 1.0], [32200.0, 2.0], [31800.0, 3.0], [34000.0, 5.0], [33200.0, 4.0], [34400.0, 4.0], [34800.0, 2.0], [33600.0, 2.0], [32800.0, 4.0], [35200.0, 2.0], [35600.0, 4.0], [36000.0, 3.0], [36800.0, 4.0], [36400.0, 3.0], [37200.0, 9.0], [37600.0, 4.0], [38400.0, 6.0], [38800.0, 11.0], [38000.0, 5.0], [39200.0, 25.0], [40800.0, 8.0], [40000.0, 3.0], [40400.0, 14.0], [39600.0, 19.0], [41600.0, 15.0], [42800.0, 27.0], [42400.0, 14.0], [42000.0, 29.0], [41200.0, 16.0], [44000.0, 10.0], [44400.0, 6.0], [43600.0, 8.0], [43200.0, 4.0], [44800.0, 3.0], [46800.0, 7.0], [45200.0, 8.0], [45600.0, 4.0], [46000.0, 5.0], [46400.0, 5.0], [47600.0, 4.0], [48000.0, 7.0], [48400.0, 8.0], [47200.0, 14.0], [48800.0, 7.0], [49200.0, 3.0], [49600.0, 17.0], [50400.0, 11.0], [50000.0, 14.0], [50800.0, 8.0], [52400.0, 22.0], [53200.0, 10.0], [52800.0, 19.0], [51200.0, 14.0], [51600.0, 1.0], [52000.0, 29.0], [54000.0, 22.0], [55200.0, 20.0], [54800.0, 35.0], [53600.0, 16.0], [54400.0, 14.0], [56800.0, 19.0], [56400.0, 42.0], [56000.0, 20.0], [55600.0, 19.0], [57200.0, 7.0], [58800.0, 14.0], [57600.0, 49.0], [59200.0, 6.0], [58000.0, 17.0], [58400.0, 1.0], [60800.0, 2.0], [60400.0, 123.0], [60000.0, 5.0], [59600.0, 6.0], [61600.0, 2.0], [62000.0, 3.0], [62400.0, 2.0], [62800.0, 1.0], [63200.0, 2.0], [64000.0, 3.0], [63600.0, 3.0], [33100.0, 3.0], [34300.0, 6.0], [33900.0, 3.0], [34700.0, 6.0], [33500.0, 3.0], [36700.0, 7.0], [35900.0, 1.0], [35500.0, 4.0], [35100.0, 4.0], [36300.0, 3.0], [37100.0, 6.0], [38700.0, 5.0], [37900.0, 9.0], [37500.0, 1.0], [38300.0, 19.0], [39100.0, 10.0], [40700.0, 15.0], [39900.0, 9.0], [39500.0, 14.0], [40300.0, 4.0], [41100.0, 8.0], [41500.0, 9.0], [41900.0, 20.0], [42700.0, 55.0], [42300.0, 25.0], [44700.0, 12.0], [43900.0, 6.0], [43500.0, 17.0], [44300.0, 7.0], [43100.0, 2.0], [47100.0, 13.0], [46700.0, 3.0], [46300.0, 4.0], [45900.0, 11.0], [45100.0, 12.0], [45500.0, 5.0], [47900.0, 13.0], [48700.0, 2.0], [47500.0, 10.0], [48300.0, 11.0], [49100.0, 5.0], [50300.0, 11.0], [49500.0, 19.0], [49900.0, 32.0], [50700.0, 12.0], [51100.0, 4.0], [51500.0, 5.0], [52700.0, 31.0], [52300.0, 14.0], [53100.0, 20.0], [51900.0, 21.0], [53900.0, 47.0], [55100.0, 10.0], [53500.0, 13.0], [54300.0, 13.0], [54700.0, 33.0], [56700.0, 34.0], [56300.0, 15.0], [55900.0, 17.0], [55500.0, 19.0], [57100.0, 13.0], [59100.0, 8.0], [58700.0, 10.0], [57900.0, 14.0], [57500.0, 48.0], [58300.0, 3.0], [61100.0, 1.0], [60300.0, 106.0], [59900.0, 9.0], [61500.0, 2.0], [62700.0, 1.0], [63100.0, 2.0], [63900.0, 2.0], [63500.0, 2.0], [64300.0, 1.0], [30700.0, 1.0], [30500.0, 4.0], [31500.0, 3.0], [31300.0, 2.0], [31100.0, 1.0], [30900.0, 2.0], [31700.0, 1.0], [31900.0, 3.0], [32700.0, 3.0], [32500.0, 5.0], [32100.0, 5.0], [32300.0, 2.0], [34600.0, 5.0], [33000.0, 5.0], [34200.0, 3.0], [33800.0, 5.0], [33400.0, 3.0], [35000.0, 3.0], [35400.0, 2.0], [36600.0, 1.0], [35800.0, 2.0], [36200.0, 3.0], [38200.0, 9.0], [37800.0, 1.0], [37000.0, 8.0], [38600.0, 17.0], [39400.0, 6.0], [40600.0, 31.0], [40200.0, 4.0], [39800.0, 20.0], [39000.0, 22.0], [41800.0, 10.0], [43000.0, 14.0], [42600.0, 26.0], [42200.0, 19.0], [41400.0, 9.0], [41000.0, 45.0], [43400.0, 7.0], [45000.0, 6.0], [43800.0, 6.0], [44600.0, 9.0], [44200.0, 3.0], [47000.0, 11.0], [46200.0, 6.0], [45800.0, 7.0], [46600.0, 9.0], [45400.0, 4.0], [48200.0, 5.0], [47800.0, 17.0], [47400.0, 11.0], [48600.0, 5.0], [49000.0, 5.0], [50200.0, 7.0], [49400.0, 6.0], [49800.0, 10.0], [50600.0, 16.0], [51000.0, 7.0], [52600.0, 46.0], [51400.0, 7.0], [52200.0, 9.0], [53000.0, 27.0], [51800.0, 2.0], [54600.0, 30.0], [54200.0, 12.0], [55000.0, 45.0], [53800.0, 59.0], [53400.0, 34.0], [57000.0, 5.0], [55800.0, 24.0], [55400.0, 18.0], [56600.0, 30.0], [56200.0, 11.0], [57400.0, 27.0], [58600.0, 10.0], [59000.0, 12.0], [57800.0, 28.0], [58200.0, 14.0], [60200.0, 5.0], [59800.0, 3.0], [59400.0, 1.0], [61400.0, 2.0], [61800.0, 1.0], [63000.0, 2.0], [63400.0, 2.0], [64600.0, 1.0], [63800.0, 3.0], [64200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 64600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3750.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3750.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3750.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 42.523809523809526, "minX": 1.60842594E12, "maxY": 250.0, "series": [{"data": [[1.60842636E12, 250.0], [1.60842606E12, 250.0], [1.608426E12, 250.0], [1.60842666E12, 195.7317073170732], [1.6084266E12, 249.95666666666665], [1.6084263E12, 250.0], [1.60842624E12, 250.0], [1.60842594E12, 250.0], [1.60842654E12, 250.0], [1.60842648E12, 250.0], [1.60842618E12, 250.0], [1.60842612E12, 250.0], [1.60842672E12, 42.523809523809526], [1.60842642E12, 250.0]], "isOverall": false, "label": "SEOC_Active_Thread_Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842672E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30503.0, "minX": 1.0, "maxY": 62118.0, "series": [{"data": [[2.0, 60400.0], [3.0, 60433.0], [4.0, 60397.0], [5.0, 60398.0], [6.0, 60431.0], [7.0, 60429.0], [8.0, 60393.0], [9.0, 60433.0], [11.0, 60386.0], [12.0, 60398.0], [13.0, 57963.0], [14.0, 60430.0], [15.0, 60418.0], [16.0, 52706.0], [17.0, 52755.0], [18.0, 52715.0], [19.0, 57905.0], [20.0, 57814.0], [21.0, 52728.0], [22.0, 52721.0], [23.0, 40832.0], [24.0, 52588.0], [25.0, 57743.0], [26.0, 52691.0], [27.0, 52706.0], [28.0, 55285.0], [29.0, 48500.0], [30.0, 60108.0], [31.0, 57851.0], [33.0, 55281.0], [32.0, 45127.0], [35.0, 57707.0], [34.0, 55223.0], [37.0, 57678.0], [36.0, 57693.0], [39.0, 48326.0], [38.0, 52597.0], [41.0, 38387.0], [40.0, 52518.0], [43.0, 48301.0], [42.0, 57654.0], [45.0, 57631.0], [44.0, 57642.0], [47.0, 57255.0], [46.0, 52629.0], [49.0, 52555.0], [48.0, 40715.0], [51.0, 40670.0], [50.0, 52457.0], [53.0, 30507.0], [52.0, 33027.0], [55.0, 30536.0], [54.0, 33003.0], [57.0, 60426.0], [56.0, 30503.0], [59.0, 60430.0], [61.0, 60433.0], [60.0, 60398.0], [63.0, 62118.0], [62.0, 60391.0], [67.0, 54581.0], [66.0, 55141.0], [65.0, 60432.0], [64.0, 56834.0], [71.0, 51702.0], [70.0, 52343.0], [69.0, 60392.0], [68.0, 54614.0], [75.0, 47038.0], [74.0, 47065.0], [73.0, 47913.0], [72.0, 49804.0], [79.0, 44129.0], [78.0, 44140.0], [77.0, 44164.0], [76.0, 47030.0], [83.0, 44104.0], [82.0, 44108.0], [81.0, 44086.0], [80.0, 44130.0], [87.0, 39537.0], [86.0, 39621.0], [85.0, 41596.0], [84.0, 44115.0], [91.0, 39711.0], [90.0, 39628.0], [89.0, 39559.0], [88.0, 39538.0], [95.0, 39741.0], [94.0, 39724.0], [93.0, 39717.0], [92.0, 39729.0], [99.0, 40911.5], [97.0, 39674.0], [96.0, 39705.0], [103.0, 39726.0], [102.0, 39666.0], [101.0, 39671.0], [100.0, 39711.0], [107.0, 39699.0], [106.0, 39674.0], [105.0, 39679.0], [104.0, 39676.0], [111.0, 41989.0], [110.0, 50272.0], [109.0, 39676.0], [108.0, 39702.0], [115.0, 54977.0], [114.0, 39725.0], [113.0, 39920.0], [112.0, 41880.0], [119.0, 52411.0], [118.0, 47542.0], [117.0, 54959.0], [116.0, 52429.0], [123.0, 44646.0], [122.0, 44760.0], [121.0, 54934.0], [120.0, 52269.0], [127.0, 46889.0], [126.0, 44723.0], [125.0, 44658.0], [124.0, 44722.0], [135.0, 54807.0], [134.0, 52351.0], [133.0, 52350.0], [132.0, 54803.0], [131.0, 54839.0], [130.0, 52316.0], [129.0, 54854.0], [128.0, 47431.0], [143.0, 52595.0], [142.0, 52591.0], [141.0, 52589.0], [140.0, 52611.0], [139.0, 52602.0], [138.0, 52926.0], [137.0, 61432.0], [136.0, 54802.0], [151.0, 52511.0], [150.0, 52514.0], [149.0, 52621.0], [148.0, 52612.0], [147.0, 52610.0], [146.0, 52583.0], [145.0, 52617.0], [144.0, 52574.0], [159.0, 52510.0], [158.0, 52534.0], [157.0, 52493.0], [156.0, 52495.0], [155.0, 52544.0], [154.0, 52486.0], [153.0, 52483.0], [152.0, 52512.0], [167.0, 60077.0], [166.0, 57633.0], [165.0, 57506.0], [164.0, 57675.0], [163.0, 60079.0], [162.0, 57674.0], [161.0, 57649.0], [160.0, 60145.0], [175.0, 57461.0], [174.0, 57472.0], [173.0, 57592.0], [172.0, 57579.0], [171.0, 57576.0], [170.0, 60014.0], [169.0, 57617.0], [168.0, 57512.0], [183.0, 59853.0], [182.0, 57408.0], [181.0, 59979.0], [180.0, 57552.0], [179.0, 54889.0], [178.0, 57488.0], [177.0, 57568.0], [176.0, 59391.0], [191.0, 54845.0], [190.0, 57529.0], [189.0, 57248.0], [188.0, 56991.0], [187.0, 60129.0], [186.0, 59913.0], [185.0, 59720.0], [184.0, 59666.0], [199.0, 55628.0], [198.0, 59394.666666666664], [197.0, 57343.0], [196.0, 59863.0], [195.0, 59880.0], [194.0, 57484.0], [193.0, 59939.0], [192.0, 57330.5], [207.0, 56598.0], [206.0, 60454.5], [204.0, 57663.0], [203.0, 57868.0], [202.0, 57877.0], [201.0, 54916.0], [200.0, 54371.0], [215.0, 45137.0], [214.0, 45115.0], [213.0, 45138.0], [212.0, 45965.333333333336], [211.0, 51658.75], [210.0, 52800.0], [209.0, 52744.0], [208.0, 52785.0], [223.0, 40977.5], [222.0, 40998.0], [221.0, 41010.0], [220.0, 40998.0], [219.0, 41011.0], [218.0, 41056.5], [217.0, 41190.0], [216.0, 45070.5], [231.0, 55044.0], [230.0, 47830.0], [229.0, 41304.0], [228.0, 41005.0], [227.0, 41005.0], [226.0, 41356.0], [225.0, 41002.0], [224.0, 41027.0], [239.0, 52693.0], [238.0, 52690.5], [237.0, 52794.333333333336], [236.0, 45475.333333333336], [235.0, 50531.625], [234.0, 52601.75], [233.0, 55039.666666666664], [232.0, 52802.0], [247.0, 56394.00000000001], [246.0, 57218.89473684211], [245.0, 58023.66666666666], [244.0, 52515.0], [243.0, 52531.666666666664], [242.0, 52561.0], [241.0, 52702.8], [240.0, 52945.5], [250.0, 49397.40790255491], [249.0, 47254.9], [248.0, 52413.0], [1.0, 60422.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[241.19573333333327, 49636.8325333333]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 137.7, "minX": 1.60842594E12, "maxY": 4499.166666666667, "series": [{"data": [[1.60842636E12, 4371.866666666667], [1.60842606E12, 3816.45], [1.608426E12, 4499.166666666667], [1.60842666E12, 3941.883333333333], [1.6084266E12, 4102.3], [1.6084263E12, 4071.883333333333], [1.60842624E12, 4048.7833333333333], [1.60842594E12, 708.25], [1.60842654E12, 4228.2], [1.60842648E12, 4046.616666666667], [1.60842618E12, 4458.133333333333], [1.60842612E12, 4090.016666666667], [1.60842672E12, 1174.45], [1.60842642E12, 4021.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60842636E12, 853.2], [1.60842606E12, 753.3], [1.608426E12, 877.5], [1.60842666E12, 774.9], [1.6084266E12, 810.0], [1.6084263E12, 799.2], [1.60842624E12, 799.2], [1.60842594E12, 137.7], [1.60842654E12, 826.2], [1.60842648E12, 796.5], [1.60842618E12, 872.1], [1.60842612E12, 804.6], [1.60842672E12, 226.8], [1.60842642E12, 793.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842672E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 32331.23529411765, "minX": 1.60842594E12, "maxY": 52612.83333333333, "series": [{"data": [[1.60842636E12, 50379.537974683546], [1.60842606E12, 48370.29390681008], [1.608426E12, 42619.307692307666], [1.60842666E12, 51787.724738675985], [1.6084266E12, 49948.916666666686], [1.6084263E12, 51713.952702702685], [1.60842624E12, 49470.010135135104], [1.60842594E12, 32331.23529411765], [1.60842654E12, 50807.06209150326], [1.60842648E12, 51738.85423728814], [1.60842618E12, 49331.55417956657], [1.60842612E12, 52391.33221476513], [1.60842672E12, 52612.83333333333], [1.60842642E12, 49824.46598639457]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842672E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 32330.843137254895, "minX": 1.60842594E12, "maxY": 52612.58333333333, "series": [{"data": [[1.60842636E12, 50379.325949367114], [1.60842606E12, 48365.458781361995], [1.608426E12, 42618.741538461516], [1.60842666E12, 51786.519163763034], [1.6084266E12, 49941.79666666665], [1.6084263E12, 51713.43243243242], [1.60842624E12, 49469.43243243241], [1.60842594E12, 32330.843137254895], [1.60842654E12, 50806.64705882356], [1.60842648E12, 51737.36271186444], [1.60842618E12, 49331.160990712044], [1.60842612E12, 52390.50671140937], [1.60842672E12, 52612.58333333333], [1.60842642E12, 49824.139455782315]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842672E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 239.43962848297227, "minX": 1.60842594E12, "maxY": 1245.686274509804, "series": [{"data": [[1.60842636E12, 270.84810126582295], [1.60842606E12, 261.458781362007], [1.608426E12, 1078.1784615384618], [1.60842666E12, 343.96864111498263], [1.6084266E12, 270.58666666666676], [1.6084263E12, 275.36148648648634], [1.60842624E12, 239.58108108108127], [1.60842594E12, 1245.686274509804], [1.60842654E12, 272.64379084967334], [1.60842648E12, 274.2508474576272], [1.60842618E12, 239.43962848297227], [1.60842612E12, 256.62751677852344], [1.60842672E12, 288.6785714285715], [1.60842642E12, 283.38435374149674]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842672E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 34611.0, "minX": 1.0, "maxY": 57904.0, "series": [{"data": [[2.0, 48887.5], [33.0, 53369.5], [32.0, 50018.0], [34.0, 39281.5], [35.0, 55701.5], [37.0, 54826.0], [38.0, 52352.0], [39.0, 55010.0], [41.0, 54631.0], [44.0, 40757.0], [45.0, 57904.0], [3.0, 50365.0], [49.0, 42945.0], [48.0, 54760.5], [51.0, 42360.0], [50.0, 42506.0], [55.0, 39096.0], [58.0, 57444.5], [4.0, 50291.5], [5.0, 50403.0], [6.0, 53112.5], [7.0, 50361.5], [8.0, 45659.5], [9.0, 34611.0], [10.0, 48166.0], [11.0, 52835.0], [12.0, 56403.5], [13.0, 55821.0], [14.0, 52598.0], [15.0, 53801.5], [1.0, 51606.0], [16.0, 56659.5], [17.0, 55782.0], [18.0, 57505.5], [19.0, 54882.0], [20.0, 39675.0], [21.0, 50044.0], [22.0, 52643.5], [23.0, 46469.5], [24.0, 57756.0], [25.0, 49513.0], [27.0, 42243.0], [28.0, 42710.5], [29.0, 53794.0], [30.0, 47873.5], [31.0, 54144.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 58.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 34611.0, "minX": 1.0, "maxY": 57904.0, "series": [{"data": [[2.0, 48887.5], [33.0, 53369.5], [32.0, 50017.5], [34.0, 39279.0], [35.0, 55701.5], [37.0, 54825.0], [38.0, 52352.0], [39.0, 55010.0], [41.0, 54630.0], [44.0, 40757.0], [45.0, 57904.0], [3.0, 50365.0], [49.0, 42945.0], [48.0, 54760.5], [51.0, 42360.0], [50.0, 42506.0], [55.0, 39096.0], [58.0, 57444.0], [4.0, 50291.5], [5.0, 50402.5], [6.0, 53112.0], [7.0, 50361.0], [8.0, 45659.0], [9.0, 34611.0], [10.0, 47450.5], [11.0, 52835.0], [12.0, 56403.0], [13.0, 55821.0], [14.0, 52597.5], [15.0, 53801.5], [1.0, 51605.0], [16.0, 56659.5], [17.0, 55781.0], [18.0, 57505.0], [19.0, 54881.5], [20.0, 39675.0], [21.0, 50043.5], [22.0, 52643.0], [23.0, 46469.5], [24.0, 57755.5], [25.0, 49512.0], [27.0, 42243.0], [28.0, 42705.5], [29.0, 53793.0], [30.0, 47873.0], [31.0, 54144.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 58.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.033333333333333, "minX": 1.60842594E12, "maxY": 5.416666666666667, "series": [{"data": [[1.60842636E12, 5.266666666666667], [1.60842606E12, 4.65], [1.608426E12, 5.416666666666667], [1.60842666E12, 2.033333333333333], [1.6084266E12, 4.983333333333333], [1.6084263E12, 4.933333333333334], [1.60842624E12, 4.933333333333334], [1.60842594E12, 5.016666666666667], [1.60842654E12, 5.1], [1.60842648E12, 4.916666666666667], [1.60842618E12, 5.383333333333334], [1.60842612E12, 4.966666666666667], [1.60842642E12, 4.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842666E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.60842594E12, "maxY": 4.966666666666667, "series": [{"data": [[1.60842636E12, 4.55], [1.60842606E12, 4.6], [1.608426E12, 4.583333333333333], [1.60842666E12, 4.5], [1.6084266E12, 4.966666666666667], [1.6084263E12, 4.566666666666666], [1.60842624E12, 4.883333333333334], [1.60842594E12, 0.85], [1.60842654E12, 4.466666666666667], [1.60842648E12, 4.7], [1.60842618E12, 4.766666666666667], [1.60842612E12, 4.733333333333333], [1.60842672E12, 1.0166666666666666], [1.60842642E12, 4.85]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.60842636E12, 0.7166666666666667], [1.60842606E12, 0.05], [1.608426E12, 0.8333333333333334], [1.60842666E12, 0.2833333333333333], [1.6084266E12, 0.03333333333333333], [1.6084263E12, 0.36666666666666664], [1.60842624E12, 0.05], [1.60842654E12, 0.6333333333333333], [1.60842648E12, 0.21666666666666667], [1.60842618E12, 0.6166666666666667], [1.60842612E12, 0.23333333333333334], [1.60842672E12, 0.38333333333333336], [1.60842642E12, 0.05]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60842672E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.60842594E12, "maxY": 5.416666666666667, "series": [{"data": [[1.60842636E12, 5.266666666666667], [1.60842606E12, 4.65], [1.608426E12, 5.416666666666667], [1.60842666E12, 4.783333333333333], [1.6084266E12, 5.0], [1.6084263E12, 4.933333333333334], [1.60842624E12, 4.933333333333334], [1.60842594E12, 0.85], [1.60842654E12, 5.1], [1.60842648E12, 4.916666666666667], [1.60842618E12, 5.383333333333334], [1.60842612E12, 4.966666666666667], [1.60842672E12, 1.4], [1.60842642E12, 4.9]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842672E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.60842594E12, "maxY": 5.416666666666667, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60842636E12, 5.266666666666667], [1.60842606E12, 4.65], [1.608426E12, 5.416666666666667], [1.60842666E12, 4.783333333333333], [1.6084266E12, 5.0], [1.6084263E12, 4.933333333333334], [1.60842624E12, 4.933333333333334], [1.60842594E12, 0.85], [1.60842654E12, 5.1], [1.60842648E12, 4.916666666666667], [1.60842618E12, 5.383333333333334], [1.60842612E12, 4.966666666666667], [1.60842672E12, 1.4], [1.60842642E12, 4.9]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60842672E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

