/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1338.0, "minX": 0.0, "maxY": 39328.0, "series": [{"data": [[0.0, 1338.0], [0.1, 2132.0], [0.2, 2228.0], [0.3, 2585.0], [0.4, 2888.0], [0.5, 3063.0], [0.6, 3307.0], [0.7, 3479.0], [0.8, 3573.0], [0.9, 3931.0], [1.0, 4555.0], [1.1, 5265.0], [1.2, 6194.0], [1.3, 6491.0], [1.4, 7062.0], [1.5, 7491.0], [1.6, 7669.0], [1.7, 7913.0], [1.8, 8679.0], [1.9, 8949.0], [2.0, 9085.0], [2.1, 9231.0], [2.2, 9361.0], [2.3, 9541.0], [2.4, 9736.0], [2.5, 9852.0], [2.6, 9903.0], [2.7, 10062.0], [2.8, 10100.0], [2.9, 10445.0], [3.0, 10536.0], [3.1, 10686.0], [3.2, 10783.0], [3.3, 10842.0], [3.4, 10977.0], [3.5, 11171.0], [3.6, 11248.0], [3.7, 11300.0], [3.8, 11444.0], [3.9, 11882.0], [4.0, 11942.0], [4.1, 12260.0], [4.2, 12479.0], [4.3, 12809.0], [4.4, 12943.0], [4.5, 13031.0], [4.6, 13174.0], [4.7, 13657.0], [4.8, 13764.0], [4.9, 13919.0], [5.0, 14018.0], [5.1, 14095.0], [5.2, 14180.0], [5.3, 14256.0], [5.4, 14589.0], [5.5, 14850.0], [5.6, 15143.0], [5.7, 15298.0], [5.8, 15395.0], [5.9, 15427.0], [6.0, 15521.0], [6.1, 15613.0], [6.2, 15809.0], [6.3, 15891.0], [6.4, 15960.0], [6.5, 16007.0], [6.6, 16216.0], [6.7, 16334.0], [6.8, 16446.0], [6.9, 16504.0], [7.0, 16553.0], [7.1, 16595.0], [7.2, 16661.0], [7.3, 16720.0], [7.4, 16833.0], [7.5, 16841.0], [7.6, 16917.0], [7.7, 17016.0], [7.8, 17085.0], [7.9, 17210.0], [8.0, 17299.0], [8.1, 17360.0], [8.2, 17400.0], [8.3, 17550.0], [8.4, 17643.0], [8.5, 17751.0], [8.6, 17975.0], [8.7, 18094.0], [8.8, 18200.0], [8.9, 18278.0], [9.0, 18356.0], [9.1, 18393.0], [9.2, 18478.0], [9.3, 18491.0], [9.4, 18505.0], [9.5, 18527.0], [9.6, 18539.0], [9.7, 18638.0], [9.8, 18692.0], [9.9, 18723.0], [10.0, 18765.0], [10.1, 18863.0], [10.2, 18958.0], [10.3, 18991.0], [10.4, 19019.0], [10.5, 19063.0], [10.6, 19123.0], [10.7, 19160.0], [10.8, 19168.0], [10.9, 19219.0], [11.0, 19246.0], [11.1, 19328.0], [11.2, 19345.0], [11.3, 19396.0], [11.4, 19445.0], [11.5, 19469.0], [11.6, 19500.0], [11.7, 19553.0], [11.8, 19582.0], [11.9, 19614.0], [12.0, 19642.0], [12.1, 19668.0], [12.2, 19694.0], [12.3, 19732.0], [12.4, 19778.0], [12.5, 19810.0], [12.6, 19864.0], [12.7, 19887.0], [12.8, 19913.0], [12.9, 19927.0], [13.0, 19951.0], [13.1, 19987.0], [13.2, 19996.0], [13.3, 20031.0], [13.4, 20044.0], [13.5, 20099.0], [13.6, 20112.0], [13.7, 20122.0], [13.8, 20143.0], [13.9, 20164.0], [14.0, 20196.0], [14.1, 20216.0], [14.2, 20253.0], [14.3, 20268.0], [14.4, 20288.0], [14.5, 20307.0], [14.6, 20328.0], [14.7, 20352.0], [14.8, 20398.0], [14.9, 20448.0], [15.0, 20468.0], [15.1, 20498.0], [15.2, 20520.0], [15.3, 20533.0], [15.4, 20545.0], [15.5, 20565.0], [15.6, 20589.0], [15.7, 20599.0], [15.8, 20627.0], [15.9, 20637.0], [16.0, 20675.0], [16.1, 20706.0], [16.2, 20710.0], [16.3, 20738.0], [16.4, 20755.0], [16.5, 20773.0], [16.6, 20792.0], [16.7, 20816.0], [16.8, 20828.0], [16.9, 20850.0], [17.0, 20878.0], [17.1, 20889.0], [17.2, 20906.0], [17.3, 20920.0], [17.4, 20944.0], [17.5, 20959.0], [17.6, 20964.0], [17.7, 20978.0], [17.8, 21011.0], [17.9, 21031.0], [18.0, 21038.0], [18.1, 21060.0], [18.2, 21083.0], [18.3, 21101.0], [18.4, 21115.0], [18.5, 21120.0], [18.6, 21140.0], [18.7, 21157.0], [18.8, 21175.0], [18.9, 21180.0], [19.0, 21198.0], [19.1, 21212.0], [19.2, 21220.0], [19.3, 21238.0], [19.4, 21245.0], [19.5, 21262.0], [19.6, 21274.0], [19.7, 21297.0], [19.8, 21306.0], [19.9, 21319.0], [20.0, 21332.0], [20.1, 21343.0], [20.2, 21372.0], [20.3, 21394.0], [20.4, 21399.0], [20.5, 21416.0], [20.6, 21423.0], [20.7, 21434.0], [20.8, 21442.0], [20.9, 21455.0], [21.0, 21464.0], [21.1, 21474.0], [21.2, 21477.0], [21.3, 21482.0], [21.4, 21491.0], [21.5, 21498.0], [21.6, 21503.0], [21.7, 21513.0], [21.8, 21518.0], [21.9, 21536.0], [22.0, 21538.0], [22.1, 21548.0], [22.2, 21556.0], [22.3, 21567.0], [22.4, 21571.0], [22.5, 21583.0], [22.6, 21598.0], [22.7, 21620.0], [22.8, 21627.0], [22.9, 21641.0], [23.0, 21662.0], [23.1, 21669.0], [23.2, 21684.0], [23.3, 21702.0], [23.4, 21707.0], [23.5, 21721.0], [23.6, 21736.0], [23.7, 21745.0], [23.8, 21749.0], [23.9, 21766.0], [24.0, 21772.0], [24.1, 21784.0], [24.2, 21788.0], [24.3, 21797.0], [24.4, 21807.0], [24.5, 21822.0], [24.6, 21832.0], [24.7, 21846.0], [24.8, 21853.0], [24.9, 21875.0], [25.0, 21882.0], [25.1, 21894.0], [25.2, 21908.0], [25.3, 21922.0], [25.4, 21929.0], [25.5, 21934.0], [25.6, 21943.0], [25.7, 21951.0], [25.8, 21961.0], [25.9, 21978.0], [26.0, 21991.0], [26.1, 22000.0], [26.2, 22007.0], [26.3, 22014.0], [26.4, 22019.0], [26.5, 22028.0], [26.6, 22032.0], [26.7, 22042.0], [26.8, 22058.0], [26.9, 22062.0], [27.0, 22072.0], [27.1, 22076.0], [27.2, 22084.0], [27.3, 22102.0], [27.4, 22109.0], [27.5, 22120.0], [27.6, 22128.0], [27.7, 22137.0], [27.8, 22150.0], [27.9, 22164.0], [28.0, 22176.0], [28.1, 22197.0], [28.2, 22217.0], [28.3, 22223.0], [28.4, 22228.0], [28.5, 22239.0], [28.6, 22253.0], [28.7, 22257.0], [28.8, 22270.0], [28.9, 22284.0], [29.0, 22288.0], [29.1, 22304.0], [29.2, 22314.0], [29.3, 22318.0], [29.4, 22327.0], [29.5, 22333.0], [29.6, 22341.0], [29.7, 22350.0], [29.8, 22362.0], [29.9, 22370.0], [30.0, 22374.0], [30.1, 22381.0], [30.2, 22387.0], [30.3, 22390.0], [30.4, 22400.0], [30.5, 22405.0], [30.6, 22416.0], [30.7, 22427.0], [30.8, 22431.0], [30.9, 22438.0], [31.0, 22442.0], [31.1, 22447.0], [31.2, 22454.0], [31.3, 22468.0], [31.4, 22476.0], [31.5, 22485.0], [31.6, 22488.0], [31.7, 22495.0], [31.8, 22498.0], [31.9, 22505.0], [32.0, 22512.0], [32.1, 22519.0], [32.2, 22525.0], [32.3, 22532.0], [32.4, 22536.0], [32.5, 22544.0], [32.6, 22555.0], [32.7, 22561.0], [32.8, 22564.0], [32.9, 22575.0], [33.0, 22583.0], [33.1, 22592.0], [33.2, 22594.0], [33.3, 22601.0], [33.4, 22610.0], [33.5, 22627.0], [33.6, 22636.0], [33.7, 22645.0], [33.8, 22656.0], [33.9, 22669.0], [34.0, 22671.0], [34.1, 22680.0], [34.2, 22689.0], [34.3, 22694.0], [34.4, 22699.0], [34.5, 22707.0], [34.6, 22715.0], [34.7, 22720.0], [34.8, 22722.0], [34.9, 22726.0], [35.0, 22729.0], [35.1, 22736.0], [35.2, 22737.0], [35.3, 22749.0], [35.4, 22755.0], [35.5, 22763.0], [35.6, 22773.0], [35.7, 22779.0], [35.8, 22791.0], [35.9, 22795.0], [36.0, 22796.0], [36.1, 22808.0], [36.2, 22819.0], [36.3, 22826.0], [36.4, 22830.0], [36.5, 22834.0], [36.6, 22838.0], [36.7, 22845.0], [36.8, 22848.0], [36.9, 22854.0], [37.0, 22867.0], [37.1, 22872.0], [37.2, 22877.0], [37.3, 22884.0], [37.4, 22892.0], [37.5, 22897.0], [37.6, 22905.0], [37.7, 22918.0], [37.8, 22931.0], [37.9, 22949.0], [38.0, 22952.0], [38.1, 22964.0], [38.2, 22967.0], [38.3, 22972.0], [38.4, 22975.0], [38.5, 22985.0], [38.6, 22993.0], [38.7, 23002.0], [38.8, 23006.0], [38.9, 23011.0], [39.0, 23016.0], [39.1, 23031.0], [39.2, 23038.0], [39.3, 23051.0], [39.4, 23059.0], [39.5, 23063.0], [39.6, 23065.0], [39.7, 23071.0], [39.8, 23074.0], [39.9, 23082.0], [40.0, 23089.0], [40.1, 23095.0], [40.2, 23108.0], [40.3, 23117.0], [40.4, 23124.0], [40.5, 23129.0], [40.6, 23134.0], [40.7, 23137.0], [40.8, 23142.0], [40.9, 23146.0], [41.0, 23156.0], [41.1, 23161.0], [41.2, 23169.0], [41.3, 23172.0], [41.4, 23179.0], [41.5, 23183.0], [41.6, 23194.0], [41.7, 23196.0], [41.8, 23203.0], [41.9, 23208.0], [42.0, 23218.0], [42.1, 23225.0], [42.2, 23232.0], [42.3, 23236.0], [42.4, 23238.0], [42.5, 23240.0], [42.6, 23247.0], [42.7, 23251.0], [42.8, 23256.0], [42.9, 23263.0], [43.0, 23273.0], [43.1, 23278.0], [43.2, 23283.0], [43.3, 23285.0], [43.4, 23288.0], [43.5, 23296.0], [43.6, 23301.0], [43.7, 23309.0], [43.8, 23313.0], [43.9, 23319.0], [44.0, 23321.0], [44.1, 23324.0], [44.2, 23341.0], [44.3, 23350.0], [44.4, 23358.0], [44.5, 23365.0], [44.6, 23371.0], [44.7, 23379.0], [44.8, 23387.0], [44.9, 23391.0], [45.0, 23396.0], [45.1, 23400.0], [45.2, 23408.0], [45.3, 23415.0], [45.4, 23421.0], [45.5, 23424.0], [45.6, 23440.0], [45.7, 23445.0], [45.8, 23454.0], [45.9, 23460.0], [46.0, 23464.0], [46.1, 23465.0], [46.2, 23468.0], [46.3, 23476.0], [46.4, 23482.0], [46.5, 23485.0], [46.6, 23499.0], [46.7, 23504.0], [46.8, 23515.0], [46.9, 23521.0], [47.0, 23523.0], [47.1, 23534.0], [47.2, 23542.0], [47.3, 23548.0], [47.4, 23554.0], [47.5, 23562.0], [47.6, 23570.0], [47.7, 23577.0], [47.8, 23587.0], [47.9, 23602.0], [48.0, 23614.0], [48.1, 23617.0], [48.2, 23620.0], [48.3, 23634.0], [48.4, 23639.0], [48.5, 23644.0], [48.6, 23652.0], [48.7, 23655.0], [48.8, 23662.0], [48.9, 23666.0], [49.0, 23673.0], [49.1, 23676.0], [49.2, 23687.0], [49.3, 23692.0], [49.4, 23700.0], [49.5, 23718.0], [49.6, 23724.0], [49.7, 23731.0], [49.8, 23738.0], [49.9, 23745.0], [50.0, 23749.0], [50.1, 23757.0], [50.2, 23762.0], [50.3, 23770.0], [50.4, 23780.0], [50.5, 23789.0], [50.6, 23799.0], [50.7, 23806.0], [50.8, 23809.0], [50.9, 23815.0], [51.0, 23818.0], [51.1, 23825.0], [51.2, 23832.0], [51.3, 23836.0], [51.4, 23838.0], [51.5, 23846.0], [51.6, 23852.0], [51.7, 23853.0], [51.8, 23862.0], [51.9, 23866.0], [52.0, 23871.0], [52.1, 23876.0], [52.2, 23879.0], [52.3, 23884.0], [52.4, 23894.0], [52.5, 23898.0], [52.6, 23901.0], [52.7, 23904.0], [52.8, 23909.0], [52.9, 23915.0], [53.0, 23917.0], [53.1, 23919.0], [53.2, 23950.0], [53.3, 23957.0], [53.4, 23963.0], [53.5, 23971.0], [53.6, 23984.0], [53.7, 23988.0], [53.8, 24002.0], [53.9, 24011.0], [54.0, 24015.0], [54.1, 24016.0], [54.2, 24023.0], [54.3, 24027.0], [54.4, 24030.0], [54.5, 24039.0], [54.6, 24048.0], [54.7, 24053.0], [54.8, 24062.0], [54.9, 24067.0], [55.0, 24073.0], [55.1, 24084.0], [55.2, 24099.0], [55.3, 24103.0], [55.4, 24110.0], [55.5, 24119.0], [55.6, 24126.0], [55.7, 24133.0], [55.8, 24138.0], [55.9, 24144.0], [56.0, 24154.0], [56.1, 24159.0], [56.2, 24168.0], [56.3, 24173.0], [56.4, 24180.0], [56.5, 24189.0], [56.6, 24203.0], [56.7, 24210.0], [56.8, 24216.0], [56.9, 24222.0], [57.0, 24230.0], [57.1, 24235.0], [57.2, 24241.0], [57.3, 24247.0], [57.4, 24260.0], [57.5, 24267.0], [57.6, 24281.0], [57.7, 24288.0], [57.8, 24297.0], [57.9, 24302.0], [58.0, 24310.0], [58.1, 24316.0], [58.2, 24324.0], [58.3, 24333.0], [58.4, 24339.0], [58.5, 24342.0], [58.6, 24351.0], [58.7, 24356.0], [58.8, 24365.0], [58.9, 24366.0], [59.0, 24373.0], [59.1, 24378.0], [59.2, 24381.0], [59.3, 24386.0], [59.4, 24391.0], [59.5, 24394.0], [59.6, 24404.0], [59.7, 24411.0], [59.8, 24416.0], [59.9, 24424.0], [60.0, 24435.0], [60.1, 24437.0], [60.2, 24447.0], [60.3, 24461.0], [60.4, 24468.0], [60.5, 24469.0], [60.6, 24477.0], [60.7, 24482.0], [60.8, 24489.0], [60.9, 24495.0], [61.0, 24502.0], [61.1, 24512.0], [61.2, 24515.0], [61.3, 24516.0], [61.4, 24521.0], [61.5, 24532.0], [61.6, 24541.0], [61.7, 24549.0], [61.8, 24564.0], [61.9, 24568.0], [62.0, 24578.0], [62.1, 24582.0], [62.2, 24589.0], [62.3, 24597.0], [62.4, 24600.0], [62.5, 24607.0], [62.6, 24619.0], [62.7, 24626.0], [62.8, 24632.0], [62.9, 24637.0], [63.0, 24648.0], [63.1, 24668.0], [63.2, 24679.0], [63.3, 24685.0], [63.4, 24691.0], [63.5, 24699.0], [63.6, 24704.0], [63.7, 24706.0], [63.8, 24711.0], [63.9, 24724.0], [64.0, 24731.0], [64.1, 24737.0], [64.2, 24749.0], [64.3, 24755.0], [64.4, 24762.0], [64.5, 24765.0], [64.6, 24777.0], [64.7, 24782.0], [64.8, 24789.0], [64.9, 24791.0], [65.0, 24801.0], [65.1, 24808.0], [65.2, 24817.0], [65.3, 24826.0], [65.4, 24837.0], [65.5, 24844.0], [65.6, 24849.0], [65.7, 24854.0], [65.8, 24859.0], [65.9, 24866.0], [66.0, 24873.0], [66.1, 24887.0], [66.2, 24896.0], [66.3, 24907.0], [66.4, 24916.0], [66.5, 24923.0], [66.6, 24928.0], [66.7, 24936.0], [66.8, 24941.0], [66.9, 24943.0], [67.0, 24951.0], [67.1, 24961.0], [67.2, 24968.0], [67.3, 24973.0], [67.4, 24986.0], [67.5, 24995.0], [67.6, 25004.0], [67.7, 25009.0], [67.8, 25012.0], [67.9, 25019.0], [68.0, 25029.0], [68.1, 25042.0], [68.2, 25045.0], [68.3, 25057.0], [68.4, 25070.0], [68.5, 25085.0], [68.6, 25096.0], [68.7, 25108.0], [68.8, 25116.0], [68.9, 25124.0], [69.0, 25138.0], [69.1, 25153.0], [69.2, 25159.0], [69.3, 25166.0], [69.4, 25177.0], [69.5, 25196.0], [69.6, 25206.0], [69.7, 25210.0], [69.8, 25231.0], [69.9, 25247.0], [70.0, 25251.0], [70.1, 25261.0], [70.2, 25270.0], [70.3, 25277.0], [70.4, 25283.0], [70.5, 25296.0], [70.6, 25306.0], [70.7, 25315.0], [70.8, 25320.0], [70.9, 25324.0], [71.0, 25332.0], [71.1, 25356.0], [71.2, 25363.0], [71.3, 25373.0], [71.4, 25390.0], [71.5, 25408.0], [71.6, 25412.0], [71.7, 25416.0], [71.8, 25425.0], [71.9, 25434.0], [72.0, 25444.0], [72.1, 25452.0], [72.2, 25464.0], [72.3, 25476.0], [72.4, 25498.0], [72.5, 25507.0], [72.6, 25515.0], [72.7, 25529.0], [72.8, 25539.0], [72.9, 25554.0], [73.0, 25560.0], [73.1, 25571.0], [73.2, 25576.0], [73.3, 25591.0], [73.4, 25603.0], [73.5, 25623.0], [73.6, 25628.0], [73.7, 25630.0], [73.8, 25640.0], [73.9, 25653.0], [74.0, 25661.0], [74.1, 25677.0], [74.2, 25684.0], [74.3, 25696.0], [74.4, 25706.0], [74.5, 25721.0], [74.6, 25728.0], [74.7, 25740.0], [74.8, 25753.0], [74.9, 25755.0], [75.0, 25769.0], [75.1, 25792.0], [75.2, 25800.0], [75.3, 25806.0], [75.4, 25811.0], [75.5, 25833.0], [75.6, 25837.0], [75.7, 25846.0], [75.8, 25853.0], [75.9, 25860.0], [76.0, 25885.0], [76.1, 25892.0], [76.2, 25907.0], [76.3, 25931.0], [76.4, 25942.0], [76.5, 25950.0], [76.6, 25966.0], [76.7, 25970.0], [76.8, 25978.0], [76.9, 25987.0], [77.0, 25998.0], [77.1, 26016.0], [77.2, 26022.0], [77.3, 26031.0], [77.4, 26040.0], [77.5, 26070.0], [77.6, 26077.0], [77.7, 26089.0], [77.8, 26094.0], [77.9, 26105.0], [78.0, 26115.0], [78.1, 26119.0], [78.2, 26144.0], [78.3, 26160.0], [78.4, 26179.0], [78.5, 26186.0], [78.6, 26211.0], [78.7, 26233.0], [78.8, 26236.0], [78.9, 26241.0], [79.0, 26260.0], [79.1, 26276.0], [79.2, 26282.0], [79.3, 26292.0], [79.4, 26330.0], [79.5, 26344.0], [79.6, 26366.0], [79.7, 26369.0], [79.8, 26386.0], [79.9, 26401.0], [80.0, 26419.0], [80.1, 26438.0], [80.2, 26455.0], [80.3, 26483.0], [80.4, 26504.0], [80.5, 26506.0], [80.6, 26546.0], [80.7, 26556.0], [80.8, 26578.0], [80.9, 26590.0], [81.0, 26619.0], [81.1, 26638.0], [81.2, 26659.0], [81.3, 26686.0], [81.4, 26726.0], [81.5, 26759.0], [81.6, 26773.0], [81.7, 26789.0], [81.8, 26826.0], [81.9, 26848.0], [82.0, 26860.0], [82.1, 26897.0], [82.2, 26927.0], [82.3, 26933.0], [82.4, 26969.0], [82.5, 26996.0], [82.6, 27027.0], [82.7, 27044.0], [82.8, 27086.0], [82.9, 27118.0], [83.0, 27152.0], [83.1, 27187.0], [83.2, 27212.0], [83.3, 27243.0], [83.4, 27280.0], [83.5, 27301.0], [83.6, 27308.0], [83.7, 27340.0], [83.8, 27374.0], [83.9, 27403.0], [84.0, 27423.0], [84.1, 27450.0], [84.2, 27467.0], [84.3, 27501.0], [84.4, 27562.0], [84.5, 27596.0], [84.6, 27642.0], [84.7, 27668.0], [84.8, 27690.0], [84.9, 27734.0], [85.0, 27750.0], [85.1, 27800.0], [85.2, 27842.0], [85.3, 27885.0], [85.4, 27925.0], [85.5, 27941.0], [85.6, 27958.0], [85.7, 28003.0], [85.8, 28043.0], [85.9, 28098.0], [86.0, 28177.0], [86.1, 28200.0], [86.2, 28276.0], [86.3, 28338.0], [86.4, 28411.0], [86.5, 28445.0], [86.6, 28547.0], [86.7, 28618.0], [86.8, 28644.0], [86.9, 28679.0], [87.0, 28708.0], [87.1, 28770.0], [87.2, 28852.0], [87.3, 28922.0], [87.4, 28949.0], [87.5, 29002.0], [87.6, 29048.0], [87.7, 29072.0], [87.8, 29129.0], [87.9, 29220.0], [88.0, 29265.0], [88.1, 29303.0], [88.2, 29347.0], [88.3, 29418.0], [88.4, 29442.0], [88.5, 29510.0], [88.6, 29580.0], [88.7, 29632.0], [88.8, 29678.0], [88.9, 29718.0], [89.0, 29742.0], [89.1, 29842.0], [89.2, 29889.0], [89.3, 29942.0], [89.4, 29975.0], [89.5, 30059.0], [89.6, 30084.0], [89.7, 30118.0], [89.8, 30146.0], [89.9, 30220.0], [90.0, 30262.0], [90.1, 30335.0], [90.2, 30399.0], [90.3, 30424.0], [90.4, 30456.0], [90.5, 30493.0], [90.6, 30533.0], [90.7, 30659.0], [90.8, 30683.0], [90.9, 30734.0], [91.0, 30780.0], [91.1, 30833.0], [91.2, 30868.0], [91.3, 30923.0], [91.4, 30943.0], [91.5, 31010.0], [91.6, 31060.0], [91.7, 31145.0], [91.8, 31189.0], [91.9, 31253.0], [92.0, 31283.0], [92.1, 31359.0], [92.2, 31412.0], [92.3, 31448.0], [92.4, 31521.0], [92.5, 31561.0], [92.6, 31650.0], [92.7, 31727.0], [92.8, 31804.0], [92.9, 31882.0], [93.0, 31949.0], [93.1, 32011.0], [93.2, 32027.0], [93.3, 32102.0], [93.4, 32145.0], [93.5, 32183.0], [93.6, 32259.0], [93.7, 32316.0], [93.8, 32350.0], [93.9, 32496.0], [94.0, 32561.0], [94.1, 32637.0], [94.2, 32725.0], [94.3, 32762.0], [94.4, 32801.0], [94.5, 32825.0], [94.6, 32850.0], [94.7, 32890.0], [94.8, 32904.0], [94.9, 33005.0], [95.0, 33027.0], [95.1, 33127.0], [95.2, 33175.0], [95.3, 33244.0], [95.4, 33349.0], [95.5, 33435.0], [95.6, 33537.0], [95.7, 33586.0], [95.8, 33626.0], [95.9, 33703.0], [96.0, 33732.0], [96.1, 33773.0], [96.2, 33836.0], [96.3, 33949.0], [96.4, 34023.0], [96.5, 34087.0], [96.6, 34214.0], [96.7, 34320.0], [96.8, 34394.0], [96.9, 34437.0], [97.0, 34579.0], [97.1, 34694.0], [97.2, 34735.0], [97.3, 34810.0], [97.4, 34849.0], [97.5, 34954.0], [97.6, 35014.0], [97.7, 35110.0], [97.8, 35223.0], [97.9, 35253.0], [98.0, 35291.0], [98.1, 35433.0], [98.2, 35490.0], [98.3, 35625.0], [98.4, 35670.0], [98.5, 35707.0], [98.6, 35765.0], [98.7, 35806.0], [98.8, 35876.0], [98.9, 36091.0], [99.0, 36271.0], [99.1, 36514.0], [99.2, 36637.0], [99.3, 36707.0], [99.4, 36929.0], [99.5, 37089.0], [99.6, 37477.0], [99.7, 37685.0], [99.8, 37951.0], [99.9, 38397.0], [100.0, 39328.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1300.0, "maxY": 73.0, "series": [{"data": [[34500.0, 4.0], [32900.0, 5.0], [33700.0, 9.0], [33300.0, 3.0], [34100.0, 2.0], [34900.0, 4.0], [35700.0, 7.0], [35300.0, 1.0], [36100.0, 3.0], [36500.0, 3.0], [36900.0, 2.0], [38100.0, 3.0], [37700.0, 2.0], [38500.0, 1.0], [39300.0, 1.0], [1300.0, 1.0], [1800.0, 1.0], [2000.0, 1.0], [2100.0, 3.0], [2200.0, 2.0], [2300.0, 1.0], [2400.0, 1.0], [2500.0, 2.0], [2600.0, 3.0], [2800.0, 1.0], [3000.0, 3.0], [3100.0, 1.0], [3300.0, 2.0], [3200.0, 2.0], [3400.0, 4.0], [3500.0, 3.0], [3700.0, 1.0], [3900.0, 3.0], [4200.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5000.0, 1.0], [5200.0, 1.0], [5400.0, 1.0], [5600.0, 2.0], [6100.0, 1.0], [6200.0, 1.0], [6400.0, 2.0], [6900.0, 1.0], [6700.0, 2.0], [7000.0, 2.0], [7400.0, 1.0], [7300.0, 1.0], [7200.0, 1.0], [7600.0, 5.0], [7700.0, 1.0], [7900.0, 1.0], [8100.0, 1.0], [8500.0, 2.0], [8600.0, 1.0], [9100.0, 2.0], [9200.0, 2.0], [9000.0, 2.0], [8900.0, 5.0], [8800.0, 1.0], [9500.0, 3.0], [9300.0, 4.0], [9400.0, 1.0], [9600.0, 2.0], [9700.0, 2.0], [9900.0, 3.0], [10000.0, 4.0], [9800.0, 5.0], [10200.0, 1.0], [10100.0, 2.0], [10600.0, 4.0], [10400.0, 4.0], [10700.0, 3.0], [10500.0, 2.0], [10800.0, 6.0], [11100.0, 3.0], [10900.0, 3.0], [11200.0, 5.0], [11000.0, 1.0], [11400.0, 2.0], [11300.0, 3.0], [11500.0, 2.0], [11600.0, 1.0], [12000.0, 2.0], [11900.0, 3.0], [11800.0, 2.0], [12200.0, 1.0], [12600.0, 1.0], [12300.0, 2.0], [12700.0, 1.0], [12400.0, 2.0], [12800.0, 4.0], [12900.0, 4.0], [13100.0, 5.0], [13200.0, 1.0], [13000.0, 1.0], [13600.0, 3.0], [13800.0, 3.0], [13700.0, 2.0], [14000.0, 7.0], [13900.0, 2.0], [14300.0, 2.0], [14100.0, 5.0], [14200.0, 2.0], [14700.0, 1.0], [14500.0, 2.0], [14600.0, 1.0], [14800.0, 2.0], [15000.0, 2.0], [15300.0, 5.0], [15100.0, 2.0], [15200.0, 2.0], [14900.0, 1.0], [15400.0, 5.0], [15500.0, 4.0], [15700.0, 2.0], [15800.0, 5.0], [15600.0, 2.0], [16200.0, 5.0], [15900.0, 6.0], [16000.0, 3.0], [16300.0, 2.0], [17200.0, 5.0], [16800.0, 9.0], [17400.0, 2.0], [17000.0, 7.0], [16600.0, 6.0], [16400.0, 5.0], [17600.0, 4.0], [18000.0, 5.0], [18400.0, 9.0], [18200.0, 4.0], [19200.0, 9.0], [18800.0, 3.0], [19000.0, 9.0], [19400.0, 10.0], [18600.0, 6.0], [20000.0, 12.0], [20200.0, 18.0], [19800.0, 11.0], [19600.0, 13.0], [20400.0, 12.0], [20800.0, 19.0], [21400.0, 42.0], [21000.0, 22.0], [21200.0, 26.0], [20600.0, 13.0], [22200.0, 36.0], [22000.0, 45.0], [21600.0, 24.0], [22400.0, 54.0], [21800.0, 29.0], [23000.0, 54.0], [22800.0, 56.0], [23400.0, 57.0], [23200.0, 68.0], [22600.0, 42.0], [24200.0, 50.0], [24400.0, 51.0], [24000.0, 55.0], [23600.0, 56.0], [23800.0, 73.0], [25200.0, 36.0], [25000.0, 41.0], [24600.0, 42.0], [25400.0, 37.0], [24800.0, 47.0], [25600.0, 37.0], [26200.0, 27.0], [26000.0, 31.0], [25800.0, 36.0], [26400.0, 19.0], [26600.0, 17.0], [27600.0, 11.0], [27400.0, 15.0], [27000.0, 11.0], [27200.0, 13.0], [26800.0, 16.0], [27800.0, 10.0], [28600.0, 13.0], [28200.0, 7.0], [28000.0, 9.0], [28400.0, 5.0], [28800.0, 4.0], [29600.0, 7.0], [29400.0, 7.0], [29000.0, 8.0], [29200.0, 8.0], [30200.0, 6.0], [29800.0, 7.0], [30600.0, 7.0], [30400.0, 11.0], [30000.0, 6.0], [31400.0, 6.0], [31000.0, 5.0], [30800.0, 9.0], [31200.0, 7.0], [31600.0, 4.0], [32600.0, 5.0], [32400.0, 4.0], [32000.0, 7.0], [31800.0, 5.0], [32200.0, 3.0], [32800.0, 14.0], [34800.0, 6.0], [34000.0, 5.0], [33600.0, 5.0], [34400.0, 4.0], [33200.0, 7.0], [35600.0, 7.0], [36400.0, 2.0], [35200.0, 9.0], [36000.0, 2.0], [36800.0, 2.0], [37600.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [33500.0, 7.0], [34700.0, 5.0], [33900.0, 4.0], [34300.0, 4.0], [33100.0, 6.0], [35100.0, 3.0], [35900.0, 2.0], [36300.0, 1.0], [36700.0, 2.0], [35500.0, 3.0], [37100.0, 1.0], [37500.0, 3.0], [37900.0, 2.0], [38300.0, 1.0], [16700.0, 3.0], [17300.0, 6.0], [17100.0, 2.0], [16500.0, 9.0], [16900.0, 2.0], [17500.0, 5.0], [17900.0, 4.0], [18300.0, 8.0], [18100.0, 2.0], [17700.0, 1.0], [18700.0, 8.0], [19100.0, 11.0], [18900.0, 8.0], [18500.0, 11.0], [19300.0, 8.0], [19700.0, 9.0], [20100.0, 18.0], [19500.0, 11.0], [19900.0, 17.0], [20300.0, 12.0], [20700.0, 22.0], [20900.0, 21.0], [20500.0, 22.0], [21500.0, 41.0], [21300.0, 26.0], [21100.0, 27.0], [21900.0, 36.0], [21700.0, 41.0], [22500.0, 55.0], [22300.0, 48.0], [22100.0, 32.0], [23100.0, 61.0], [23300.0, 58.0], [22700.0, 61.0], [23500.0, 48.0], [22900.0, 43.0], [23700.0, 46.0], [23900.0, 45.0], [24500.0, 54.0], [24100.0, 50.0], [24300.0, 64.0], [25500.0, 36.0], [24900.0, 49.0], [24700.0, 55.0], [25100.0, 34.0], [25300.0, 35.0], [26100.0, 28.0], [25900.0, 32.0], [26500.0, 19.0], [26300.0, 22.0], [25700.0, 31.0], [26700.0, 13.0], [27500.0, 8.0], [26900.0, 14.0], [27100.0, 13.0], [27300.0, 15.0], [27700.0, 11.0], [28100.0, 6.0], [28300.0, 4.0], [27900.0, 12.0], [28500.0, 5.0], [29300.0, 7.0], [28900.0, 9.0], [28700.0, 6.0], [29500.0, 7.0], [29100.0, 6.0], [29900.0, 8.0], [30500.0, 5.0], [29700.0, 9.0], [30700.0, 7.0], [30100.0, 10.0], [30300.0, 6.0], [31300.0, 6.0], [30900.0, 9.0], [31100.0, 8.0], [31500.0, 8.0], [31700.0, 4.0], [31900.0, 7.0], [32500.0, 5.0], [32700.0, 7.0], [32100.0, 10.0], [32300.0, 7.0], [33800.0, 5.0], [34200.0, 5.0], [34600.0, 5.0], [33400.0, 4.0], [33000.0, 6.0], [36600.0, 3.0], [35400.0, 7.0], [36200.0, 1.0], [35800.0, 5.0], [35000.0, 5.0], [37400.0, 1.0], [37000.0, 4.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3749.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3749.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 144.12264150943406, "minX": 1.56702816E12, "maxY": 250.0, "series": [{"data": [[1.56702852E12, 144.12264150943406], [1.56702822E12, 250.0], [1.56702816E12, 211.70434782608686], [1.56702834E12, 250.0], [1.56702828E12, 250.0], [1.56702846E12, 243.7231270358304], [1.5670284E12, 250.0]], "isOverall": false, "label": "SEOC_Active_Thread_Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56702852E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1338.0, "minX": 1.0, "maxY": 31650.0, "series": [{"data": [[2.0, 1338.0], [3.0, 2585.0], [4.0, 3307.0], [5.0, 6194.0], [6.0, 6240.0], [7.0, 6410.0], [8.0, 2144.0], [9.0, 8539.0], [10.0, 13174.0], [11.0, 2683.0], [12.0, 10519.0], [13.0, 11065.0], [14.0, 8911.0], [15.0, 11298.0], [16.0, 2321.0], [17.0, 12260.0], [18.0, 20755.0], [19.0, 5129.0], [20.0, 3228.0], [21.0, 3130.0], [22.0, 6716.0], [23.0, 21193.0], [24.0, 12388.0], [25.0, 7060.5], [26.0, 10444.0], [27.0, 3944.3333333333335], [28.0, 3322.0], [29.0, 4491.5], [30.0, 5022.5], [31.0, 8169.0], [32.0, 3169.5], [33.0, 24099.0], [35.0, 5628.0], [34.0, 7087.0], [36.0, 6350.5], [37.0, 8679.0], [38.0, 4274.0], [39.0, 16514.0], [40.0, 7305.5], [41.0, 14723.0], [42.0, 9698.5], [43.0, 5675.0], [45.0, 25884.5], [44.0, 9501.0], [47.0, 18903.0], [46.0, 10113.0], [48.0, 7063.0], [49.0, 7374.0], [50.0, 5598.5], [51.0, 15369.0], [52.0, 6945.5], [53.0, 11305.0], [54.0, 3479.0], [55.0, 7256.5], [56.0, 5161.0], [57.0, 7570.0], [58.0, 9416.5], [59.0, 7122.5], [61.0, 15440.0], [60.0, 11606.0], [63.0, 20651.0], [62.0, 10969.0], [67.0, 21703.0], [66.0, 14429.0], [65.0, 19359.333333333332], [64.0, 14850.0], [71.0, 9975.0], [70.0, 16836.0], [69.0, 14061.0], [68.0, 15979.0], [75.0, 16857.0], [74.0, 16120.333333333334], [73.0, 26659.0], [72.0, 15883.5], [79.0, 18234.0], [78.0, 14620.0], [77.0, 27777.0], [76.0, 16525.0], [82.0, 10281.5], [83.0, 11422.0], [81.0, 17183.0], [80.0, 14589.0], [87.0, 14256.0], [86.0, 27384.0], [85.0, 14180.0], [84.0, 27002.0], [91.0, 26779.0], [90.0, 16660.0], [89.0, 16227.0], [88.0, 28862.0], [95.0, 27043.0], [94.0, 26639.0], [93.0, 17258.0], [92.0, 17092.0], [97.0, 11372.5], [99.0, 17698.0], [98.0, 20171.0], [96.0, 18090.0], [100.0, 12621.0], [101.0, 17620.5], [103.0, 10662.666666666666], [102.0, 23761.666666666668], [104.0, 18139.333333333332], [106.0, 13118.5], [107.0, 16522.0], [105.0, 28430.0], [111.0, 17878.0], [110.0, 16981.5], [109.0, 16780.5], [108.0, 18322.0], [114.0, 12683.5], [115.0, 18667.0], [113.0, 16649.0], [112.0, 25560.0], [119.0, 19234.0], [118.0, 19535.0], [117.0, 18980.333333333332], [116.0, 19160.0], [123.0, 18584.25], [122.0, 19717.0], [121.0, 19341.0], [120.0, 25011.0], [127.0, 16687.0], [126.0, 19879.0], [125.0, 22479.0], [124.0, 20468.0], [133.0, 16729.0], [135.0, 19431.0], [134.0, 19262.0], [132.0, 18488.0], [131.0, 18393.0], [130.0, 19040.0], [129.0, 20376.0], [128.0, 19732.0], [143.0, 16895.25], [142.0, 24395.0], [141.0, 19558.5], [140.0, 22447.75], [139.0, 19076.0], [138.0, 19559.0], [137.0, 18825.0], [136.0, 18789.666666666668], [147.0, 17454.0], [148.0, 18959.666666666668], [149.0, 16107.8], [151.0, 12932.0], [150.0, 31650.0], [146.0, 21037.0], [145.0, 22520.6], [144.0, 21095.0], [152.0, 15054.0], [153.0, 16325.0], [154.0, 16643.666666666668], [155.0, 20255.833333333332], [156.0, 16240.0], [157.0, 15654.5], [159.0, 18653.6], [158.0, 20476.0], [160.0, 14693.25], [161.0, 13865.666666666666], [162.0, 15406.25], [163.0, 15614.25], [164.0, 18853.333333333336], [165.0, 13734.5], [166.0, 12604.75], [167.0, 16143.5], [171.0, 14444.0], [172.0, 17296.666666666668], [173.0, 15072.5], [175.0, 15874.666666666666], [174.0, 19923.0], [170.0, 28679.0], [169.0, 20329.5], [168.0, 28021.0], [176.0, 17657.0], [179.0, 19909.85714285714], [181.0, 14228.333333333332], [182.0, 14496.5], [183.0, 19872.25], [180.0, 17527.0], [178.0, 21814.0], [177.0, 22980.666666666668], [184.0, 18027.5], [185.0, 13083.666666666666], [188.0, 18044.5], [189.0, 13499.333333333334], [190.0, 16723.666666666668], [191.0, 15899.333333333334], [187.0, 22699.0], [186.0, 21466.333333333332], [192.0, 19516.833333333332], [193.0, 21201.0], [194.0, 18800.777777777777], [197.0, 20706.0], [199.0, 20794.5], [198.0, 21307.75], [196.0, 22509.333333333332], [195.0, 21546.0], [201.0, 20172.6], [207.0, 20352.0], [206.0, 25285.0], [205.0, 20954.5], [204.0, 21583.0], [203.0, 23834.0], [202.0, 21686.2], [200.0, 21545.333333333332], [212.0, 19588.25], [213.0, 21553.083333333332], [214.0, 18853.666666666668], [215.0, 16938.142857142855], [211.0, 23780.75], [210.0, 20904.0], [209.0, 24538.666666666668], [208.0, 23561.25], [216.0, 19897.4], [217.0, 22529.2], [220.0, 17776.5], [221.0, 26017.666666666668], [223.0, 24209.0], [222.0, 22753.44], [219.0, 20963.0], [218.0, 21715.5], [224.0, 23448.714285714283], [226.0, 20105.666666666668], [229.0, 24902.083333333336], [230.0, 21454.333333333336], [231.0, 21797.0], [228.0, 23334.0], [227.0, 23175.818181818184], [225.0, 21346.0], [233.0, 22771.923076923074], [234.0, 21161.25], [236.0, 23354.91176470588], [237.0, 21370.5], [238.0, 24100.81081081081], [239.0, 23558.44444444444], [235.0, 24166.6], [232.0, 21956.444444444445], [241.0, 21608.250000000004], [242.0, 23041.17647058823], [244.0, 20289.833333333336], [246.0, 23167.5625], [247.0, 22191.499999999996], [245.0, 25411.2], [243.0, 21917.326923076926], [240.0, 23691.923076923078], [248.0, 23994.6], [249.0, 23990.657894736847], [250.0, 25052.356756756788], [1.0, 2228.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[233.47786666666732, 23726.100266666657]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 966.0, "minX": 1.56702816E12, "maxY": 3041889.033333333, "series": [{"data": [[1.56702852E12, 2100587.8666666667], [1.56702822E12, 2779315.55], [1.56702816E12, 1709204.75], [1.56702834E12, 2977484.216666667], [1.56702828E12, 2937850.4833333334], [1.56702846E12, 3041889.033333333], [1.5670284E12, 3031980.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.56702852E12, 1187.2], [1.56702822E12, 1570.8], [1.56702816E12, 966.0], [1.56702834E12, 1682.8], [1.56702828E12, 1660.4], [1.56702846E12, 1719.2], [1.5670284E12, 1713.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56702852E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 15683.997101449271, "minX": 1.56702816E12, "maxY": 26759.253119429606, "series": [{"data": [[1.56702852E12, 19727.698113207545], [1.56702822E12, 26759.253119429606], [1.56702816E12, 15683.997101449271], [1.56702834E12, 24290.95008319466], [1.56702828E12, 26129.541315345705], [1.56702846E12, 24100.718241042345], [1.5670284E12, 24990.019607843144]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56702852E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15055.113043478259, "minX": 1.56702816E12, "maxY": 26073.436720142578, "series": [{"data": [[1.56702852E12, 18798.999999999993], [1.56702822E12, 26073.436720142578], [1.56702816E12, 15055.113043478259], [1.56702834E12, 23513.585690515796], [1.56702828E12, 25338.880269814494], [1.56702846E12, 22927.234527687317], [1.5670284E12, 24033.799019607846]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56702852E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 174.39386792452854, "minX": 1.56702816E12, "maxY": 855.1681159420293, "series": [{"data": [[1.56702852E12, 174.39386792452854], [1.56702822E12, 280.0944741532972], [1.56702816E12, 855.1681159420293], [1.56702834E12, 194.8668885191348], [1.56702828E12, 186.64586846542994], [1.56702846E12, 207.3941368078177], [1.5670284E12, 199.71078431372575]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56702852E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1338.0, "minX": 1.56702816E12, "maxY": 39328.0, "series": [{"data": [[1.56702852E12, 31650.0], [1.56702822E12, 39328.0], [1.56702816E12, 30223.0], [1.56702834E12, 34087.0], [1.56702828E12, 38865.0], [1.56702846E12, 37951.0], [1.5670284E12, 35665.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.56702852E12, 1338.0], [1.56702822E12, 20164.0], [1.56702816E12, 1856.0], [1.56702834E12, 19918.0], [1.56702828E12, 20589.0], [1.56702846E12, 17643.0], [1.5670284E12, 19362.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.56702852E12, 26895.5], [1.56702822E12, 34961.8], [1.56702816E12, 24227.600000000002], [1.56702834E12, 30132.800000000003], [1.56702828E12, 33501.600000000006], [1.56702846E12, 30903.5], [1.5670284E12, 30476.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.56702852E12, 30325.25], [1.56702822E12, 36870.62], [1.56702816E12, 27667.200000000004], [1.56702834E12, 33174.04], [1.56702828E12, 38136.34], [1.56702846E12, 35500.350000000006], [1.5670284E12, 33785.68]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.56702852E12, 29000.75], [1.56702822E12, 35746.8], [1.56702816E12, 25590.7], [1.56702834E12, 31677.499999999996], [1.56702828E12, 34788.0], [1.56702846E12, 32304.75], [1.5670284E12, 32746.3]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56702852E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11236.0, "minX": 1.0, "maxY": 25846.0, "series": [{"data": [[2.0, 23758.0], [36.0, 25384.0], [3.0, 24421.5], [4.0, 22985.5], [5.0, 23620.0], [6.0, 22926.5], [7.0, 24202.0], [8.0, 23953.5], [9.0, 24298.0], [10.0, 23499.5], [11.0, 23328.0], [12.0, 23472.0], [13.0, 23911.5], [14.0, 24105.5], [15.0, 24348.0], [1.0, 13627.5], [16.0, 23008.0], [17.0, 22693.5], [18.0, 25096.5], [19.0, 23343.0], [20.0, 23745.5], [22.0, 23775.0], [24.0, 24426.0], [25.0, 25811.0], [27.0, 21037.0], [28.0, 11236.0], [30.0, 25846.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9831.0, "minX": 1.0, "maxY": 24409.0, "series": [{"data": [[2.0, 22839.0], [36.0, 21587.0], [3.0, 22901.0], [4.0, 22144.0], [5.0, 22335.0], [6.0, 22201.5], [7.0, 23366.0], [8.0, 23132.0], [9.0, 23602.0], [10.0, 22857.5], [11.0, 22602.5], [12.0, 22818.0], [13.0, 22830.5], [14.0, 23398.0], [15.0, 23679.0], [1.0, 13118.0], [16.0, 22078.5], [17.0, 21889.0], [18.0, 24208.0], [19.0, 22111.0], [20.0, 23193.5], [22.0, 22315.5], [24.0, 22082.0], [25.0, 24409.0], [27.0, 19810.0], [28.0, 9831.0], [30.0, 22831.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.56702816E12, "maxY": 10.2, "series": [{"data": [[1.56702852E12, 3.3333333333333335], [1.56702822E12, 9.35], [1.56702816E12, 9.916666666666666], [1.56702834E12, 10.016666666666667], [1.56702828E12, 9.883333333333333], [1.56702846E12, 9.8], [1.5670284E12, 10.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56702852E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.75, "minX": 1.56702816E12, "maxY": 10.233333333333333, "series": [{"data": [[1.56702852E12, 7.066666666666666], [1.56702822E12, 9.35], [1.56702816E12, 5.75], [1.56702834E12, 10.016666666666667], [1.56702828E12, 9.883333333333333], [1.56702846E12, 10.233333333333333], [1.5670284E12, 10.2]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56702852E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.75, "minX": 1.56702816E12, "maxY": 10.233333333333333, "series": [{"data": [[1.56702852E12, 7.066666666666666], [1.56702822E12, 9.35], [1.56702816E12, 5.75], [1.56702834E12, 10.016666666666667], [1.56702828E12, 9.883333333333333], [1.56702846E12, 10.233333333333333], [1.5670284E12, 10.2]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56702852E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.75, "minX": 1.56702816E12, "maxY": 10.233333333333333, "series": [{"data": [[1.56702852E12, 7.066666666666666], [1.56702822E12, 9.35], [1.56702816E12, 5.75], [1.56702834E12, 10.016666666666667], [1.56702828E12, 9.883333333333333], [1.56702846E12, 10.233333333333333], [1.5670284E12, 10.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56702852E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

